// Techmo Sarmata ASR API
// version: 2.0.0
// authors: Dawid Skurzok, Paweł Jaciów
// date:    2018-01-30
//
// Some content is derived from:
// https://github.com/googleapis/googleapis/blob/master/google/cloud/speech/v1/cloud_speech.proto
syntax = "proto3";

package techmo.sarmata;

// Service that implements Techmo Automatic-Speech-Recognition (ASR) API.
//
// Grammar persistence options:
// - per alive connection: user opens special channel to service to define grammars, grammars are kept as long as connection is alive,
// - predefined per user on disk: service keep predefined grammar as files on disk, loads it at startup,
// - auto-cache: all grammars are cached automatically using its hash as ID, max number of cached grammars and prune policy must be defined.
//
// Users account manipulation will be provided by another service.
service ASR {
  // Performs bidirectional streaming speech recognition using given grammar.
  // Receive results while sending audio.
  rpc Recognize(stream RecognizeRequest) returns (stream RecognizeResponse);
  
  // Defines grammar that will be stored for future use in recognitions
  // requested by `Recognize`.
  rpc DefineGrammar(DefineGrammarRequest) returns (DefineGrammarResponse);
}

// The top-level message sent by the client for the `Recognize` method.
// Multiple `RecognizeRequest` messages are sent. The first message
// must contain a `config` message and must not contain `audio` data.
// All subsequent messages must contain `audio` data and must not contain a
// `config` message.
message RecognizeRequest {
  // The request, which is either a config or audio content.
  oneof request {
    // The `config` message provides information to the recognizer
    // that specifies how to process the request.
    RecognitionConfig config = 1;

    // The audio data to be recognized. Sequential chunks of audio data may be
    // sent in sequential `RecognizeRequest` messages
    // or whole data may be send in one message.
    bytes audio_content = 2;
  }
}

// Provides information to the recognizer that specifies
// how to process the request.
message RecognitionConfig {
  // [*Optional*] A means to provide additional configuration fields via request.
  repeated ConfigField config = 1;
  
  // [*Optional*] Authorization token.
  string token = 2;

  // [*Required*] Sample rate in Hertz of the audio data sent in all
  // `RecognizeRequest` messages.
  int32 sample_rate_hertz = 3;


  // [*Optional*] Maximum number of recognition hypotheses to be returned.
  // Specifically, the maximum number of `Phrase` messages
  // within each `RecognizeResponse`.
  // The server may return fewer than `max_alternatives`.
  // If omitted, will return a maximum of one.
  int32 max_alternatives = 4;

  // [*Required*] grammar, which is either just a name of a grammar stored earlier with
  // `DefineGrammar` method or a full grammar data.
  oneof grammar {
    // Grammar ID of a stored grammar to use for the recognition.
    string name = 5;

    // Grammar data to use for the recognition.
    string data = 6;
  }
}

// Provides a pair of configuration field name and value.
message ConfigField {
  // Name of configuration field.
  string key = 1;

  // Value of configuration field.
  string value = 2;
}

// Indicates the status and type of message.
enum ResponseStatus {
  EMPTY = 0;                       // Should not be set.
  SUCCESS = 1;                     // Phrase recognized.
  PARTIAL_MATCH = 2;               // Recognized only beginning of the utterence.
  NO_MATCH = 3;                    // No pharse recognized.
  NO_INPUT_TIMEOUT = 4;            // No spech or no match in expected time.
  GRAMMAR_LOAD_FAILURE = 5;        // Grammar connot be loaded. Details in `error` field.
  GRAMMAR_COMPILATION_FAILURE = 6; // Grammar compilation error. Details in `error` field.
  RECOGNIZER_ERROR = 7;            // Iternal error.
  TOO_MUCH_SPEECH_TIMEOUT = 8;     // Speech to long.
  CANCELLED = 9;                   // Recognition cancelled.
  START_OF_INPUT = 10;             // Start of speech detected.
  END_OF_AUDIO = 11;               // Finished processing.
  SEMANTICS_FAILURE = 12;          // Error in Semantic Interpretation.
}

// `RecognizeResponse` is the only message returned to the client by
// `Recognize`. A series of one or more `RecognizeResponse`
// messages are streamed back to the client.
message RecognizeResponse {
  // Status and type of message.
  ResponseStatus status = 1;

  // Critical error message.
  string error = 2;
  
  // Minor error message, e.g. error in transcription.
  string warning = 3;

  // Time of event (if applicable).
  int32 event_time = 4;
  
  // List of recognized phrases ordered by probability.
  repeated RecognizedPhrase results = 5;
}

// A single phrase recognition result.
message RecognizedPhrase {
  // A single word recognition result.
  message RecognizedWord {
    // Recognized word transcription.
    string transcript = 1;
    
    // Word recognition confidence.
    double confidence = 2;
    
    // Recognized word begin time.
    int32 start = 3;
    
    // Recognized word end time.
    int32 end = 4;
    
    // Logarithmic probability of the recognized word.
    double logprob = 5;
  }
  
  // Words in recognized phrase.
  repeated RecognizedWord words = 1;
  
  // Confidence of phrase recognition.
  double confidence = 2;
  
  // Is recognition considered correct (confidence above thresshold).
  bool correct = 3;
  
  // Semantic Interpretation (in JSON).
  string semantic_interpretation = 4;
}

// The top-level message sent by the client for the `DefineGrammar` method.
// It will define grammar specified in `grammar` field for use in future recognitions
// under ID given by `name` field.
// When empty `grammar` is sent, the `name` grammar will be deleted from cache.
message DefineGrammarRequest {
  // [*Optional*] Authorization token.
  string token   = 1;

  // [*Required*] Grammar ID to store the grammar for future use with.
  string name    = 2;

  // [*Optional*] Grammar data to be stored for future use.
  // Supported grammar formats are XML and ABNF as specified by [W3C](https://www.w3.org/TR/speech-grammar/).
  // Empty (not set) requests deletion of the grammar cached with ID `name`.
  string grammar = 3;
}

// The only message returned to the client by the `DefineGrammar` method. It
// contains a grammar creation confirmation or an error message.
message DefineGrammarResponse {
  // Status and type of message.
  ResponseStatus status = 1;

  // Error message.
  string error = 2;

  // True if grammar was created.
  bool ok = 3;
}
