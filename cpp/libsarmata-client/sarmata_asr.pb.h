// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sarmata_asr.proto

#ifndef PROTOBUF_sarmata_5fasr_2eproto__INCLUDED
#define PROTOBUF_sarmata_5fasr_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace techmo {
namespace sarmata {
class ConfigField;
class ConfigFieldDefaultTypeInternal;
extern ConfigFieldDefaultTypeInternal _ConfigField_default_instance_;
class DefineGrammarRequest;
class DefineGrammarRequestDefaultTypeInternal;
extern DefineGrammarRequestDefaultTypeInternal _DefineGrammarRequest_default_instance_;
class DefineGrammarResponse;
class DefineGrammarResponseDefaultTypeInternal;
extern DefineGrammarResponseDefaultTypeInternal _DefineGrammarResponse_default_instance_;
class RecognitionConfig;
class RecognitionConfigDefaultTypeInternal;
extern RecognitionConfigDefaultTypeInternal _RecognitionConfig_default_instance_;
class RecognizeRequest;
class RecognizeRequestDefaultTypeInternal;
extern RecognizeRequestDefaultTypeInternal _RecognizeRequest_default_instance_;
class RecognizeResponse;
class RecognizeResponseDefaultTypeInternal;
extern RecognizeResponseDefaultTypeInternal _RecognizeResponse_default_instance_;
class RecognizedPhrase;
class RecognizedPhraseDefaultTypeInternal;
extern RecognizedPhraseDefaultTypeInternal _RecognizedPhrase_default_instance_;
class RecognizedPhrase_RecognizedWord;
class RecognizedPhrase_RecognizedWordDefaultTypeInternal;
extern RecognizedPhrase_RecognizedWordDefaultTypeInternal _RecognizedPhrase_RecognizedWord_default_instance_;
class TimeoutSettings;
class TimeoutSettingsDefaultTypeInternal;
extern TimeoutSettingsDefaultTypeInternal _TimeoutSettings_default_instance_;
}  // namespace sarmata
}  // namespace techmo

namespace techmo {
namespace sarmata {

namespace protobuf_sarmata_5fasr_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_sarmata_5fasr_2eproto

enum ResponseStatus {
  EMPTY = 0,
  SUCCESS = 1,
  PARTIAL_MATCH = 2,
  NO_MATCH = 3,
  NO_INPUT_TIMEOUT = 4,
  GRAMMAR_LOAD_FAILURE = 5,
  GRAMMAR_COMPILATION_FAILURE = 6,
  RECOGNIZER_ERROR = 7,
  TOO_MUCH_SPEECH_TIMEOUT = 8,
  CANCELLED = 9,
  START_OF_INPUT = 10,
  END_OF_AUDIO = 11,
  SEMANTICS_FAILURE = 12,
  ResponseStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ResponseStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ResponseStatus_IsValid(int value);
const ResponseStatus ResponseStatus_MIN = EMPTY;
const ResponseStatus ResponseStatus_MAX = SEMANTICS_FAILURE;
const int ResponseStatus_ARRAYSIZE = ResponseStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResponseStatus_descriptor();
inline const ::std::string& ResponseStatus_Name(ResponseStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResponseStatus_descriptor(), value);
}
inline bool ResponseStatus_Parse(
    const ::std::string& name, ResponseStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResponseStatus>(
    ResponseStatus_descriptor(), name, value);
}
// ===================================================================

class RecognizeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:techmo.sarmata.RecognizeRequest) */ {
 public:
  RecognizeRequest();
  virtual ~RecognizeRequest();

  RecognizeRequest(const RecognizeRequest& from);

  inline RecognizeRequest& operator=(const RecognizeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecognizeRequest(RecognizeRequest&& from) noexcept
    : RecognizeRequest() {
    *this = ::std::move(from);
  }

  inline RecognizeRequest& operator=(RecognizeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecognizeRequest& default_instance();

  enum RequestCase {
    kConfig = 1,
    kAudioContent = 2,
    REQUEST_NOT_SET = 0,
  };

  static inline const RecognizeRequest* internal_default_instance() {
    return reinterpret_cast<const RecognizeRequest*>(
               &_RecognizeRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(RecognizeRequest* other);
  friend void swap(RecognizeRequest& a, RecognizeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecognizeRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RecognizeRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RecognizeRequest& from);
  void MergeFrom(const RecognizeRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RecognizeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .techmo.sarmata.RecognitionConfig config = 1;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 1;
  const ::techmo::sarmata::RecognitionConfig& config() const;
  ::techmo::sarmata::RecognitionConfig* mutable_config();
  ::techmo::sarmata::RecognitionConfig* release_config();
  void set_allocated_config(::techmo::sarmata::RecognitionConfig* config);

  // bytes audio_content = 2;
  private:
  bool has_audio_content() const;
  public:
  void clear_audio_content();
  static const int kAudioContentFieldNumber = 2;
  const ::std::string& audio_content() const;
  void set_audio_content(const ::std::string& value);
  #if LANG_CXX11
  void set_audio_content(::std::string&& value);
  #endif
  void set_audio_content(const char* value);
  void set_audio_content(const void* value, size_t size);
  ::std::string* mutable_audio_content();
  ::std::string* release_audio_content();
  void set_allocated_audio_content(::std::string* audio_content);

  RequestCase request_case() const;
  // @@protoc_insertion_point(class_scope:techmo.sarmata.RecognizeRequest)
 private:
  void set_has_config();
  void set_has_audio_content();

  inline bool has_request() const;
  void clear_request();
  inline void clear_has_request();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union RequestUnion {
    RequestUnion() {}
    ::techmo::sarmata::RecognitionConfig* config_;
    ::google::protobuf::internal::ArenaStringPtr audio_content_;
  } request_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_sarmata_5fasr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RecognitionConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:techmo.sarmata.RecognitionConfig) */ {
 public:
  RecognitionConfig();
  virtual ~RecognitionConfig();

  RecognitionConfig(const RecognitionConfig& from);

  inline RecognitionConfig& operator=(const RecognitionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecognitionConfig(RecognitionConfig&& from) noexcept
    : RecognitionConfig() {
    *this = ::std::move(from);
  }

  inline RecognitionConfig& operator=(RecognitionConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecognitionConfig& default_instance();

  enum GrammarCase {
    kGrammarName = 1,
    kGrammarData = 2,
    GRAMMAR_NOT_SET = 0,
  };

  static inline const RecognitionConfig* internal_default_instance() {
    return reinterpret_cast<const RecognitionConfig*>(
               &_RecognitionConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(RecognitionConfig* other);
  friend void swap(RecognitionConfig& a, RecognitionConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecognitionConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  RecognitionConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RecognitionConfig& from);
  void MergeFrom(const RecognitionConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RecognitionConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .techmo.sarmata.ConfigField additional_settings = 7;
  int additional_settings_size() const;
  void clear_additional_settings();
  static const int kAdditionalSettingsFieldNumber = 7;
  const ::techmo::sarmata::ConfigField& additional_settings(int index) const;
  ::techmo::sarmata::ConfigField* mutable_additional_settings(int index);
  ::techmo::sarmata::ConfigField* add_additional_settings();
  ::google::protobuf::RepeatedPtrField< ::techmo::sarmata::ConfigField >*
      mutable_additional_settings();
  const ::google::protobuf::RepeatedPtrField< ::techmo::sarmata::ConfigField >&
      additional_settings() const;

  // .techmo.sarmata.TimeoutSettings timeout_settings = 6;
  bool has_timeout_settings() const;
  void clear_timeout_settings();
  static const int kTimeoutSettingsFieldNumber = 6;
  const ::techmo::sarmata::TimeoutSettings& timeout_settings() const;
  ::techmo::sarmata::TimeoutSettings* mutable_timeout_settings();
  ::techmo::sarmata::TimeoutSettings* release_timeout_settings();
  void set_allocated_timeout_settings(::techmo::sarmata::TimeoutSettings* timeout_settings);

  // int32 sample_rate_hertz = 3;
  void clear_sample_rate_hertz();
  static const int kSampleRateHertzFieldNumber = 3;
  ::google::protobuf::int32 sample_rate_hertz() const;
  void set_sample_rate_hertz(::google::protobuf::int32 value);

  // int32 max_alternatives = 4;
  void clear_max_alternatives();
  static const int kMaxAlternativesFieldNumber = 4;
  ::google::protobuf::int32 max_alternatives() const;
  void set_max_alternatives(::google::protobuf::int32 value);

  // double no_match_threshold = 5;
  void clear_no_match_threshold();
  static const int kNoMatchThresholdFieldNumber = 5;
  double no_match_threshold() const;
  void set_no_match_threshold(double value);

  // string grammar_name = 1;
  private:
  bool has_grammar_name() const;
  public:
  void clear_grammar_name();
  static const int kGrammarNameFieldNumber = 1;
  const ::std::string& grammar_name() const;
  void set_grammar_name(const ::std::string& value);
  #if LANG_CXX11
  void set_grammar_name(::std::string&& value);
  #endif
  void set_grammar_name(const char* value);
  void set_grammar_name(const char* value, size_t size);
  ::std::string* mutable_grammar_name();
  ::std::string* release_grammar_name();
  void set_allocated_grammar_name(::std::string* grammar_name);

  // string grammar_data = 2;
  private:
  bool has_grammar_data() const;
  public:
  void clear_grammar_data();
  static const int kGrammarDataFieldNumber = 2;
  const ::std::string& grammar_data() const;
  void set_grammar_data(const ::std::string& value);
  #if LANG_CXX11
  void set_grammar_data(::std::string&& value);
  #endif
  void set_grammar_data(const char* value);
  void set_grammar_data(const char* value, size_t size);
  ::std::string* mutable_grammar_data();
  ::std::string* release_grammar_data();
  void set_allocated_grammar_data(::std::string* grammar_data);

  GrammarCase grammar_case() const;
  // @@protoc_insertion_point(class_scope:techmo.sarmata.RecognitionConfig)
 private:
  void set_has_grammar_name();
  void set_has_grammar_data();

  inline bool has_grammar() const;
  void clear_grammar();
  inline void clear_has_grammar();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::techmo::sarmata::ConfigField > additional_settings_;
  ::techmo::sarmata::TimeoutSettings* timeout_settings_;
  ::google::protobuf::int32 sample_rate_hertz_;
  ::google::protobuf::int32 max_alternatives_;
  double no_match_threshold_;
  union GrammarUnion {
    GrammarUnion() {}
    ::google::protobuf::internal::ArenaStringPtr grammar_name_;
    ::google::protobuf::internal::ArenaStringPtr grammar_data_;
  } grammar_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_sarmata_5fasr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TimeoutSettings : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:techmo.sarmata.TimeoutSettings) */ {
 public:
  TimeoutSettings();
  virtual ~TimeoutSettings();

  TimeoutSettings(const TimeoutSettings& from);

  inline TimeoutSettings& operator=(const TimeoutSettings& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TimeoutSettings(TimeoutSettings&& from) noexcept
    : TimeoutSettings() {
    *this = ::std::move(from);
  }

  inline TimeoutSettings& operator=(TimeoutSettings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeoutSettings& default_instance();

  static inline const TimeoutSettings* internal_default_instance() {
    return reinterpret_cast<const TimeoutSettings*>(
               &_TimeoutSettings_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(TimeoutSettings* other);
  friend void swap(TimeoutSettings& a, TimeoutSettings& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TimeoutSettings* New() const PROTOBUF_FINAL { return New(NULL); }

  TimeoutSettings* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TimeoutSettings& from);
  void MergeFrom(const TimeoutSettings& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TimeoutSettings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 no_input_timeout = 1;
  void clear_no_input_timeout();
  static const int kNoInputTimeoutFieldNumber = 1;
  ::google::protobuf::int32 no_input_timeout() const;
  void set_no_input_timeout(::google::protobuf::int32 value);

  // int32 recognition_timeout = 2;
  void clear_recognition_timeout();
  static const int kRecognitionTimeoutFieldNumber = 2;
  ::google::protobuf::int32 recognition_timeout() const;
  void set_recognition_timeout(::google::protobuf::int32 value);

  // int32 speech_complete_timeout = 3;
  void clear_speech_complete_timeout();
  static const int kSpeechCompleteTimeoutFieldNumber = 3;
  ::google::protobuf::int32 speech_complete_timeout() const;
  void set_speech_complete_timeout(::google::protobuf::int32 value);

  // int32 speech_incomplete_timeout = 4;
  void clear_speech_incomplete_timeout();
  static const int kSpeechIncompleteTimeoutFieldNumber = 4;
  ::google::protobuf::int32 speech_incomplete_timeout() const;
  void set_speech_incomplete_timeout(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:techmo.sarmata.TimeoutSettings)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 no_input_timeout_;
  ::google::protobuf::int32 recognition_timeout_;
  ::google::protobuf::int32 speech_complete_timeout_;
  ::google::protobuf::int32 speech_incomplete_timeout_;
  mutable int _cached_size_;
  friend struct protobuf_sarmata_5fasr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigField : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:techmo.sarmata.ConfigField) */ {
 public:
  ConfigField();
  virtual ~ConfigField();

  ConfigField(const ConfigField& from);

  inline ConfigField& operator=(const ConfigField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigField(ConfigField&& from) noexcept
    : ConfigField() {
    *this = ::std::move(from);
  }

  inline ConfigField& operator=(ConfigField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigField& default_instance();

  static inline const ConfigField* internal_default_instance() {
    return reinterpret_cast<const ConfigField*>(
               &_ConfigField_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ConfigField* other);
  friend void swap(ConfigField& a, ConfigField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigField* New() const PROTOBUF_FINAL { return New(NULL); }

  ConfigField* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConfigField& from);
  void MergeFrom(const ConfigField& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConfigField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:techmo.sarmata.ConfigField)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend struct protobuf_sarmata_5fasr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RecognizeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:techmo.sarmata.RecognizeResponse) */ {
 public:
  RecognizeResponse();
  virtual ~RecognizeResponse();

  RecognizeResponse(const RecognizeResponse& from);

  inline RecognizeResponse& operator=(const RecognizeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecognizeResponse(RecognizeResponse&& from) noexcept
    : RecognizeResponse() {
    *this = ::std::move(from);
  }

  inline RecognizeResponse& operator=(RecognizeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecognizeResponse& default_instance();

  static inline const RecognizeResponse* internal_default_instance() {
    return reinterpret_cast<const RecognizeResponse*>(
               &_RecognizeResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(RecognizeResponse* other);
  friend void swap(RecognizeResponse& a, RecognizeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecognizeResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  RecognizeResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RecognizeResponse& from);
  void MergeFrom(const RecognizeResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RecognizeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .techmo.sarmata.RecognizedPhrase results = 4;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 4;
  const ::techmo::sarmata::RecognizedPhrase& results(int index) const;
  ::techmo::sarmata::RecognizedPhrase* mutable_results(int index);
  ::techmo::sarmata::RecognizedPhrase* add_results();
  ::google::protobuf::RepeatedPtrField< ::techmo::sarmata::RecognizedPhrase >*
      mutable_results();
  const ::google::protobuf::RepeatedPtrField< ::techmo::sarmata::RecognizedPhrase >&
      results() const;

  // string error = 2;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  #if LANG_CXX11
  void set_error(::std::string&& value);
  #endif
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // .techmo.sarmata.ResponseStatus status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::techmo::sarmata::ResponseStatus status() const;
  void set_status(::techmo::sarmata::ResponseStatus value);

  // int32 event_time = 3;
  void clear_event_time();
  static const int kEventTimeFieldNumber = 3;
  ::google::protobuf::int32 event_time() const;
  void set_event_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:techmo.sarmata.RecognizeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::techmo::sarmata::RecognizedPhrase > results_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  int status_;
  ::google::protobuf::int32 event_time_;
  mutable int _cached_size_;
  friend struct protobuf_sarmata_5fasr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RecognizedPhrase_RecognizedWord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:techmo.sarmata.RecognizedPhrase.RecognizedWord) */ {
 public:
  RecognizedPhrase_RecognizedWord();
  virtual ~RecognizedPhrase_RecognizedWord();

  RecognizedPhrase_RecognizedWord(const RecognizedPhrase_RecognizedWord& from);

  inline RecognizedPhrase_RecognizedWord& operator=(const RecognizedPhrase_RecognizedWord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecognizedPhrase_RecognizedWord(RecognizedPhrase_RecognizedWord&& from) noexcept
    : RecognizedPhrase_RecognizedWord() {
    *this = ::std::move(from);
  }

  inline RecognizedPhrase_RecognizedWord& operator=(RecognizedPhrase_RecognizedWord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecognizedPhrase_RecognizedWord& default_instance();

  static inline const RecognizedPhrase_RecognizedWord* internal_default_instance() {
    return reinterpret_cast<const RecognizedPhrase_RecognizedWord*>(
               &_RecognizedPhrase_RecognizedWord_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(RecognizedPhrase_RecognizedWord* other);
  friend void swap(RecognizedPhrase_RecognizedWord& a, RecognizedPhrase_RecognizedWord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecognizedPhrase_RecognizedWord* New() const PROTOBUF_FINAL { return New(NULL); }

  RecognizedPhrase_RecognizedWord* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RecognizedPhrase_RecognizedWord& from);
  void MergeFrom(const RecognizedPhrase_RecognizedWord& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RecognizedPhrase_RecognizedWord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string transcript = 1;
  void clear_transcript();
  static const int kTranscriptFieldNumber = 1;
  const ::std::string& transcript() const;
  void set_transcript(const ::std::string& value);
  #if LANG_CXX11
  void set_transcript(::std::string&& value);
  #endif
  void set_transcript(const char* value);
  void set_transcript(const char* value, size_t size);
  ::std::string* mutable_transcript();
  ::std::string* release_transcript();
  void set_allocated_transcript(::std::string* transcript);

  // double confidence = 2;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 2;
  double confidence() const;
  void set_confidence(double value);

  // int32 start = 3;
  void clear_start();
  static const int kStartFieldNumber = 3;
  ::google::protobuf::int32 start() const;
  void set_start(::google::protobuf::int32 value);

  // int32 end = 4;
  void clear_end();
  static const int kEndFieldNumber = 4;
  ::google::protobuf::int32 end() const;
  void set_end(::google::protobuf::int32 value);

  // double logprob = 5;
  void clear_logprob();
  static const int kLogprobFieldNumber = 5;
  double logprob() const;
  void set_logprob(double value);

  // @@protoc_insertion_point(class_scope:techmo.sarmata.RecognizedPhrase.RecognizedWord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr transcript_;
  double confidence_;
  ::google::protobuf::int32 start_;
  ::google::protobuf::int32 end_;
  double logprob_;
  mutable int _cached_size_;
  friend struct protobuf_sarmata_5fasr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RecognizedPhrase : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:techmo.sarmata.RecognizedPhrase) */ {
 public:
  RecognizedPhrase();
  virtual ~RecognizedPhrase();

  RecognizedPhrase(const RecognizedPhrase& from);

  inline RecognizedPhrase& operator=(const RecognizedPhrase& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecognizedPhrase(RecognizedPhrase&& from) noexcept
    : RecognizedPhrase() {
    *this = ::std::move(from);
  }

  inline RecognizedPhrase& operator=(RecognizedPhrase&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecognizedPhrase& default_instance();

  static inline const RecognizedPhrase* internal_default_instance() {
    return reinterpret_cast<const RecognizedPhrase*>(
               &_RecognizedPhrase_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(RecognizedPhrase* other);
  friend void swap(RecognizedPhrase& a, RecognizedPhrase& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecognizedPhrase* New() const PROTOBUF_FINAL { return New(NULL); }

  RecognizedPhrase* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RecognizedPhrase& from);
  void MergeFrom(const RecognizedPhrase& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RecognizedPhrase* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef RecognizedPhrase_RecognizedWord RecognizedWord;

  // accessors -------------------------------------------------------

  // repeated .techmo.sarmata.RecognizedPhrase.RecognizedWord words = 1;
  int words_size() const;
  void clear_words();
  static const int kWordsFieldNumber = 1;
  const ::techmo::sarmata::RecognizedPhrase_RecognizedWord& words(int index) const;
  ::techmo::sarmata::RecognizedPhrase_RecognizedWord* mutable_words(int index);
  ::techmo::sarmata::RecognizedPhrase_RecognizedWord* add_words();
  ::google::protobuf::RepeatedPtrField< ::techmo::sarmata::RecognizedPhrase_RecognizedWord >*
      mutable_words();
  const ::google::protobuf::RepeatedPtrField< ::techmo::sarmata::RecognizedPhrase_RecognizedWord >&
      words() const;

  // string semantic_interpretation = 4;
  void clear_semantic_interpretation();
  static const int kSemanticInterpretationFieldNumber = 4;
  const ::std::string& semantic_interpretation() const;
  void set_semantic_interpretation(const ::std::string& value);
  #if LANG_CXX11
  void set_semantic_interpretation(::std::string&& value);
  #endif
  void set_semantic_interpretation(const char* value);
  void set_semantic_interpretation(const char* value, size_t size);
  ::std::string* mutable_semantic_interpretation();
  ::std::string* release_semantic_interpretation();
  void set_allocated_semantic_interpretation(::std::string* semantic_interpretation);

  // double confidence = 2;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 2;
  double confidence() const;
  void set_confidence(double value);

  // bool correct = 3;
  void clear_correct();
  static const int kCorrectFieldNumber = 3;
  bool correct() const;
  void set_correct(bool value);

  // @@protoc_insertion_point(class_scope:techmo.sarmata.RecognizedPhrase)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::techmo::sarmata::RecognizedPhrase_RecognizedWord > words_;
  ::google::protobuf::internal::ArenaStringPtr semantic_interpretation_;
  double confidence_;
  bool correct_;
  mutable int _cached_size_;
  friend struct protobuf_sarmata_5fasr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DefineGrammarRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:techmo.sarmata.DefineGrammarRequest) */ {
 public:
  DefineGrammarRequest();
  virtual ~DefineGrammarRequest();

  DefineGrammarRequest(const DefineGrammarRequest& from);

  inline DefineGrammarRequest& operator=(const DefineGrammarRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DefineGrammarRequest(DefineGrammarRequest&& from) noexcept
    : DefineGrammarRequest() {
    *this = ::std::move(from);
  }

  inline DefineGrammarRequest& operator=(DefineGrammarRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DefineGrammarRequest& default_instance();

  static inline const DefineGrammarRequest* internal_default_instance() {
    return reinterpret_cast<const DefineGrammarRequest*>(
               &_DefineGrammarRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(DefineGrammarRequest* other);
  friend void swap(DefineGrammarRequest& a, DefineGrammarRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DefineGrammarRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DefineGrammarRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DefineGrammarRequest& from);
  void MergeFrom(const DefineGrammarRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DefineGrammarRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string grammar_name = 1;
  void clear_grammar_name();
  static const int kGrammarNameFieldNumber = 1;
  const ::std::string& grammar_name() const;
  void set_grammar_name(const ::std::string& value);
  #if LANG_CXX11
  void set_grammar_name(::std::string&& value);
  #endif
  void set_grammar_name(const char* value);
  void set_grammar_name(const char* value, size_t size);
  ::std::string* mutable_grammar_name();
  ::std::string* release_grammar_name();
  void set_allocated_grammar_name(::std::string* grammar_name);

  // string grammar_data = 2;
  void clear_grammar_data();
  static const int kGrammarDataFieldNumber = 2;
  const ::std::string& grammar_data() const;
  void set_grammar_data(const ::std::string& value);
  #if LANG_CXX11
  void set_grammar_data(::std::string&& value);
  #endif
  void set_grammar_data(const char* value);
  void set_grammar_data(const char* value, size_t size);
  ::std::string* mutable_grammar_data();
  ::std::string* release_grammar_data();
  void set_allocated_grammar_data(::std::string* grammar_data);

  // @@protoc_insertion_point(class_scope:techmo.sarmata.DefineGrammarRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr grammar_name_;
  ::google::protobuf::internal::ArenaStringPtr grammar_data_;
  mutable int _cached_size_;
  friend struct protobuf_sarmata_5fasr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DefineGrammarResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:techmo.sarmata.DefineGrammarResponse) */ {
 public:
  DefineGrammarResponse();
  virtual ~DefineGrammarResponse();

  DefineGrammarResponse(const DefineGrammarResponse& from);

  inline DefineGrammarResponse& operator=(const DefineGrammarResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DefineGrammarResponse(DefineGrammarResponse&& from) noexcept
    : DefineGrammarResponse() {
    *this = ::std::move(from);
  }

  inline DefineGrammarResponse& operator=(DefineGrammarResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DefineGrammarResponse& default_instance();

  static inline const DefineGrammarResponse* internal_default_instance() {
    return reinterpret_cast<const DefineGrammarResponse*>(
               &_DefineGrammarResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(DefineGrammarResponse* other);
  friend void swap(DefineGrammarResponse& a, DefineGrammarResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DefineGrammarResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DefineGrammarResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DefineGrammarResponse& from);
  void MergeFrom(const DefineGrammarResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DefineGrammarResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string error = 2;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  #if LANG_CXX11
  void set_error(::std::string&& value);
  #endif
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // .techmo.sarmata.ResponseStatus status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::techmo::sarmata::ResponseStatus status() const;
  void set_status(::techmo::sarmata::ResponseStatus value);

  // bool ok = 3;
  void clear_ok();
  static const int kOkFieldNumber = 3;
  bool ok() const;
  void set_ok(bool value);

  // @@protoc_insertion_point(class_scope:techmo.sarmata.DefineGrammarResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  int status_;
  bool ok_;
  mutable int _cached_size_;
  friend struct protobuf_sarmata_5fasr_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RecognizeRequest

// .techmo.sarmata.RecognitionConfig config = 1;
inline bool RecognizeRequest::has_config() const {
  return request_case() == kConfig;
}
inline void RecognizeRequest::set_has_config() {
  _oneof_case_[0] = kConfig;
}
inline void RecognizeRequest::clear_config() {
  if (has_config()) {
    delete request_.config_;
    clear_has_request();
  }
}
inline  const ::techmo::sarmata::RecognitionConfig& RecognizeRequest::config() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.RecognizeRequest.config)
  return has_config()
      ? *request_.config_
      : ::techmo::sarmata::RecognitionConfig::default_instance();
}
inline ::techmo::sarmata::RecognitionConfig* RecognizeRequest::mutable_config() {
  if (!has_config()) {
    clear_request();
    set_has_config();
    request_.config_ = new ::techmo::sarmata::RecognitionConfig;
  }
  // @@protoc_insertion_point(field_mutable:techmo.sarmata.RecognizeRequest.config)
  return request_.config_;
}
inline ::techmo::sarmata::RecognitionConfig* RecognizeRequest::release_config() {
  // @@protoc_insertion_point(field_release:techmo.sarmata.RecognizeRequest.config)
  if (has_config()) {
    clear_has_request();
    ::techmo::sarmata::RecognitionConfig* temp = request_.config_;
    request_.config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void RecognizeRequest::set_allocated_config(::techmo::sarmata::RecognitionConfig* config) {
  clear_request();
  if (config) {
    set_has_config();
    request_.config_ = config;
  }
  // @@protoc_insertion_point(field_set_allocated:techmo.sarmata.RecognizeRequest.config)
}

// bytes audio_content = 2;
inline bool RecognizeRequest::has_audio_content() const {
  return request_case() == kAudioContent;
}
inline void RecognizeRequest::set_has_audio_content() {
  _oneof_case_[0] = kAudioContent;
}
inline void RecognizeRequest::clear_audio_content() {
  if (has_audio_content()) {
    request_.audio_content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_request();
  }
}
inline const ::std::string& RecognizeRequest::audio_content() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.RecognizeRequest.audio_content)
  if (has_audio_content()) {
    return request_.audio_content_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void RecognizeRequest::set_audio_content(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognizeRequest.audio_content)
  if (!has_audio_content()) {
    clear_request();
    set_has_audio_content();
    request_.audio_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  request_.audio_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognizeRequest.audio_content)
}
#if LANG_CXX11
inline void RecognizeRequest::set_audio_content(::std::string&& value) {
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognizeRequest.audio_content)
  if (!has_audio_content()) {
    clear_request();
    set_has_audio_content();
    request_.audio_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  request_.audio_content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:techmo.sarmata.RecognizeRequest.audio_content)
}
#endif
inline void RecognizeRequest::set_audio_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_audio_content()) {
    clear_request();
    set_has_audio_content();
    request_.audio_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  request_.audio_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:techmo.sarmata.RecognizeRequest.audio_content)
}
inline void RecognizeRequest::set_audio_content(const void* value, size_t size) {
  if (!has_audio_content()) {
    clear_request();
    set_has_audio_content();
    request_.audio_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  request_.audio_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:techmo.sarmata.RecognizeRequest.audio_content)
}
inline ::std::string* RecognizeRequest::mutable_audio_content() {
  if (!has_audio_content()) {
    clear_request();
    set_has_audio_content();
    request_.audio_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:techmo.sarmata.RecognizeRequest.audio_content)
  return request_.audio_content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecognizeRequest::release_audio_content() {
  // @@protoc_insertion_point(field_release:techmo.sarmata.RecognizeRequest.audio_content)
  if (has_audio_content()) {
    clear_has_request();
    return request_.audio_content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void RecognizeRequest::set_allocated_audio_content(::std::string* audio_content) {
  if (!has_audio_content()) {
    request_.audio_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_request();
  if (audio_content != NULL) {
    set_has_audio_content();
    request_.audio_content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        audio_content);
  }
  // @@protoc_insertion_point(field_set_allocated:techmo.sarmata.RecognizeRequest.audio_content)
}

inline bool RecognizeRequest::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
inline void RecognizeRequest::clear_has_request() {
  _oneof_case_[0] = REQUEST_NOT_SET;
}
inline RecognizeRequest::RequestCase RecognizeRequest::request_case() const {
  return RecognizeRequest::RequestCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RecognitionConfig

// string grammar_name = 1;
inline bool RecognitionConfig::has_grammar_name() const {
  return grammar_case() == kGrammarName;
}
inline void RecognitionConfig::set_has_grammar_name() {
  _oneof_case_[0] = kGrammarName;
}
inline void RecognitionConfig::clear_grammar_name() {
  if (has_grammar_name()) {
    grammar_.grammar_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_grammar();
  }
}
inline const ::std::string& RecognitionConfig::grammar_name() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.RecognitionConfig.grammar_name)
  if (has_grammar_name()) {
    return grammar_.grammar_name_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void RecognitionConfig::set_grammar_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognitionConfig.grammar_name)
  if (!has_grammar_name()) {
    clear_grammar();
    set_has_grammar_name();
    grammar_.grammar_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  grammar_.grammar_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognitionConfig.grammar_name)
}
#if LANG_CXX11
inline void RecognitionConfig::set_grammar_name(::std::string&& value) {
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognitionConfig.grammar_name)
  if (!has_grammar_name()) {
    clear_grammar();
    set_has_grammar_name();
    grammar_.grammar_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  grammar_.grammar_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:techmo.sarmata.RecognitionConfig.grammar_name)
}
#endif
inline void RecognitionConfig::set_grammar_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_grammar_name()) {
    clear_grammar();
    set_has_grammar_name();
    grammar_.grammar_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  grammar_.grammar_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:techmo.sarmata.RecognitionConfig.grammar_name)
}
inline void RecognitionConfig::set_grammar_name(const char* value, size_t size) {
  if (!has_grammar_name()) {
    clear_grammar();
    set_has_grammar_name();
    grammar_.grammar_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  grammar_.grammar_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:techmo.sarmata.RecognitionConfig.grammar_name)
}
inline ::std::string* RecognitionConfig::mutable_grammar_name() {
  if (!has_grammar_name()) {
    clear_grammar();
    set_has_grammar_name();
    grammar_.grammar_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:techmo.sarmata.RecognitionConfig.grammar_name)
  return grammar_.grammar_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecognitionConfig::release_grammar_name() {
  // @@protoc_insertion_point(field_release:techmo.sarmata.RecognitionConfig.grammar_name)
  if (has_grammar_name()) {
    clear_has_grammar();
    return grammar_.grammar_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void RecognitionConfig::set_allocated_grammar_name(::std::string* grammar_name) {
  if (!has_grammar_name()) {
    grammar_.grammar_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_grammar();
  if (grammar_name != NULL) {
    set_has_grammar_name();
    grammar_.grammar_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        grammar_name);
  }
  // @@protoc_insertion_point(field_set_allocated:techmo.sarmata.RecognitionConfig.grammar_name)
}

// string grammar_data = 2;
inline bool RecognitionConfig::has_grammar_data() const {
  return grammar_case() == kGrammarData;
}
inline void RecognitionConfig::set_has_grammar_data() {
  _oneof_case_[0] = kGrammarData;
}
inline void RecognitionConfig::clear_grammar_data() {
  if (has_grammar_data()) {
    grammar_.grammar_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_grammar();
  }
}
inline const ::std::string& RecognitionConfig::grammar_data() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.RecognitionConfig.grammar_data)
  if (has_grammar_data()) {
    return grammar_.grammar_data_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void RecognitionConfig::set_grammar_data(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognitionConfig.grammar_data)
  if (!has_grammar_data()) {
    clear_grammar();
    set_has_grammar_data();
    grammar_.grammar_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  grammar_.grammar_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognitionConfig.grammar_data)
}
#if LANG_CXX11
inline void RecognitionConfig::set_grammar_data(::std::string&& value) {
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognitionConfig.grammar_data)
  if (!has_grammar_data()) {
    clear_grammar();
    set_has_grammar_data();
    grammar_.grammar_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  grammar_.grammar_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:techmo.sarmata.RecognitionConfig.grammar_data)
}
#endif
inline void RecognitionConfig::set_grammar_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_grammar_data()) {
    clear_grammar();
    set_has_grammar_data();
    grammar_.grammar_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  grammar_.grammar_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:techmo.sarmata.RecognitionConfig.grammar_data)
}
inline void RecognitionConfig::set_grammar_data(const char* value, size_t size) {
  if (!has_grammar_data()) {
    clear_grammar();
    set_has_grammar_data();
    grammar_.grammar_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  grammar_.grammar_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:techmo.sarmata.RecognitionConfig.grammar_data)
}
inline ::std::string* RecognitionConfig::mutable_grammar_data() {
  if (!has_grammar_data()) {
    clear_grammar();
    set_has_grammar_data();
    grammar_.grammar_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:techmo.sarmata.RecognitionConfig.grammar_data)
  return grammar_.grammar_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecognitionConfig::release_grammar_data() {
  // @@protoc_insertion_point(field_release:techmo.sarmata.RecognitionConfig.grammar_data)
  if (has_grammar_data()) {
    clear_has_grammar();
    return grammar_.grammar_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void RecognitionConfig::set_allocated_grammar_data(::std::string* grammar_data) {
  if (!has_grammar_data()) {
    grammar_.grammar_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_grammar();
  if (grammar_data != NULL) {
    set_has_grammar_data();
    grammar_.grammar_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        grammar_data);
  }
  // @@protoc_insertion_point(field_set_allocated:techmo.sarmata.RecognitionConfig.grammar_data)
}

// int32 sample_rate_hertz = 3;
inline void RecognitionConfig::clear_sample_rate_hertz() {
  sample_rate_hertz_ = 0;
}
inline ::google::protobuf::int32 RecognitionConfig::sample_rate_hertz() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.RecognitionConfig.sample_rate_hertz)
  return sample_rate_hertz_;
}
inline void RecognitionConfig::set_sample_rate_hertz(::google::protobuf::int32 value) {
  
  sample_rate_hertz_ = value;
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognitionConfig.sample_rate_hertz)
}

// int32 max_alternatives = 4;
inline void RecognitionConfig::clear_max_alternatives() {
  max_alternatives_ = 0;
}
inline ::google::protobuf::int32 RecognitionConfig::max_alternatives() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.RecognitionConfig.max_alternatives)
  return max_alternatives_;
}
inline void RecognitionConfig::set_max_alternatives(::google::protobuf::int32 value) {
  
  max_alternatives_ = value;
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognitionConfig.max_alternatives)
}

// double no_match_threshold = 5;
inline void RecognitionConfig::clear_no_match_threshold() {
  no_match_threshold_ = 0;
}
inline double RecognitionConfig::no_match_threshold() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.RecognitionConfig.no_match_threshold)
  return no_match_threshold_;
}
inline void RecognitionConfig::set_no_match_threshold(double value) {
  
  no_match_threshold_ = value;
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognitionConfig.no_match_threshold)
}

// .techmo.sarmata.TimeoutSettings timeout_settings = 6;
inline bool RecognitionConfig::has_timeout_settings() const {
  return this != internal_default_instance() && timeout_settings_ != NULL;
}
inline void RecognitionConfig::clear_timeout_settings() {
  if (GetArenaNoVirtual() == NULL && timeout_settings_ != NULL) delete timeout_settings_;
  timeout_settings_ = NULL;
}
inline const ::techmo::sarmata::TimeoutSettings& RecognitionConfig::timeout_settings() const {
  const ::techmo::sarmata::TimeoutSettings* p = timeout_settings_;
  // @@protoc_insertion_point(field_get:techmo.sarmata.RecognitionConfig.timeout_settings)
  return p != NULL ? *p : *reinterpret_cast<const ::techmo::sarmata::TimeoutSettings*>(
      &::techmo::sarmata::_TimeoutSettings_default_instance_);
}
inline ::techmo::sarmata::TimeoutSettings* RecognitionConfig::mutable_timeout_settings() {
  
  if (timeout_settings_ == NULL) {
    timeout_settings_ = new ::techmo::sarmata::TimeoutSettings;
  }
  // @@protoc_insertion_point(field_mutable:techmo.sarmata.RecognitionConfig.timeout_settings)
  return timeout_settings_;
}
inline ::techmo::sarmata::TimeoutSettings* RecognitionConfig::release_timeout_settings() {
  // @@protoc_insertion_point(field_release:techmo.sarmata.RecognitionConfig.timeout_settings)
  
  ::techmo::sarmata::TimeoutSettings* temp = timeout_settings_;
  timeout_settings_ = NULL;
  return temp;
}
inline void RecognitionConfig::set_allocated_timeout_settings(::techmo::sarmata::TimeoutSettings* timeout_settings) {
  delete timeout_settings_;
  timeout_settings_ = timeout_settings;
  if (timeout_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:techmo.sarmata.RecognitionConfig.timeout_settings)
}

// repeated .techmo.sarmata.ConfigField additional_settings = 7;
inline int RecognitionConfig::additional_settings_size() const {
  return additional_settings_.size();
}
inline void RecognitionConfig::clear_additional_settings() {
  additional_settings_.Clear();
}
inline const ::techmo::sarmata::ConfigField& RecognitionConfig::additional_settings(int index) const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.RecognitionConfig.additional_settings)
  return additional_settings_.Get(index);
}
inline ::techmo::sarmata::ConfigField* RecognitionConfig::mutable_additional_settings(int index) {
  // @@protoc_insertion_point(field_mutable:techmo.sarmata.RecognitionConfig.additional_settings)
  return additional_settings_.Mutable(index);
}
inline ::techmo::sarmata::ConfigField* RecognitionConfig::add_additional_settings() {
  // @@protoc_insertion_point(field_add:techmo.sarmata.RecognitionConfig.additional_settings)
  return additional_settings_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::techmo::sarmata::ConfigField >*
RecognitionConfig::mutable_additional_settings() {
  // @@protoc_insertion_point(field_mutable_list:techmo.sarmata.RecognitionConfig.additional_settings)
  return &additional_settings_;
}
inline const ::google::protobuf::RepeatedPtrField< ::techmo::sarmata::ConfigField >&
RecognitionConfig::additional_settings() const {
  // @@protoc_insertion_point(field_list:techmo.sarmata.RecognitionConfig.additional_settings)
  return additional_settings_;
}

inline bool RecognitionConfig::has_grammar() const {
  return grammar_case() != GRAMMAR_NOT_SET;
}
inline void RecognitionConfig::clear_has_grammar() {
  _oneof_case_[0] = GRAMMAR_NOT_SET;
}
inline RecognitionConfig::GrammarCase RecognitionConfig::grammar_case() const {
  return RecognitionConfig::GrammarCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TimeoutSettings

// int32 no_input_timeout = 1;
inline void TimeoutSettings::clear_no_input_timeout() {
  no_input_timeout_ = 0;
}
inline ::google::protobuf::int32 TimeoutSettings::no_input_timeout() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.TimeoutSettings.no_input_timeout)
  return no_input_timeout_;
}
inline void TimeoutSettings::set_no_input_timeout(::google::protobuf::int32 value) {
  
  no_input_timeout_ = value;
  // @@protoc_insertion_point(field_set:techmo.sarmata.TimeoutSettings.no_input_timeout)
}

// int32 recognition_timeout = 2;
inline void TimeoutSettings::clear_recognition_timeout() {
  recognition_timeout_ = 0;
}
inline ::google::protobuf::int32 TimeoutSettings::recognition_timeout() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.TimeoutSettings.recognition_timeout)
  return recognition_timeout_;
}
inline void TimeoutSettings::set_recognition_timeout(::google::protobuf::int32 value) {
  
  recognition_timeout_ = value;
  // @@protoc_insertion_point(field_set:techmo.sarmata.TimeoutSettings.recognition_timeout)
}

// int32 speech_complete_timeout = 3;
inline void TimeoutSettings::clear_speech_complete_timeout() {
  speech_complete_timeout_ = 0;
}
inline ::google::protobuf::int32 TimeoutSettings::speech_complete_timeout() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.TimeoutSettings.speech_complete_timeout)
  return speech_complete_timeout_;
}
inline void TimeoutSettings::set_speech_complete_timeout(::google::protobuf::int32 value) {
  
  speech_complete_timeout_ = value;
  // @@protoc_insertion_point(field_set:techmo.sarmata.TimeoutSettings.speech_complete_timeout)
}

// int32 speech_incomplete_timeout = 4;
inline void TimeoutSettings::clear_speech_incomplete_timeout() {
  speech_incomplete_timeout_ = 0;
}
inline ::google::protobuf::int32 TimeoutSettings::speech_incomplete_timeout() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.TimeoutSettings.speech_incomplete_timeout)
  return speech_incomplete_timeout_;
}
inline void TimeoutSettings::set_speech_incomplete_timeout(::google::protobuf::int32 value) {
  
  speech_incomplete_timeout_ = value;
  // @@protoc_insertion_point(field_set:techmo.sarmata.TimeoutSettings.speech_incomplete_timeout)
}

// -------------------------------------------------------------------

// ConfigField

// string key = 1;
inline void ConfigField::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfigField::key() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.ConfigField.key)
  return key_.GetNoArena();
}
inline void ConfigField::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:techmo.sarmata.ConfigField.key)
}
#if LANG_CXX11
inline void ConfigField::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:techmo.sarmata.ConfigField.key)
}
#endif
inline void ConfigField::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:techmo.sarmata.ConfigField.key)
}
inline void ConfigField::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:techmo.sarmata.ConfigField.key)
}
inline ::std::string* ConfigField::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:techmo.sarmata.ConfigField.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigField::release_key() {
  // @@protoc_insertion_point(field_release:techmo.sarmata.ConfigField.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigField::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:techmo.sarmata.ConfigField.key)
}

// string value = 2;
inline void ConfigField::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfigField::value() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.ConfigField.value)
  return value_.GetNoArena();
}
inline void ConfigField::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:techmo.sarmata.ConfigField.value)
}
#if LANG_CXX11
inline void ConfigField::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:techmo.sarmata.ConfigField.value)
}
#endif
inline void ConfigField::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:techmo.sarmata.ConfigField.value)
}
inline void ConfigField::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:techmo.sarmata.ConfigField.value)
}
inline ::std::string* ConfigField::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:techmo.sarmata.ConfigField.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigField::release_value() {
  // @@protoc_insertion_point(field_release:techmo.sarmata.ConfigField.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigField::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:techmo.sarmata.ConfigField.value)
}

// -------------------------------------------------------------------

// RecognizeResponse

// .techmo.sarmata.ResponseStatus status = 1;
inline void RecognizeResponse::clear_status() {
  status_ = 0;
}
inline ::techmo::sarmata::ResponseStatus RecognizeResponse::status() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.RecognizeResponse.status)
  return static_cast< ::techmo::sarmata::ResponseStatus >(status_);
}
inline void RecognizeResponse::set_status(::techmo::sarmata::ResponseStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognizeResponse.status)
}

// string error = 2;
inline void RecognizeResponse::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RecognizeResponse::error() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.RecognizeResponse.error)
  return error_.GetNoArena();
}
inline void RecognizeResponse::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognizeResponse.error)
}
#if LANG_CXX11
inline void RecognizeResponse::set_error(::std::string&& value) {
  
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:techmo.sarmata.RecognizeResponse.error)
}
#endif
inline void RecognizeResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:techmo.sarmata.RecognizeResponse.error)
}
inline void RecognizeResponse::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:techmo.sarmata.RecognizeResponse.error)
}
inline ::std::string* RecognizeResponse::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:techmo.sarmata.RecognizeResponse.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecognizeResponse::release_error() {
  // @@protoc_insertion_point(field_release:techmo.sarmata.RecognizeResponse.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecognizeResponse::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:techmo.sarmata.RecognizeResponse.error)
}

// int32 event_time = 3;
inline void RecognizeResponse::clear_event_time() {
  event_time_ = 0;
}
inline ::google::protobuf::int32 RecognizeResponse::event_time() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.RecognizeResponse.event_time)
  return event_time_;
}
inline void RecognizeResponse::set_event_time(::google::protobuf::int32 value) {
  
  event_time_ = value;
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognizeResponse.event_time)
}

// repeated .techmo.sarmata.RecognizedPhrase results = 4;
inline int RecognizeResponse::results_size() const {
  return results_.size();
}
inline void RecognizeResponse::clear_results() {
  results_.Clear();
}
inline const ::techmo::sarmata::RecognizedPhrase& RecognizeResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.RecognizeResponse.results)
  return results_.Get(index);
}
inline ::techmo::sarmata::RecognizedPhrase* RecognizeResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:techmo.sarmata.RecognizeResponse.results)
  return results_.Mutable(index);
}
inline ::techmo::sarmata::RecognizedPhrase* RecognizeResponse::add_results() {
  // @@protoc_insertion_point(field_add:techmo.sarmata.RecognizeResponse.results)
  return results_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::techmo::sarmata::RecognizedPhrase >*
RecognizeResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:techmo.sarmata.RecognizeResponse.results)
  return &results_;
}
inline const ::google::protobuf::RepeatedPtrField< ::techmo::sarmata::RecognizedPhrase >&
RecognizeResponse::results() const {
  // @@protoc_insertion_point(field_list:techmo.sarmata.RecognizeResponse.results)
  return results_;
}

// -------------------------------------------------------------------

// RecognizedPhrase_RecognizedWord

// string transcript = 1;
inline void RecognizedPhrase_RecognizedWord::clear_transcript() {
  transcript_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RecognizedPhrase_RecognizedWord::transcript() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.RecognizedPhrase.RecognizedWord.transcript)
  return transcript_.GetNoArena();
}
inline void RecognizedPhrase_RecognizedWord::set_transcript(const ::std::string& value) {
  
  transcript_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognizedPhrase.RecognizedWord.transcript)
}
#if LANG_CXX11
inline void RecognizedPhrase_RecognizedWord::set_transcript(::std::string&& value) {
  
  transcript_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:techmo.sarmata.RecognizedPhrase.RecognizedWord.transcript)
}
#endif
inline void RecognizedPhrase_RecognizedWord::set_transcript(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  transcript_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:techmo.sarmata.RecognizedPhrase.RecognizedWord.transcript)
}
inline void RecognizedPhrase_RecognizedWord::set_transcript(const char* value, size_t size) {
  
  transcript_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:techmo.sarmata.RecognizedPhrase.RecognizedWord.transcript)
}
inline ::std::string* RecognizedPhrase_RecognizedWord::mutable_transcript() {
  
  // @@protoc_insertion_point(field_mutable:techmo.sarmata.RecognizedPhrase.RecognizedWord.transcript)
  return transcript_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecognizedPhrase_RecognizedWord::release_transcript() {
  // @@protoc_insertion_point(field_release:techmo.sarmata.RecognizedPhrase.RecognizedWord.transcript)
  
  return transcript_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecognizedPhrase_RecognizedWord::set_allocated_transcript(::std::string* transcript) {
  if (transcript != NULL) {
    
  } else {
    
  }
  transcript_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transcript);
  // @@protoc_insertion_point(field_set_allocated:techmo.sarmata.RecognizedPhrase.RecognizedWord.transcript)
}

// double confidence = 2;
inline void RecognizedPhrase_RecognizedWord::clear_confidence() {
  confidence_ = 0;
}
inline double RecognizedPhrase_RecognizedWord::confidence() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.RecognizedPhrase.RecognizedWord.confidence)
  return confidence_;
}
inline void RecognizedPhrase_RecognizedWord::set_confidence(double value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognizedPhrase.RecognizedWord.confidence)
}

// int32 start = 3;
inline void RecognizedPhrase_RecognizedWord::clear_start() {
  start_ = 0;
}
inline ::google::protobuf::int32 RecognizedPhrase_RecognizedWord::start() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.RecognizedPhrase.RecognizedWord.start)
  return start_;
}
inline void RecognizedPhrase_RecognizedWord::set_start(::google::protobuf::int32 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognizedPhrase.RecognizedWord.start)
}

// int32 end = 4;
inline void RecognizedPhrase_RecognizedWord::clear_end() {
  end_ = 0;
}
inline ::google::protobuf::int32 RecognizedPhrase_RecognizedWord::end() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.RecognizedPhrase.RecognizedWord.end)
  return end_;
}
inline void RecognizedPhrase_RecognizedWord::set_end(::google::protobuf::int32 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognizedPhrase.RecognizedWord.end)
}

// double logprob = 5;
inline void RecognizedPhrase_RecognizedWord::clear_logprob() {
  logprob_ = 0;
}
inline double RecognizedPhrase_RecognizedWord::logprob() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.RecognizedPhrase.RecognizedWord.logprob)
  return logprob_;
}
inline void RecognizedPhrase_RecognizedWord::set_logprob(double value) {
  
  logprob_ = value;
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognizedPhrase.RecognizedWord.logprob)
}

// -------------------------------------------------------------------

// RecognizedPhrase

// repeated .techmo.sarmata.RecognizedPhrase.RecognizedWord words = 1;
inline int RecognizedPhrase::words_size() const {
  return words_.size();
}
inline void RecognizedPhrase::clear_words() {
  words_.Clear();
}
inline const ::techmo::sarmata::RecognizedPhrase_RecognizedWord& RecognizedPhrase::words(int index) const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.RecognizedPhrase.words)
  return words_.Get(index);
}
inline ::techmo::sarmata::RecognizedPhrase_RecognizedWord* RecognizedPhrase::mutable_words(int index) {
  // @@protoc_insertion_point(field_mutable:techmo.sarmata.RecognizedPhrase.words)
  return words_.Mutable(index);
}
inline ::techmo::sarmata::RecognizedPhrase_RecognizedWord* RecognizedPhrase::add_words() {
  // @@protoc_insertion_point(field_add:techmo.sarmata.RecognizedPhrase.words)
  return words_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::techmo::sarmata::RecognizedPhrase_RecognizedWord >*
RecognizedPhrase::mutable_words() {
  // @@protoc_insertion_point(field_mutable_list:techmo.sarmata.RecognizedPhrase.words)
  return &words_;
}
inline const ::google::protobuf::RepeatedPtrField< ::techmo::sarmata::RecognizedPhrase_RecognizedWord >&
RecognizedPhrase::words() const {
  // @@protoc_insertion_point(field_list:techmo.sarmata.RecognizedPhrase.words)
  return words_;
}

// double confidence = 2;
inline void RecognizedPhrase::clear_confidence() {
  confidence_ = 0;
}
inline double RecognizedPhrase::confidence() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.RecognizedPhrase.confidence)
  return confidence_;
}
inline void RecognizedPhrase::set_confidence(double value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognizedPhrase.confidence)
}

// bool correct = 3;
inline void RecognizedPhrase::clear_correct() {
  correct_ = false;
}
inline bool RecognizedPhrase::correct() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.RecognizedPhrase.correct)
  return correct_;
}
inline void RecognizedPhrase::set_correct(bool value) {
  
  correct_ = value;
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognizedPhrase.correct)
}

// string semantic_interpretation = 4;
inline void RecognizedPhrase::clear_semantic_interpretation() {
  semantic_interpretation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RecognizedPhrase::semantic_interpretation() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.RecognizedPhrase.semantic_interpretation)
  return semantic_interpretation_.GetNoArena();
}
inline void RecognizedPhrase::set_semantic_interpretation(const ::std::string& value) {
  
  semantic_interpretation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognizedPhrase.semantic_interpretation)
}
#if LANG_CXX11
inline void RecognizedPhrase::set_semantic_interpretation(::std::string&& value) {
  
  semantic_interpretation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:techmo.sarmata.RecognizedPhrase.semantic_interpretation)
}
#endif
inline void RecognizedPhrase::set_semantic_interpretation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  semantic_interpretation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:techmo.sarmata.RecognizedPhrase.semantic_interpretation)
}
inline void RecognizedPhrase::set_semantic_interpretation(const char* value, size_t size) {
  
  semantic_interpretation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:techmo.sarmata.RecognizedPhrase.semantic_interpretation)
}
inline ::std::string* RecognizedPhrase::mutable_semantic_interpretation() {
  
  // @@protoc_insertion_point(field_mutable:techmo.sarmata.RecognizedPhrase.semantic_interpretation)
  return semantic_interpretation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecognizedPhrase::release_semantic_interpretation() {
  // @@protoc_insertion_point(field_release:techmo.sarmata.RecognizedPhrase.semantic_interpretation)
  
  return semantic_interpretation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecognizedPhrase::set_allocated_semantic_interpretation(::std::string* semantic_interpretation) {
  if (semantic_interpretation != NULL) {
    
  } else {
    
  }
  semantic_interpretation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), semantic_interpretation);
  // @@protoc_insertion_point(field_set_allocated:techmo.sarmata.RecognizedPhrase.semantic_interpretation)
}

// -------------------------------------------------------------------

// DefineGrammarRequest

// string grammar_name = 1;
inline void DefineGrammarRequest::clear_grammar_name() {
  grammar_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DefineGrammarRequest::grammar_name() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.DefineGrammarRequest.grammar_name)
  return grammar_name_.GetNoArena();
}
inline void DefineGrammarRequest::set_grammar_name(const ::std::string& value) {
  
  grammar_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:techmo.sarmata.DefineGrammarRequest.grammar_name)
}
#if LANG_CXX11
inline void DefineGrammarRequest::set_grammar_name(::std::string&& value) {
  
  grammar_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:techmo.sarmata.DefineGrammarRequest.grammar_name)
}
#endif
inline void DefineGrammarRequest::set_grammar_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  grammar_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:techmo.sarmata.DefineGrammarRequest.grammar_name)
}
inline void DefineGrammarRequest::set_grammar_name(const char* value, size_t size) {
  
  grammar_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:techmo.sarmata.DefineGrammarRequest.grammar_name)
}
inline ::std::string* DefineGrammarRequest::mutable_grammar_name() {
  
  // @@protoc_insertion_point(field_mutable:techmo.sarmata.DefineGrammarRequest.grammar_name)
  return grammar_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DefineGrammarRequest::release_grammar_name() {
  // @@protoc_insertion_point(field_release:techmo.sarmata.DefineGrammarRequest.grammar_name)
  
  return grammar_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DefineGrammarRequest::set_allocated_grammar_name(::std::string* grammar_name) {
  if (grammar_name != NULL) {
    
  } else {
    
  }
  grammar_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), grammar_name);
  // @@protoc_insertion_point(field_set_allocated:techmo.sarmata.DefineGrammarRequest.grammar_name)
}

// string grammar_data = 2;
inline void DefineGrammarRequest::clear_grammar_data() {
  grammar_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DefineGrammarRequest::grammar_data() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.DefineGrammarRequest.grammar_data)
  return grammar_data_.GetNoArena();
}
inline void DefineGrammarRequest::set_grammar_data(const ::std::string& value) {
  
  grammar_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:techmo.sarmata.DefineGrammarRequest.grammar_data)
}
#if LANG_CXX11
inline void DefineGrammarRequest::set_grammar_data(::std::string&& value) {
  
  grammar_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:techmo.sarmata.DefineGrammarRequest.grammar_data)
}
#endif
inline void DefineGrammarRequest::set_grammar_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  grammar_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:techmo.sarmata.DefineGrammarRequest.grammar_data)
}
inline void DefineGrammarRequest::set_grammar_data(const char* value, size_t size) {
  
  grammar_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:techmo.sarmata.DefineGrammarRequest.grammar_data)
}
inline ::std::string* DefineGrammarRequest::mutable_grammar_data() {
  
  // @@protoc_insertion_point(field_mutable:techmo.sarmata.DefineGrammarRequest.grammar_data)
  return grammar_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DefineGrammarRequest::release_grammar_data() {
  // @@protoc_insertion_point(field_release:techmo.sarmata.DefineGrammarRequest.grammar_data)
  
  return grammar_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DefineGrammarRequest::set_allocated_grammar_data(::std::string* grammar_data) {
  if (grammar_data != NULL) {
    
  } else {
    
  }
  grammar_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), grammar_data);
  // @@protoc_insertion_point(field_set_allocated:techmo.sarmata.DefineGrammarRequest.grammar_data)
}

// -------------------------------------------------------------------

// DefineGrammarResponse

// .techmo.sarmata.ResponseStatus status = 1;
inline void DefineGrammarResponse::clear_status() {
  status_ = 0;
}
inline ::techmo::sarmata::ResponseStatus DefineGrammarResponse::status() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.DefineGrammarResponse.status)
  return static_cast< ::techmo::sarmata::ResponseStatus >(status_);
}
inline void DefineGrammarResponse::set_status(::techmo::sarmata::ResponseStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:techmo.sarmata.DefineGrammarResponse.status)
}

// string error = 2;
inline void DefineGrammarResponse::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DefineGrammarResponse::error() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.DefineGrammarResponse.error)
  return error_.GetNoArena();
}
inline void DefineGrammarResponse::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:techmo.sarmata.DefineGrammarResponse.error)
}
#if LANG_CXX11
inline void DefineGrammarResponse::set_error(::std::string&& value) {
  
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:techmo.sarmata.DefineGrammarResponse.error)
}
#endif
inline void DefineGrammarResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:techmo.sarmata.DefineGrammarResponse.error)
}
inline void DefineGrammarResponse::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:techmo.sarmata.DefineGrammarResponse.error)
}
inline ::std::string* DefineGrammarResponse::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:techmo.sarmata.DefineGrammarResponse.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DefineGrammarResponse::release_error() {
  // @@protoc_insertion_point(field_release:techmo.sarmata.DefineGrammarResponse.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DefineGrammarResponse::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:techmo.sarmata.DefineGrammarResponse.error)
}

// bool ok = 3;
inline void DefineGrammarResponse::clear_ok() {
  ok_ = false;
}
inline bool DefineGrammarResponse::ok() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.DefineGrammarResponse.ok)
  return ok_;
}
inline void DefineGrammarResponse::set_ok(bool value) {
  
  ok_ = value;
  // @@protoc_insertion_point(field_set:techmo.sarmata.DefineGrammarResponse.ok)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace sarmata
}  // namespace techmo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::techmo::sarmata::ResponseStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::techmo::sarmata::ResponseStatus>() {
  return ::techmo::sarmata::ResponseStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sarmata_5fasr_2eproto__INCLUDED
