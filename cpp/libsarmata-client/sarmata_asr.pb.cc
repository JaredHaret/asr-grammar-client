// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sarmata_asr.proto

#include "sarmata_asr.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_sarmata_5fasr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConfigField_sarmata_5fasr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sarmata_5fasr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RecognitionConfig_sarmata_5fasr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sarmata_5fasr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RecognizedPhrase_sarmata_5fasr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sarmata_5fasr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecognizedPhrase_RecognizedWord_sarmata_5fasr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sarmata_5fasr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeoutSettings_sarmata_5fasr_2eproto;
namespace techmo {
namespace sarmata {
class RecognizeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecognizeRequest> _instance;
  const ::techmo::sarmata::RecognitionConfig* config_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_content_;
} _RecognizeRequest_default_instance_;
class RecognitionConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecognitionConfig> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr grammar_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr grammar_data_;
} _RecognitionConfig_default_instance_;
class TimeoutSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimeoutSettings> _instance;
} _TimeoutSettings_default_instance_;
class ConfigFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigField> _instance;
} _ConfigField_default_instance_;
class RecognizeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecognizeResponse> _instance;
} _RecognizeResponse_default_instance_;
class RecognizedPhrase_RecognizedWordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecognizedPhrase_RecognizedWord> _instance;
} _RecognizedPhrase_RecognizedWord_default_instance_;
class RecognizedPhraseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecognizedPhrase> _instance;
} _RecognizedPhrase_default_instance_;
class DefineGrammarRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DefineGrammarRequest> _instance;
} _DefineGrammarRequest_default_instance_;
class DefineGrammarResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DefineGrammarResponse> _instance;
} _DefineGrammarResponse_default_instance_;
}  // namespace sarmata
}  // namespace techmo
static void InitDefaultsscc_info_ConfigField_sarmata_5fasr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::techmo::sarmata::_ConfigField_default_instance_;
    new (ptr) ::techmo::sarmata::ConfigField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::techmo::sarmata::ConfigField::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConfigField_sarmata_5fasr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConfigField_sarmata_5fasr_2eproto}, {}};

static void InitDefaultsscc_info_DefineGrammarRequest_sarmata_5fasr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::techmo::sarmata::_DefineGrammarRequest_default_instance_;
    new (ptr) ::techmo::sarmata::DefineGrammarRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::techmo::sarmata::DefineGrammarRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DefineGrammarRequest_sarmata_5fasr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DefineGrammarRequest_sarmata_5fasr_2eproto}, {}};

static void InitDefaultsscc_info_DefineGrammarResponse_sarmata_5fasr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::techmo::sarmata::_DefineGrammarResponse_default_instance_;
    new (ptr) ::techmo::sarmata::DefineGrammarResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::techmo::sarmata::DefineGrammarResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DefineGrammarResponse_sarmata_5fasr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DefineGrammarResponse_sarmata_5fasr_2eproto}, {}};

static void InitDefaultsscc_info_RecognitionConfig_sarmata_5fasr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::techmo::sarmata::_RecognitionConfig_default_instance_;
    new (ptr) ::techmo::sarmata::RecognitionConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::techmo::sarmata::RecognitionConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RecognitionConfig_sarmata_5fasr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_RecognitionConfig_sarmata_5fasr_2eproto}, {
      &scc_info_TimeoutSettings_sarmata_5fasr_2eproto.base,
      &scc_info_ConfigField_sarmata_5fasr_2eproto.base,}};

static void InitDefaultsscc_info_RecognizeRequest_sarmata_5fasr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::techmo::sarmata::_RecognizeRequest_default_instance_;
    new (ptr) ::techmo::sarmata::RecognizeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::techmo::sarmata::RecognizeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RecognizeRequest_sarmata_5fasr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RecognizeRequest_sarmata_5fasr_2eproto}, {
      &scc_info_RecognitionConfig_sarmata_5fasr_2eproto.base,}};

static void InitDefaultsscc_info_RecognizeResponse_sarmata_5fasr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::techmo::sarmata::_RecognizeResponse_default_instance_;
    new (ptr) ::techmo::sarmata::RecognizeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::techmo::sarmata::RecognizeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RecognizeResponse_sarmata_5fasr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RecognizeResponse_sarmata_5fasr_2eproto}, {
      &scc_info_RecognizedPhrase_sarmata_5fasr_2eproto.base,}};

static void InitDefaultsscc_info_RecognizedPhrase_sarmata_5fasr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::techmo::sarmata::_RecognizedPhrase_default_instance_;
    new (ptr) ::techmo::sarmata::RecognizedPhrase();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::techmo::sarmata::RecognizedPhrase::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RecognizedPhrase_sarmata_5fasr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RecognizedPhrase_sarmata_5fasr_2eproto}, {
      &scc_info_RecognizedPhrase_RecognizedWord_sarmata_5fasr_2eproto.base,}};

static void InitDefaultsscc_info_RecognizedPhrase_RecognizedWord_sarmata_5fasr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::techmo::sarmata::_RecognizedPhrase_RecognizedWord_default_instance_;
    new (ptr) ::techmo::sarmata::RecognizedPhrase_RecognizedWord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::techmo::sarmata::RecognizedPhrase_RecognizedWord::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecognizedPhrase_RecognizedWord_sarmata_5fasr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RecognizedPhrase_RecognizedWord_sarmata_5fasr_2eproto}, {}};

static void InitDefaultsscc_info_TimeoutSettings_sarmata_5fasr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::techmo::sarmata::_TimeoutSettings_default_instance_;
    new (ptr) ::techmo::sarmata::TimeoutSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::techmo::sarmata::TimeoutSettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeoutSettings_sarmata_5fasr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TimeoutSettings_sarmata_5fasr_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sarmata_5fasr_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_sarmata_5fasr_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sarmata_5fasr_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sarmata_5fasr_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::techmo::sarmata::RecognizeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::techmo::sarmata::RecognizeRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::techmo::sarmata::RecognizeRequestDefaultTypeInternal, config_),
  offsetof(::techmo::sarmata::RecognizeRequestDefaultTypeInternal, audio_content_),
  PROTOBUF_FIELD_OFFSET(::techmo::sarmata::RecognizeRequest, request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::techmo::sarmata::RecognitionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::techmo::sarmata::RecognitionConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::techmo::sarmata::RecognitionConfigDefaultTypeInternal, grammar_name_),
  offsetof(::techmo::sarmata::RecognitionConfigDefaultTypeInternal, grammar_data_),
  PROTOBUF_FIELD_OFFSET(::techmo::sarmata::RecognitionConfig, sample_rate_hertz_),
  PROTOBUF_FIELD_OFFSET(::techmo::sarmata::RecognitionConfig, max_alternatives_),
  PROTOBUF_FIELD_OFFSET(::techmo::sarmata::RecognitionConfig, no_match_threshold_),
  PROTOBUF_FIELD_OFFSET(::techmo::sarmata::RecognitionConfig, timeout_settings_),
  PROTOBUF_FIELD_OFFSET(::techmo::sarmata::RecognitionConfig, additional_settings_),
  PROTOBUF_FIELD_OFFSET(::techmo::sarmata::RecognitionConfig, grammar_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::techmo::sarmata::TimeoutSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::techmo::sarmata::TimeoutSettings, no_input_timeout_),
  PROTOBUF_FIELD_OFFSET(::techmo::sarmata::TimeoutSettings, recognition_timeout_),
  PROTOBUF_FIELD_OFFSET(::techmo::sarmata::TimeoutSettings, speech_complete_timeout_),
  PROTOBUF_FIELD_OFFSET(::techmo::sarmata::TimeoutSettings, speech_incomplete_timeout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::techmo::sarmata::ConfigField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::techmo::sarmata::ConfigField, key_),
  PROTOBUF_FIELD_OFFSET(::techmo::sarmata::ConfigField, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::techmo::sarmata::RecognizeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::techmo::sarmata::RecognizeResponse, status_),
  PROTOBUF_FIELD_OFFSET(::techmo::sarmata::RecognizeResponse, error_),
  PROTOBUF_FIELD_OFFSET(::techmo::sarmata::RecognizeResponse, event_time_),
  PROTOBUF_FIELD_OFFSET(::techmo::sarmata::RecognizeResponse, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::techmo::sarmata::RecognizedPhrase_RecognizedWord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::techmo::sarmata::RecognizedPhrase_RecognizedWord, transcript_),
  PROTOBUF_FIELD_OFFSET(::techmo::sarmata::RecognizedPhrase_RecognizedWord, confidence_),
  PROTOBUF_FIELD_OFFSET(::techmo::sarmata::RecognizedPhrase_RecognizedWord, start_),
  PROTOBUF_FIELD_OFFSET(::techmo::sarmata::RecognizedPhrase_RecognizedWord, end_),
  PROTOBUF_FIELD_OFFSET(::techmo::sarmata::RecognizedPhrase_RecognizedWord, logprob_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::techmo::sarmata::RecognizedPhrase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::techmo::sarmata::RecognizedPhrase, words_),
  PROTOBUF_FIELD_OFFSET(::techmo::sarmata::RecognizedPhrase, confidence_),
  PROTOBUF_FIELD_OFFSET(::techmo::sarmata::RecognizedPhrase, correct_),
  PROTOBUF_FIELD_OFFSET(::techmo::sarmata::RecognizedPhrase, semantic_interpretation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::techmo::sarmata::DefineGrammarRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::techmo::sarmata::DefineGrammarRequest, grammar_name_),
  PROTOBUF_FIELD_OFFSET(::techmo::sarmata::DefineGrammarRequest, grammar_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::techmo::sarmata::DefineGrammarResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::techmo::sarmata::DefineGrammarResponse, status_),
  PROTOBUF_FIELD_OFFSET(::techmo::sarmata::DefineGrammarResponse, error_),
  PROTOBUF_FIELD_OFFSET(::techmo::sarmata::DefineGrammarResponse, ok_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::techmo::sarmata::RecognizeRequest)},
  { 8, -1, sizeof(::techmo::sarmata::RecognitionConfig)},
  { 21, -1, sizeof(::techmo::sarmata::TimeoutSettings)},
  { 30, -1, sizeof(::techmo::sarmata::ConfigField)},
  { 37, -1, sizeof(::techmo::sarmata::RecognizeResponse)},
  { 46, -1, sizeof(::techmo::sarmata::RecognizedPhrase_RecognizedWord)},
  { 56, -1, sizeof(::techmo::sarmata::RecognizedPhrase)},
  { 65, -1, sizeof(::techmo::sarmata::DefineGrammarRequest)},
  { 72, -1, sizeof(::techmo::sarmata::DefineGrammarResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::techmo::sarmata::_RecognizeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::techmo::sarmata::_RecognitionConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::techmo::sarmata::_TimeoutSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::techmo::sarmata::_ConfigField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::techmo::sarmata::_RecognizeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::techmo::sarmata::_RecognizedPhrase_RecognizedWord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::techmo::sarmata::_RecognizedPhrase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::techmo::sarmata::_DefineGrammarRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::techmo::sarmata::_DefineGrammarResponse_default_instance_),
};

const char descriptor_table_protodef_sarmata_5fasr_2eproto[] =
  "\n\021sarmata_asr.proto\022\016techmo.sarmata\"k\n\020R"
  "ecognizeRequest\0223\n\006config\030\001 \001(\0132!.techmo"
  ".sarmata.RecognitionConfigH\000\022\027\n\raudio_co"
  "ntent\030\002 \001(\014H\000B\t\n\007request\"\224\002\n\021Recognition"
  "Config\022\026\n\014grammar_name\030\001 \001(\tH\000\022\026\n\014gramma"
  "r_data\030\002 \001(\tH\000\022\031\n\021sample_rate_hertz\030\003 \001("
  "\005\022\030\n\020max_alternatives\030\004 \001(\005\022\032\n\022no_match_"
  "threshold\030\005 \001(\001\0229\n\020timeout_settings\030\006 \001("
  "\0132\037.techmo.sarmata.TimeoutSettings\0228\n\023ad"
  "ditional_settings\030\007 \003(\0132\033.techmo.sarmata"
  ".ConfigFieldB\t\n\007grammar\"\214\001\n\017TimeoutSetti"
  "ngs\022\030\n\020no_input_timeout\030\001 \001(\005\022\033\n\023recogni"
  "tion_timeout\030\002 \001(\005\022\037\n\027speech_complete_ti"
  "meout\030\003 \001(\005\022!\n\031speech_incomplete_timeout"
  "\030\004 \001(\005\")\n\013ConfigField\022\013\n\003key\030\001 \001(\t\022\r\n\005va"
  "lue\030\002 \001(\t\"\231\001\n\021RecognizeResponse\022.\n\006statu"
  "s\030\001 \001(\0162\036.techmo.sarmata.ResponseStatus\022"
  "\r\n\005error\030\002 \001(\t\022\022\n\nevent_time\030\003 \001(\005\0221\n\007re"
  "sults\030\004 \003(\0132 .techmo.sarmata.RecognizedP"
  "hrase\"\377\001\n\020RecognizedPhrase\022>\n\005words\030\001 \003("
  "\0132/.techmo.sarmata.RecognizedPhrase.Reco"
  "gnizedWord\022\022\n\nconfidence\030\002 \001(\001\022\017\n\007correc"
  "t\030\003 \001(\010\022\037\n\027semantic_interpretation\030\004 \001(\t"
  "\032e\n\016RecognizedWord\022\022\n\ntranscript\030\001 \001(\t\022\022"
  "\n\nconfidence\030\002 \001(\001\022\r\n\005start\030\003 \001(\005\022\013\n\003end"
  "\030\004 \001(\005\022\017\n\007logprob\030\005 \001(\001\"B\n\024DefineGrammar"
  "Request\022\024\n\014grammar_name\030\001 \001(\t\022\024\n\014grammar"
  "_data\030\002 \001(\t\"b\n\025DefineGrammarResponse\022.\n\006"
  "status\030\001 \001(\0162\036.techmo.sarmata.ResponseSt"
  "atus\022\r\n\005error\030\002 \001(\t\022\n\n\002ok\030\003 \001(\010*\231\002\n\016Resp"
  "onseStatus\022\t\n\005EMPTY\020\000\022\013\n\007SUCCESS\020\001\022\021\n\rPA"
  "RTIAL_MATCH\020\002\022\014\n\010NO_MATCH\020\003\022\024\n\020NO_INPUT_"
  "TIMEOUT\020\004\022\030\n\024GRAMMAR_LOAD_FAILURE\020\005\022\037\n\033G"
  "RAMMAR_COMPILATION_FAILURE\020\006\022\024\n\020RECOGNIZ"
  "ER_ERROR\020\007\022\033\n\027TOO_MUCH_SPEECH_TIMEOUT\020\010\022"
  "\r\n\tCANCELLED\020\t\022\022\n\016START_OF_INPUT\020\n\022\020\n\014EN"
  "D_OF_AUDIO\020\013\022\025\n\021SEMANTICS_FAILURE\020\0142\271\001\n\003"
  "ASR\022T\n\tRecognize\022 .techmo.sarmata.Recogn"
  "izeRequest\032!.techmo.sarmata.RecognizeRes"
  "ponse(\0010\001\022\\\n\rDefineGrammar\022$.techmo.sarm"
  "ata.DefineGrammarRequest\032%.techmo.sarmat"
  "a.DefineGrammarResponseb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sarmata_5fasr_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_sarmata_5fasr_2eproto_sccs[9] = {
  &scc_info_ConfigField_sarmata_5fasr_2eproto.base,
  &scc_info_DefineGrammarRequest_sarmata_5fasr_2eproto.base,
  &scc_info_DefineGrammarResponse_sarmata_5fasr_2eproto.base,
  &scc_info_RecognitionConfig_sarmata_5fasr_2eproto.base,
  &scc_info_RecognizeRequest_sarmata_5fasr_2eproto.base,
  &scc_info_RecognizeResponse_sarmata_5fasr_2eproto.base,
  &scc_info_RecognizedPhrase_sarmata_5fasr_2eproto.base,
  &scc_info_RecognizedPhrase_RecognizedWord_sarmata_5fasr_2eproto.base,
  &scc_info_TimeoutSettings_sarmata_5fasr_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sarmata_5fasr_2eproto_once;
static bool descriptor_table_sarmata_5fasr_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sarmata_5fasr_2eproto = {
  &descriptor_table_sarmata_5fasr_2eproto_initialized, descriptor_table_protodef_sarmata_5fasr_2eproto, "sarmata_asr.proto", 1671,
  &descriptor_table_sarmata_5fasr_2eproto_once, descriptor_table_sarmata_5fasr_2eproto_sccs, descriptor_table_sarmata_5fasr_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_sarmata_5fasr_2eproto::offsets,
  file_level_metadata_sarmata_5fasr_2eproto, 9, file_level_enum_descriptors_sarmata_5fasr_2eproto, file_level_service_descriptors_sarmata_5fasr_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_sarmata_5fasr_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_sarmata_5fasr_2eproto), true);
namespace techmo {
namespace sarmata {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResponseStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sarmata_5fasr_2eproto);
  return file_level_enum_descriptors_sarmata_5fasr_2eproto[0];
}
bool ResponseStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void RecognizeRequest::InitAsDefaultInstance() {
  ::techmo::sarmata::_RecognizeRequest_default_instance_.config_ = const_cast< ::techmo::sarmata::RecognitionConfig*>(
      ::techmo::sarmata::RecognitionConfig::internal_default_instance());
  ::techmo::sarmata::_RecognizeRequest_default_instance_.audio_content_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class RecognizeRequest::HasBitSetters {
 public:
  static const ::techmo::sarmata::RecognitionConfig& config(const RecognizeRequest* msg);
};

const ::techmo::sarmata::RecognitionConfig&
RecognizeRequest::HasBitSetters::config(const RecognizeRequest* msg) {
  return *msg->request_.config_;
}
void RecognizeRequest::set_allocated_config(::techmo::sarmata::RecognitionConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    set_has_config();
    request_.config_ = config;
  }
  // @@protoc_insertion_point(field_set_allocated:techmo.sarmata.RecognizeRequest.config)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecognizeRequest::kConfigFieldNumber;
const int RecognizeRequest::kAudioContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecognizeRequest::RecognizeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.sarmata.RecognizeRequest)
}
RecognizeRequest::RecognizeRequest(const RecognizeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_request();
  switch (from.request_case()) {
    case kConfig: {
      mutable_config()->::techmo::sarmata::RecognitionConfig::MergeFrom(from.config());
      break;
    }
    case kAudioContent: {
      set_audio_content(from.audio_content());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:techmo.sarmata.RecognizeRequest)
}

void RecognizeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RecognizeRequest_sarmata_5fasr_2eproto.base);
  clear_has_request();
}

RecognizeRequest::~RecognizeRequest() {
  // @@protoc_insertion_point(destructor:techmo.sarmata.RecognizeRequest)
  SharedDtor();
}

void RecognizeRequest::SharedDtor() {
  if (has_request()) {
    clear_request();
  }
}

void RecognizeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecognizeRequest& RecognizeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecognizeRequest_sarmata_5fasr_2eproto.base);
  return *internal_default_instance();
}


void RecognizeRequest::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:techmo.sarmata.RecognizeRequest)
  switch (request_case()) {
    case kConfig: {
      delete request_.config_;
      break;
    }
    case kAudioContent: {
      request_.audio_content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_NOT_SET;
}


void RecognizeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.sarmata.RecognizeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_request();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RecognizeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .techmo.sarmata.RecognitionConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes audio_content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_audio_content(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RecognizeRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:techmo.sarmata.RecognizeRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .techmo.sarmata.RecognitionConfig config = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes audio_content = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_audio_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:techmo.sarmata.RecognizeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:techmo.sarmata.RecognizeRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RecognizeRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:techmo.sarmata.RecognizeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .techmo.sarmata.RecognitionConfig config = 1;
  if (has_config()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::config(this), output);
  }

  // bytes audio_content = 2;
  if (has_audio_content()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->audio_content(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:techmo.sarmata.RecognizeRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* RecognizeRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:techmo.sarmata.RecognizeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .techmo.sarmata.RecognitionConfig config = 1;
  if (has_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::config(this), target);
  }

  // bytes audio_content = 2;
  if (has_audio_content()) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->audio_content(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.sarmata.RecognizeRequest)
  return target;
}

size_t RecognizeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.sarmata.RecognizeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (request_case()) {
    // .techmo.sarmata.RecognitionConfig config = 1;
    case kConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.config_);
      break;
    }
    // bytes audio_content = 2;
    case kAudioContent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->audio_content());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecognizeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.sarmata.RecognizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RecognizeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecognizeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.sarmata.RecognizeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.sarmata.RecognizeRequest)
    MergeFrom(*source);
  }
}

void RecognizeRequest::MergeFrom(const RecognizeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.sarmata.RecognizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.request_case()) {
    case kConfig: {
      mutable_config()->::techmo::sarmata::RecognitionConfig::MergeFrom(from.config());
      break;
    }
    case kAudioContent: {
      set_audio_content(from.audio_content());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
}

void RecognizeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.sarmata.RecognizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecognizeRequest::CopyFrom(const RecognizeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.sarmata.RecognizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognizeRequest::IsInitialized() const {
  return true;
}

void RecognizeRequest::Swap(RecognizeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecognizeRequest::InternalSwap(RecognizeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(request_, other->request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecognizeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecognitionConfig::InitAsDefaultInstance() {
  ::techmo::sarmata::_RecognitionConfig_default_instance_.grammar_name_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::techmo::sarmata::_RecognitionConfig_default_instance_.grammar_data_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::techmo::sarmata::_RecognitionConfig_default_instance_._instance.get_mutable()->timeout_settings_ = const_cast< ::techmo::sarmata::TimeoutSettings*>(
      ::techmo::sarmata::TimeoutSettings::internal_default_instance());
}
class RecognitionConfig::HasBitSetters {
 public:
  static const ::techmo::sarmata::TimeoutSettings& timeout_settings(const RecognitionConfig* msg);
};

const ::techmo::sarmata::TimeoutSettings&
RecognitionConfig::HasBitSetters::timeout_settings(const RecognitionConfig* msg) {
  return *msg->timeout_settings_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecognitionConfig::kGrammarNameFieldNumber;
const int RecognitionConfig::kGrammarDataFieldNumber;
const int RecognitionConfig::kSampleRateHertzFieldNumber;
const int RecognitionConfig::kMaxAlternativesFieldNumber;
const int RecognitionConfig::kNoMatchThresholdFieldNumber;
const int RecognitionConfig::kTimeoutSettingsFieldNumber;
const int RecognitionConfig::kAdditionalSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecognitionConfig::RecognitionConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.sarmata.RecognitionConfig)
}
RecognitionConfig::RecognitionConfig(const RecognitionConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      additional_settings_(from.additional_settings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timeout_settings()) {
    timeout_settings_ = new ::techmo::sarmata::TimeoutSettings(*from.timeout_settings_);
  } else {
    timeout_settings_ = nullptr;
  }
  ::memcpy(&sample_rate_hertz_, &from.sample_rate_hertz_,
    static_cast<size_t>(reinterpret_cast<char*>(&no_match_threshold_) -
    reinterpret_cast<char*>(&sample_rate_hertz_)) + sizeof(no_match_threshold_));
  clear_has_grammar();
  switch (from.grammar_case()) {
    case kGrammarName: {
      set_grammar_name(from.grammar_name());
      break;
    }
    case kGrammarData: {
      set_grammar_data(from.grammar_data());
      break;
    }
    case GRAMMAR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:techmo.sarmata.RecognitionConfig)
}

void RecognitionConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RecognitionConfig_sarmata_5fasr_2eproto.base);
  ::memset(&timeout_settings_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&no_match_threshold_) -
      reinterpret_cast<char*>(&timeout_settings_)) + sizeof(no_match_threshold_));
  clear_has_grammar();
}

RecognitionConfig::~RecognitionConfig() {
  // @@protoc_insertion_point(destructor:techmo.sarmata.RecognitionConfig)
  SharedDtor();
}

void RecognitionConfig::SharedDtor() {
  if (this != internal_default_instance()) delete timeout_settings_;
  if (has_grammar()) {
    clear_grammar();
  }
}

void RecognitionConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecognitionConfig& RecognitionConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecognitionConfig_sarmata_5fasr_2eproto.base);
  return *internal_default_instance();
}


void RecognitionConfig::clear_grammar() {
// @@protoc_insertion_point(one_of_clear_start:techmo.sarmata.RecognitionConfig)
  switch (grammar_case()) {
    case kGrammarName: {
      grammar_.grammar_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kGrammarData: {
      grammar_.grammar_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case GRAMMAR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = GRAMMAR_NOT_SET;
}


void RecognitionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.sarmata.RecognitionConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_settings_.Clear();
  if (GetArenaNoVirtual() == nullptr && timeout_settings_ != nullptr) {
    delete timeout_settings_;
  }
  timeout_settings_ = nullptr;
  ::memset(&sample_rate_hertz_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&no_match_threshold_) -
      reinterpret_cast<char*>(&sample_rate_hertz_)) + sizeof(no_match_threshold_));
  clear_grammar();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RecognitionConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string grammar_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_grammar_name(), ptr, ctx, "techmo.sarmata.RecognitionConfig.grammar_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string grammar_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_grammar_data(), ptr, ctx, "techmo.sarmata.RecognitionConfig.grammar_data");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sample_rate_hertz = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sample_rate_hertz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_alternatives = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          max_alternatives_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double no_match_threshold = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          no_match_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .techmo.sarmata.TimeoutSettings timeout_settings = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_timeout_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .techmo.sarmata.ConfigField additional_settings = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_additional_settings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RecognitionConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:techmo.sarmata.RecognitionConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string grammar_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_grammar_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->grammar_name().data(), static_cast<int>(this->grammar_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "techmo.sarmata.RecognitionConfig.grammar_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string grammar_data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_grammar_data()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->grammar_data().data(), static_cast<int>(this->grammar_data().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "techmo.sarmata.RecognitionConfig.grammar_data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sample_rate_hertz = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &sample_rate_hertz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_alternatives = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_alternatives_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double no_match_threshold = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &no_match_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .techmo.sarmata.TimeoutSettings timeout_settings = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_timeout_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .techmo.sarmata.ConfigField additional_settings = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_additional_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:techmo.sarmata.RecognitionConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:techmo.sarmata.RecognitionConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RecognitionConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:techmo.sarmata.RecognitionConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string grammar_name = 1;
  if (has_grammar_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->grammar_name().data(), static_cast<int>(this->grammar_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "techmo.sarmata.RecognitionConfig.grammar_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->grammar_name(), output);
  }

  // string grammar_data = 2;
  if (has_grammar_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->grammar_data().data(), static_cast<int>(this->grammar_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "techmo.sarmata.RecognitionConfig.grammar_data");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->grammar_data(), output);
  }

  // int32 sample_rate_hertz = 3;
  if (this->sample_rate_hertz() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->sample_rate_hertz(), output);
  }

  // int32 max_alternatives = 4;
  if (this->max_alternatives() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->max_alternatives(), output);
  }

  // double no_match_threshold = 5;
  if (!(this->no_match_threshold() <= 0 && this->no_match_threshold() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->no_match_threshold(), output);
  }

  // .techmo.sarmata.TimeoutSettings timeout_settings = 6;
  if (this->has_timeout_settings()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::timeout_settings(this), output);
  }

  // repeated .techmo.sarmata.ConfigField additional_settings = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->additional_settings_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->additional_settings(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:techmo.sarmata.RecognitionConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* RecognitionConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:techmo.sarmata.RecognitionConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string grammar_name = 1;
  if (has_grammar_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->grammar_name().data(), static_cast<int>(this->grammar_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "techmo.sarmata.RecognitionConfig.grammar_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->grammar_name(), target);
  }

  // string grammar_data = 2;
  if (has_grammar_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->grammar_data().data(), static_cast<int>(this->grammar_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "techmo.sarmata.RecognitionConfig.grammar_data");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->grammar_data(), target);
  }

  // int32 sample_rate_hertz = 3;
  if (this->sample_rate_hertz() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->sample_rate_hertz(), target);
  }

  // int32 max_alternatives = 4;
  if (this->max_alternatives() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->max_alternatives(), target);
  }

  // double no_match_threshold = 5;
  if (!(this->no_match_threshold() <= 0 && this->no_match_threshold() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->no_match_threshold(), target);
  }

  // .techmo.sarmata.TimeoutSettings timeout_settings = 6;
  if (this->has_timeout_settings()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::timeout_settings(this), target);
  }

  // repeated .techmo.sarmata.ConfigField additional_settings = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->additional_settings_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->additional_settings(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.sarmata.RecognitionConfig)
  return target;
}

size_t RecognitionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.sarmata.RecognitionConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .techmo.sarmata.ConfigField additional_settings = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->additional_settings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->additional_settings(static_cast<int>(i)));
    }
  }

  // .techmo.sarmata.TimeoutSettings timeout_settings = 6;
  if (this->has_timeout_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timeout_settings_);
  }

  // int32 sample_rate_hertz = 3;
  if (this->sample_rate_hertz() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->sample_rate_hertz());
  }

  // int32 max_alternatives = 4;
  if (this->max_alternatives() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->max_alternatives());
  }

  // double no_match_threshold = 5;
  if (!(this->no_match_threshold() <= 0 && this->no_match_threshold() >= 0)) {
    total_size += 1 + 8;
  }

  switch (grammar_case()) {
    // string grammar_name = 1;
    case kGrammarName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->grammar_name());
      break;
    }
    // string grammar_data = 2;
    case kGrammarData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->grammar_data());
      break;
    }
    case GRAMMAR_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecognitionConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.sarmata.RecognitionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RecognitionConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecognitionConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.sarmata.RecognitionConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.sarmata.RecognitionConfig)
    MergeFrom(*source);
  }
}

void RecognitionConfig::MergeFrom(const RecognitionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.sarmata.RecognitionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_settings_.MergeFrom(from.additional_settings_);
  if (from.has_timeout_settings()) {
    mutable_timeout_settings()->::techmo::sarmata::TimeoutSettings::MergeFrom(from.timeout_settings());
  }
  if (from.sample_rate_hertz() != 0) {
    set_sample_rate_hertz(from.sample_rate_hertz());
  }
  if (from.max_alternatives() != 0) {
    set_max_alternatives(from.max_alternatives());
  }
  if (!(from.no_match_threshold() <= 0 && from.no_match_threshold() >= 0)) {
    set_no_match_threshold(from.no_match_threshold());
  }
  switch (from.grammar_case()) {
    case kGrammarName: {
      set_grammar_name(from.grammar_name());
      break;
    }
    case kGrammarData: {
      set_grammar_data(from.grammar_data());
      break;
    }
    case GRAMMAR_NOT_SET: {
      break;
    }
  }
}

void RecognitionConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.sarmata.RecognitionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecognitionConfig::CopyFrom(const RecognitionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.sarmata.RecognitionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognitionConfig::IsInitialized() const {
  return true;
}

void RecognitionConfig::Swap(RecognitionConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecognitionConfig::InternalSwap(RecognitionConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&additional_settings_)->InternalSwap(CastToBase(&other->additional_settings_));
  swap(timeout_settings_, other->timeout_settings_);
  swap(sample_rate_hertz_, other->sample_rate_hertz_);
  swap(max_alternatives_, other->max_alternatives_);
  swap(no_match_threshold_, other->no_match_threshold_);
  swap(grammar_, other->grammar_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecognitionConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimeoutSettings::InitAsDefaultInstance() {
}
class TimeoutSettings::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeoutSettings::kNoInputTimeoutFieldNumber;
const int TimeoutSettings::kRecognitionTimeoutFieldNumber;
const int TimeoutSettings::kSpeechCompleteTimeoutFieldNumber;
const int TimeoutSettings::kSpeechIncompleteTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeoutSettings::TimeoutSettings()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.sarmata.TimeoutSettings)
}
TimeoutSettings::TimeoutSettings(const TimeoutSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&no_input_timeout_, &from.no_input_timeout_,
    static_cast<size_t>(reinterpret_cast<char*>(&speech_incomplete_timeout_) -
    reinterpret_cast<char*>(&no_input_timeout_)) + sizeof(speech_incomplete_timeout_));
  // @@protoc_insertion_point(copy_constructor:techmo.sarmata.TimeoutSettings)
}

void TimeoutSettings::SharedCtor() {
  ::memset(&no_input_timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speech_incomplete_timeout_) -
      reinterpret_cast<char*>(&no_input_timeout_)) + sizeof(speech_incomplete_timeout_));
}

TimeoutSettings::~TimeoutSettings() {
  // @@protoc_insertion_point(destructor:techmo.sarmata.TimeoutSettings)
  SharedDtor();
}

void TimeoutSettings::SharedDtor() {
}

void TimeoutSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeoutSettings& TimeoutSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimeoutSettings_sarmata_5fasr_2eproto.base);
  return *internal_default_instance();
}


void TimeoutSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.sarmata.TimeoutSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&no_input_timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speech_incomplete_timeout_) -
      reinterpret_cast<char*>(&no_input_timeout_)) + sizeof(speech_incomplete_timeout_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TimeoutSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 no_input_timeout = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          no_input_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 recognition_timeout = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          recognition_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 speech_complete_timeout = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          speech_complete_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 speech_incomplete_timeout = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          speech_incomplete_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TimeoutSettings::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:techmo.sarmata.TimeoutSettings)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 no_input_timeout = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &no_input_timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 recognition_timeout = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &recognition_timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 speech_complete_timeout = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &speech_complete_timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 speech_incomplete_timeout = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &speech_incomplete_timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:techmo.sarmata.TimeoutSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:techmo.sarmata.TimeoutSettings)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TimeoutSettings::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:techmo.sarmata.TimeoutSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 no_input_timeout = 1;
  if (this->no_input_timeout() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->no_input_timeout(), output);
  }

  // int32 recognition_timeout = 2;
  if (this->recognition_timeout() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->recognition_timeout(), output);
  }

  // int32 speech_complete_timeout = 3;
  if (this->speech_complete_timeout() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->speech_complete_timeout(), output);
  }

  // int32 speech_incomplete_timeout = 4;
  if (this->speech_incomplete_timeout() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->speech_incomplete_timeout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:techmo.sarmata.TimeoutSettings)
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeoutSettings::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:techmo.sarmata.TimeoutSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 no_input_timeout = 1;
  if (this->no_input_timeout() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->no_input_timeout(), target);
  }

  // int32 recognition_timeout = 2;
  if (this->recognition_timeout() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->recognition_timeout(), target);
  }

  // int32 speech_complete_timeout = 3;
  if (this->speech_complete_timeout() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->speech_complete_timeout(), target);
  }

  // int32 speech_incomplete_timeout = 4;
  if (this->speech_incomplete_timeout() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->speech_incomplete_timeout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.sarmata.TimeoutSettings)
  return target;
}

size_t TimeoutSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.sarmata.TimeoutSettings)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 no_input_timeout = 1;
  if (this->no_input_timeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->no_input_timeout());
  }

  // int32 recognition_timeout = 2;
  if (this->recognition_timeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->recognition_timeout());
  }

  // int32 speech_complete_timeout = 3;
  if (this->speech_complete_timeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->speech_complete_timeout());
  }

  // int32 speech_incomplete_timeout = 4;
  if (this->speech_incomplete_timeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->speech_incomplete_timeout());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeoutSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.sarmata.TimeoutSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeoutSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimeoutSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.sarmata.TimeoutSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.sarmata.TimeoutSettings)
    MergeFrom(*source);
  }
}

void TimeoutSettings::MergeFrom(const TimeoutSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.sarmata.TimeoutSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.no_input_timeout() != 0) {
    set_no_input_timeout(from.no_input_timeout());
  }
  if (from.recognition_timeout() != 0) {
    set_recognition_timeout(from.recognition_timeout());
  }
  if (from.speech_complete_timeout() != 0) {
    set_speech_complete_timeout(from.speech_complete_timeout());
  }
  if (from.speech_incomplete_timeout() != 0) {
    set_speech_incomplete_timeout(from.speech_incomplete_timeout());
  }
}

void TimeoutSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.sarmata.TimeoutSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeoutSettings::CopyFrom(const TimeoutSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.sarmata.TimeoutSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeoutSettings::IsInitialized() const {
  return true;
}

void TimeoutSettings::Swap(TimeoutSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeoutSettings::InternalSwap(TimeoutSettings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(no_input_timeout_, other->no_input_timeout_);
  swap(recognition_timeout_, other->recognition_timeout_);
  swap(speech_complete_timeout_, other->speech_complete_timeout_);
  swap(speech_incomplete_timeout_, other->speech_incomplete_timeout_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeoutSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConfigField::InitAsDefaultInstance() {
}
class ConfigField::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigField::kKeyFieldNumber;
const int ConfigField::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigField::ConfigField()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.sarmata.ConfigField)
}
ConfigField::ConfigField(const ConfigField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:techmo.sarmata.ConfigField)
}

void ConfigField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfigField_sarmata_5fasr_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ConfigField::~ConfigField() {
  // @@protoc_insertion_point(destructor:techmo.sarmata.ConfigField)
  SharedDtor();
}

void ConfigField::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfigField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigField& ConfigField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigField_sarmata_5fasr_2eproto.base);
  return *internal_default_instance();
}


void ConfigField::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.sarmata.ConfigField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConfigField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_key(), ptr, ctx, "techmo.sarmata.ConfigField.key");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_value(), ptr, ctx, "techmo.sarmata.ConfigField.value");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConfigField::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:techmo.sarmata.ConfigField)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "techmo.sarmata.ConfigField.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "techmo.sarmata.ConfigField.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:techmo.sarmata.ConfigField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:techmo.sarmata.ConfigField)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConfigField::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:techmo.sarmata.ConfigField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "techmo.sarmata.ConfigField.key");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "techmo.sarmata.ConfigField.value");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:techmo.sarmata.ConfigField)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigField::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:techmo.sarmata.ConfigField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "techmo.sarmata.ConfigField.key");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "techmo.sarmata.ConfigField.value");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.sarmata.ConfigField)
  return target;
}

size_t ConfigField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.sarmata.ConfigField)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.sarmata.ConfigField)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.sarmata.ConfigField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.sarmata.ConfigField)
    MergeFrom(*source);
  }
}

void ConfigField::MergeFrom(const ConfigField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.sarmata.ConfigField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void ConfigField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.sarmata.ConfigField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigField::CopyFrom(const ConfigField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.sarmata.ConfigField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigField::IsInitialized() const {
  return true;
}

void ConfigField::Swap(ConfigField* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfigField::InternalSwap(ConfigField* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecognizeResponse::InitAsDefaultInstance() {
}
class RecognizeResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecognizeResponse::kStatusFieldNumber;
const int RecognizeResponse::kErrorFieldNumber;
const int RecognizeResponse::kEventTimeFieldNumber;
const int RecognizeResponse::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecognizeResponse::RecognizeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.sarmata.RecognizeResponse)
}
RecognizeResponse::RecognizeResponse(const RecognizeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      results_(from.results_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.error().size() > 0) {
    error_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_time_) -
    reinterpret_cast<char*>(&status_)) + sizeof(event_time_));
  // @@protoc_insertion_point(copy_constructor:techmo.sarmata.RecognizeResponse)
}

void RecognizeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RecognizeResponse_sarmata_5fasr_2eproto.base);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_time_) -
      reinterpret_cast<char*>(&status_)) + sizeof(event_time_));
}

RecognizeResponse::~RecognizeResponse() {
  // @@protoc_insertion_point(destructor:techmo.sarmata.RecognizeResponse)
  SharedDtor();
}

void RecognizeResponse::SharedDtor() {
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RecognizeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecognizeResponse& RecognizeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecognizeResponse_sarmata_5fasr_2eproto.base);
  return *internal_default_instance();
}


void RecognizeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.sarmata.RecognizeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  error_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_time_) -
      reinterpret_cast<char*>(&status_)) + sizeof(event_time_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RecognizeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .techmo.sarmata.ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_status(static_cast<::techmo::sarmata::ResponseStatus>(val));
        } else goto handle_unusual;
        continue;
      // string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_error(), ptr, ctx, "techmo.sarmata.RecognizeResponse.error");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 event_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          event_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .techmo.sarmata.RecognizedPhrase results = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RecognizeResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:techmo.sarmata.RecognizeResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .techmo.sarmata.ResponseStatus status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::techmo::sarmata::ResponseStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), static_cast<int>(this->error().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "techmo.sarmata.RecognizeResponse.error"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 event_time = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .techmo.sarmata.RecognizedPhrase results = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:techmo.sarmata.RecognizeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:techmo.sarmata.RecognizeResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RecognizeResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:techmo.sarmata.RecognizeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .techmo.sarmata.ResponseStatus status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // string error = 2;
  if (this->error().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "techmo.sarmata.RecognizeResponse.error");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  // int32 event_time = 3;
  if (this->event_time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->event_time(), output);
  }

  // repeated .techmo.sarmata.RecognizedPhrase results = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->results(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:techmo.sarmata.RecognizeResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* RecognizeResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:techmo.sarmata.RecognizeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .techmo.sarmata.ResponseStatus status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // string error = 2;
  if (this->error().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "techmo.sarmata.RecognizeResponse.error");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  // int32 event_time = 3;
  if (this->event_time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->event_time(), target);
  }

  // repeated .techmo.sarmata.RecognizedPhrase results = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->results(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.sarmata.RecognizeResponse)
  return target;
}

size_t RecognizeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.sarmata.RecognizeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .techmo.sarmata.RecognizedPhrase results = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->results(static_cast<int>(i)));
    }
  }

  // string error = 2;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->error());
  }

  // .techmo.sarmata.ResponseStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  // int32 event_time = 3;
  if (this->event_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->event_time());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecognizeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.sarmata.RecognizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RecognizeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecognizeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.sarmata.RecognizeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.sarmata.RecognizeResponse)
    MergeFrom(*source);
  }
}

void RecognizeResponse::MergeFrom(const RecognizeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.sarmata.RecognizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.event_time() != 0) {
    set_event_time(from.event_time());
  }
}

void RecognizeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.sarmata.RecognizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecognizeResponse::CopyFrom(const RecognizeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.sarmata.RecognizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognizeResponse::IsInitialized() const {
  return true;
}

void RecognizeResponse::Swap(RecognizeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecognizeResponse::InternalSwap(RecognizeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&results_)->InternalSwap(CastToBase(&other->results_));
  error_.Swap(&other->error_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
  swap(event_time_, other->event_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecognizeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecognizedPhrase_RecognizedWord::InitAsDefaultInstance() {
}
class RecognizedPhrase_RecognizedWord::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecognizedPhrase_RecognizedWord::kTranscriptFieldNumber;
const int RecognizedPhrase_RecognizedWord::kConfidenceFieldNumber;
const int RecognizedPhrase_RecognizedWord::kStartFieldNumber;
const int RecognizedPhrase_RecognizedWord::kEndFieldNumber;
const int RecognizedPhrase_RecognizedWord::kLogprobFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecognizedPhrase_RecognizedWord::RecognizedPhrase_RecognizedWord()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.sarmata.RecognizedPhrase.RecognizedWord)
}
RecognizedPhrase_RecognizedWord::RecognizedPhrase_RecognizedWord(const RecognizedPhrase_RecognizedWord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  transcript_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.transcript().size() > 0) {
    transcript_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transcript_);
  }
  ::memcpy(&confidence_, &from.confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&logprob_) -
    reinterpret_cast<char*>(&confidence_)) + sizeof(logprob_));
  // @@protoc_insertion_point(copy_constructor:techmo.sarmata.RecognizedPhrase.RecognizedWord)
}

void RecognizedPhrase_RecognizedWord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RecognizedPhrase_RecognizedWord_sarmata_5fasr_2eproto.base);
  transcript_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logprob_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(logprob_));
}

RecognizedPhrase_RecognizedWord::~RecognizedPhrase_RecognizedWord() {
  // @@protoc_insertion_point(destructor:techmo.sarmata.RecognizedPhrase.RecognizedWord)
  SharedDtor();
}

void RecognizedPhrase_RecognizedWord::SharedDtor() {
  transcript_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RecognizedPhrase_RecognizedWord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecognizedPhrase_RecognizedWord& RecognizedPhrase_RecognizedWord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecognizedPhrase_RecognizedWord_sarmata_5fasr_2eproto.base);
  return *internal_default_instance();
}


void RecognizedPhrase_RecognizedWord::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.sarmata.RecognizedPhrase.RecognizedWord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transcript_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logprob_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(logprob_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RecognizedPhrase_RecognizedWord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string transcript = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_transcript(), ptr, ctx, "techmo.sarmata.RecognizedPhrase.RecognizedWord.transcript");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double confidence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double logprob = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          logprob_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RecognizedPhrase_RecognizedWord::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:techmo.sarmata.RecognizedPhrase.RecognizedWord)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string transcript = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_transcript()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->transcript().data(), static_cast<int>(this->transcript().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "techmo.sarmata.RecognizedPhrase.RecognizedWord.transcript"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double confidence = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 start = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 end = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double logprob = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &logprob_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:techmo.sarmata.RecognizedPhrase.RecognizedWord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:techmo.sarmata.RecognizedPhrase.RecognizedWord)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RecognizedPhrase_RecognizedWord::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:techmo.sarmata.RecognizedPhrase.RecognizedWord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string transcript = 1;
  if (this->transcript().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->transcript().data(), static_cast<int>(this->transcript().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "techmo.sarmata.RecognizedPhrase.RecognizedWord.transcript");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->transcript(), output);
  }

  // double confidence = 2;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->confidence(), output);
  }

  // int32 start = 3;
  if (this->start() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->start(), output);
  }

  // int32 end = 4;
  if (this->end() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->end(), output);
  }

  // double logprob = 5;
  if (!(this->logprob() <= 0 && this->logprob() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->logprob(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:techmo.sarmata.RecognizedPhrase.RecognizedWord)
}

::PROTOBUF_NAMESPACE_ID::uint8* RecognizedPhrase_RecognizedWord::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:techmo.sarmata.RecognizedPhrase.RecognizedWord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string transcript = 1;
  if (this->transcript().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->transcript().data(), static_cast<int>(this->transcript().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "techmo.sarmata.RecognizedPhrase.RecognizedWord.transcript");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->transcript(), target);
  }

  // double confidence = 2;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->confidence(), target);
  }

  // int32 start = 3;
  if (this->start() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->start(), target);
  }

  // int32 end = 4;
  if (this->end() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->end(), target);
  }

  // double logprob = 5;
  if (!(this->logprob() <= 0 && this->logprob() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->logprob(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.sarmata.RecognizedPhrase.RecognizedWord)
  return target;
}

size_t RecognizedPhrase_RecognizedWord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.sarmata.RecognizedPhrase.RecognizedWord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string transcript = 1;
  if (this->transcript().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->transcript());
  }

  // double confidence = 2;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 start = 3;
  if (this->start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->start());
  }

  // int32 end = 4;
  if (this->end() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->end());
  }

  // double logprob = 5;
  if (!(this->logprob() <= 0 && this->logprob() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecognizedPhrase_RecognizedWord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.sarmata.RecognizedPhrase.RecognizedWord)
  GOOGLE_DCHECK_NE(&from, this);
  const RecognizedPhrase_RecognizedWord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecognizedPhrase_RecognizedWord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.sarmata.RecognizedPhrase.RecognizedWord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.sarmata.RecognizedPhrase.RecognizedWord)
    MergeFrom(*source);
  }
}

void RecognizedPhrase_RecognizedWord::MergeFrom(const RecognizedPhrase_RecognizedWord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.sarmata.RecognizedPhrase.RecognizedWord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.transcript().size() > 0) {

    transcript_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transcript_);
  }
  if (!(from.confidence() <= 0 && from.confidence() >= 0)) {
    set_confidence(from.confidence());
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
  if (!(from.logprob() <= 0 && from.logprob() >= 0)) {
    set_logprob(from.logprob());
  }
}

void RecognizedPhrase_RecognizedWord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.sarmata.RecognizedPhrase.RecognizedWord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecognizedPhrase_RecognizedWord::CopyFrom(const RecognizedPhrase_RecognizedWord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.sarmata.RecognizedPhrase.RecognizedWord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognizedPhrase_RecognizedWord::IsInitialized() const {
  return true;
}

void RecognizedPhrase_RecognizedWord::Swap(RecognizedPhrase_RecognizedWord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecognizedPhrase_RecognizedWord::InternalSwap(RecognizedPhrase_RecognizedWord* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  transcript_.Swap(&other->transcript_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(confidence_, other->confidence_);
  swap(start_, other->start_);
  swap(end_, other->end_);
  swap(logprob_, other->logprob_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecognizedPhrase_RecognizedWord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecognizedPhrase::InitAsDefaultInstance() {
}
class RecognizedPhrase::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecognizedPhrase::kWordsFieldNumber;
const int RecognizedPhrase::kConfidenceFieldNumber;
const int RecognizedPhrase::kCorrectFieldNumber;
const int RecognizedPhrase::kSemanticInterpretationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecognizedPhrase::RecognizedPhrase()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.sarmata.RecognizedPhrase)
}
RecognizedPhrase::RecognizedPhrase(const RecognizedPhrase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      words_(from.words_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  semantic_interpretation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.semantic_interpretation().size() > 0) {
    semantic_interpretation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.semantic_interpretation_);
  }
  ::memcpy(&confidence_, &from.confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&correct_) -
    reinterpret_cast<char*>(&confidence_)) + sizeof(correct_));
  // @@protoc_insertion_point(copy_constructor:techmo.sarmata.RecognizedPhrase)
}

void RecognizedPhrase::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RecognizedPhrase_sarmata_5fasr_2eproto.base);
  semantic_interpretation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&correct_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(correct_));
}

RecognizedPhrase::~RecognizedPhrase() {
  // @@protoc_insertion_point(destructor:techmo.sarmata.RecognizedPhrase)
  SharedDtor();
}

void RecognizedPhrase::SharedDtor() {
  semantic_interpretation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RecognizedPhrase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecognizedPhrase& RecognizedPhrase::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecognizedPhrase_sarmata_5fasr_2eproto.base);
  return *internal_default_instance();
}


void RecognizedPhrase::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.sarmata.RecognizedPhrase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  words_.Clear();
  semantic_interpretation_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&correct_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(correct_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RecognizedPhrase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .techmo.sarmata.RecognizedPhrase.RecognizedWord words = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_words(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // double confidence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool correct = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          correct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string semantic_interpretation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_semantic_interpretation(), ptr, ctx, "techmo.sarmata.RecognizedPhrase.semantic_interpretation");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RecognizedPhrase::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:techmo.sarmata.RecognizedPhrase)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .techmo.sarmata.RecognizedPhrase.RecognizedWord words = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_words()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double confidence = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool correct = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &correct_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string semantic_interpretation = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_semantic_interpretation()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->semantic_interpretation().data(), static_cast<int>(this->semantic_interpretation().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "techmo.sarmata.RecognizedPhrase.semantic_interpretation"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:techmo.sarmata.RecognizedPhrase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:techmo.sarmata.RecognizedPhrase)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RecognizedPhrase::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:techmo.sarmata.RecognizedPhrase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .techmo.sarmata.RecognizedPhrase.RecognizedWord words = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->words_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->words(static_cast<int>(i)),
      output);
  }

  // double confidence = 2;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->confidence(), output);
  }

  // bool correct = 3;
  if (this->correct() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->correct(), output);
  }

  // string semantic_interpretation = 4;
  if (this->semantic_interpretation().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->semantic_interpretation().data(), static_cast<int>(this->semantic_interpretation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "techmo.sarmata.RecognizedPhrase.semantic_interpretation");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->semantic_interpretation(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:techmo.sarmata.RecognizedPhrase)
}

::PROTOBUF_NAMESPACE_ID::uint8* RecognizedPhrase::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:techmo.sarmata.RecognizedPhrase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .techmo.sarmata.RecognizedPhrase.RecognizedWord words = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->words_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->words(static_cast<int>(i)), target);
  }

  // double confidence = 2;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->confidence(), target);
  }

  // bool correct = 3;
  if (this->correct() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->correct(), target);
  }

  // string semantic_interpretation = 4;
  if (this->semantic_interpretation().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->semantic_interpretation().data(), static_cast<int>(this->semantic_interpretation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "techmo.sarmata.RecognizedPhrase.semantic_interpretation");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->semantic_interpretation(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.sarmata.RecognizedPhrase)
  return target;
}

size_t RecognizedPhrase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.sarmata.RecognizedPhrase)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .techmo.sarmata.RecognizedPhrase.RecognizedWord words = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->words_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->words(static_cast<int>(i)));
    }
  }

  // string semantic_interpretation = 4;
  if (this->semantic_interpretation().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->semantic_interpretation());
  }

  // double confidence = 2;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    total_size += 1 + 8;
  }

  // bool correct = 3;
  if (this->correct() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecognizedPhrase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.sarmata.RecognizedPhrase)
  GOOGLE_DCHECK_NE(&from, this);
  const RecognizedPhrase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecognizedPhrase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.sarmata.RecognizedPhrase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.sarmata.RecognizedPhrase)
    MergeFrom(*source);
  }
}

void RecognizedPhrase::MergeFrom(const RecognizedPhrase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.sarmata.RecognizedPhrase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  words_.MergeFrom(from.words_);
  if (from.semantic_interpretation().size() > 0) {

    semantic_interpretation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.semantic_interpretation_);
  }
  if (!(from.confidence() <= 0 && from.confidence() >= 0)) {
    set_confidence(from.confidence());
  }
  if (from.correct() != 0) {
    set_correct(from.correct());
  }
}

void RecognizedPhrase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.sarmata.RecognizedPhrase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecognizedPhrase::CopyFrom(const RecognizedPhrase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.sarmata.RecognizedPhrase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognizedPhrase::IsInitialized() const {
  return true;
}

void RecognizedPhrase::Swap(RecognizedPhrase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecognizedPhrase::InternalSwap(RecognizedPhrase* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&words_)->InternalSwap(CastToBase(&other->words_));
  semantic_interpretation_.Swap(&other->semantic_interpretation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(confidence_, other->confidence_);
  swap(correct_, other->correct_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecognizedPhrase::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DefineGrammarRequest::InitAsDefaultInstance() {
}
class DefineGrammarRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DefineGrammarRequest::kGrammarNameFieldNumber;
const int DefineGrammarRequest::kGrammarDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DefineGrammarRequest::DefineGrammarRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.sarmata.DefineGrammarRequest)
}
DefineGrammarRequest::DefineGrammarRequest(const DefineGrammarRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  grammar_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.grammar_name().size() > 0) {
    grammar_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.grammar_name_);
  }
  grammar_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.grammar_data().size() > 0) {
    grammar_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.grammar_data_);
  }
  // @@protoc_insertion_point(copy_constructor:techmo.sarmata.DefineGrammarRequest)
}

void DefineGrammarRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DefineGrammarRequest_sarmata_5fasr_2eproto.base);
  grammar_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  grammar_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DefineGrammarRequest::~DefineGrammarRequest() {
  // @@protoc_insertion_point(destructor:techmo.sarmata.DefineGrammarRequest)
  SharedDtor();
}

void DefineGrammarRequest::SharedDtor() {
  grammar_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  grammar_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DefineGrammarRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DefineGrammarRequest& DefineGrammarRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DefineGrammarRequest_sarmata_5fasr_2eproto.base);
  return *internal_default_instance();
}


void DefineGrammarRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.sarmata.DefineGrammarRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  grammar_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  grammar_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DefineGrammarRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string grammar_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_grammar_name(), ptr, ctx, "techmo.sarmata.DefineGrammarRequest.grammar_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string grammar_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_grammar_data(), ptr, ctx, "techmo.sarmata.DefineGrammarRequest.grammar_data");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DefineGrammarRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:techmo.sarmata.DefineGrammarRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string grammar_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_grammar_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->grammar_name().data(), static_cast<int>(this->grammar_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "techmo.sarmata.DefineGrammarRequest.grammar_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string grammar_data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_grammar_data()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->grammar_data().data(), static_cast<int>(this->grammar_data().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "techmo.sarmata.DefineGrammarRequest.grammar_data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:techmo.sarmata.DefineGrammarRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:techmo.sarmata.DefineGrammarRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DefineGrammarRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:techmo.sarmata.DefineGrammarRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string grammar_name = 1;
  if (this->grammar_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->grammar_name().data(), static_cast<int>(this->grammar_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "techmo.sarmata.DefineGrammarRequest.grammar_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->grammar_name(), output);
  }

  // string grammar_data = 2;
  if (this->grammar_data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->grammar_data().data(), static_cast<int>(this->grammar_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "techmo.sarmata.DefineGrammarRequest.grammar_data");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->grammar_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:techmo.sarmata.DefineGrammarRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DefineGrammarRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:techmo.sarmata.DefineGrammarRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string grammar_name = 1;
  if (this->grammar_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->grammar_name().data(), static_cast<int>(this->grammar_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "techmo.sarmata.DefineGrammarRequest.grammar_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->grammar_name(), target);
  }

  // string grammar_data = 2;
  if (this->grammar_data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->grammar_data().data(), static_cast<int>(this->grammar_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "techmo.sarmata.DefineGrammarRequest.grammar_data");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->grammar_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.sarmata.DefineGrammarRequest)
  return target;
}

size_t DefineGrammarRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.sarmata.DefineGrammarRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string grammar_name = 1;
  if (this->grammar_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->grammar_name());
  }

  // string grammar_data = 2;
  if (this->grammar_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->grammar_data());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DefineGrammarRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.sarmata.DefineGrammarRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DefineGrammarRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DefineGrammarRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.sarmata.DefineGrammarRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.sarmata.DefineGrammarRequest)
    MergeFrom(*source);
  }
}

void DefineGrammarRequest::MergeFrom(const DefineGrammarRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.sarmata.DefineGrammarRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.grammar_name().size() > 0) {

    grammar_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.grammar_name_);
  }
  if (from.grammar_data().size() > 0) {

    grammar_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.grammar_data_);
  }
}

void DefineGrammarRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.sarmata.DefineGrammarRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DefineGrammarRequest::CopyFrom(const DefineGrammarRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.sarmata.DefineGrammarRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefineGrammarRequest::IsInitialized() const {
  return true;
}

void DefineGrammarRequest::Swap(DefineGrammarRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DefineGrammarRequest::InternalSwap(DefineGrammarRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  grammar_name_.Swap(&other->grammar_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  grammar_data_.Swap(&other->grammar_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DefineGrammarRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DefineGrammarResponse::InitAsDefaultInstance() {
}
class DefineGrammarResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DefineGrammarResponse::kStatusFieldNumber;
const int DefineGrammarResponse::kErrorFieldNumber;
const int DefineGrammarResponse::kOkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DefineGrammarResponse::DefineGrammarResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.sarmata.DefineGrammarResponse)
}
DefineGrammarResponse::DefineGrammarResponse(const DefineGrammarResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.error().size() > 0) {
    error_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&ok_) -
    reinterpret_cast<char*>(&status_)) + sizeof(ok_));
  // @@protoc_insertion_point(copy_constructor:techmo.sarmata.DefineGrammarResponse)
}

void DefineGrammarResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DefineGrammarResponse_sarmata_5fasr_2eproto.base);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ok_) -
      reinterpret_cast<char*>(&status_)) + sizeof(ok_));
}

DefineGrammarResponse::~DefineGrammarResponse() {
  // @@protoc_insertion_point(destructor:techmo.sarmata.DefineGrammarResponse)
  SharedDtor();
}

void DefineGrammarResponse::SharedDtor() {
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DefineGrammarResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DefineGrammarResponse& DefineGrammarResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DefineGrammarResponse_sarmata_5fasr_2eproto.base);
  return *internal_default_instance();
}


void DefineGrammarResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.sarmata.DefineGrammarResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ok_) -
      reinterpret_cast<char*>(&status_)) + sizeof(ok_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DefineGrammarResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .techmo.sarmata.ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_status(static_cast<::techmo::sarmata::ResponseStatus>(val));
        } else goto handle_unusual;
        continue;
      // string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_error(), ptr, ctx, "techmo.sarmata.DefineGrammarResponse.error");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ok = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DefineGrammarResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:techmo.sarmata.DefineGrammarResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .techmo.sarmata.ResponseStatus status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::techmo::sarmata::ResponseStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), static_cast<int>(this->error().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "techmo.sarmata.DefineGrammarResponse.error"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ok = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ok_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:techmo.sarmata.DefineGrammarResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:techmo.sarmata.DefineGrammarResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DefineGrammarResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:techmo.sarmata.DefineGrammarResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .techmo.sarmata.ResponseStatus status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // string error = 2;
  if (this->error().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "techmo.sarmata.DefineGrammarResponse.error");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  // bool ok = 3;
  if (this->ok() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->ok(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:techmo.sarmata.DefineGrammarResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* DefineGrammarResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:techmo.sarmata.DefineGrammarResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .techmo.sarmata.ResponseStatus status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // string error = 2;
  if (this->error().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "techmo.sarmata.DefineGrammarResponse.error");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  // bool ok = 3;
  if (this->ok() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->ok(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.sarmata.DefineGrammarResponse)
  return target;
}

size_t DefineGrammarResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.sarmata.DefineGrammarResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error = 2;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->error());
  }

  // .techmo.sarmata.ResponseStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  // bool ok = 3;
  if (this->ok() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DefineGrammarResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.sarmata.DefineGrammarResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DefineGrammarResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DefineGrammarResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.sarmata.DefineGrammarResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.sarmata.DefineGrammarResponse)
    MergeFrom(*source);
  }
}

void DefineGrammarResponse::MergeFrom(const DefineGrammarResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.sarmata.DefineGrammarResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.ok() != 0) {
    set_ok(from.ok());
  }
}

void DefineGrammarResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.sarmata.DefineGrammarResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DefineGrammarResponse::CopyFrom(const DefineGrammarResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.sarmata.DefineGrammarResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefineGrammarResponse::IsInitialized() const {
  return true;
}

void DefineGrammarResponse::Swap(DefineGrammarResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DefineGrammarResponse::InternalSwap(DefineGrammarResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  error_.Swap(&other->error_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
  swap(ok_, other->ok_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DefineGrammarResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sarmata
}  // namespace techmo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::techmo::sarmata::RecognizeRequest* Arena::CreateMaybeMessage< ::techmo::sarmata::RecognizeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::techmo::sarmata::RecognizeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::techmo::sarmata::RecognitionConfig* Arena::CreateMaybeMessage< ::techmo::sarmata::RecognitionConfig >(Arena* arena) {
  return Arena::CreateInternal< ::techmo::sarmata::RecognitionConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::techmo::sarmata::TimeoutSettings* Arena::CreateMaybeMessage< ::techmo::sarmata::TimeoutSettings >(Arena* arena) {
  return Arena::CreateInternal< ::techmo::sarmata::TimeoutSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::techmo::sarmata::ConfigField* Arena::CreateMaybeMessage< ::techmo::sarmata::ConfigField >(Arena* arena) {
  return Arena::CreateInternal< ::techmo::sarmata::ConfigField >(arena);
}
template<> PROTOBUF_NOINLINE ::techmo::sarmata::RecognizeResponse* Arena::CreateMaybeMessage< ::techmo::sarmata::RecognizeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::techmo::sarmata::RecognizeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::techmo::sarmata::RecognizedPhrase_RecognizedWord* Arena::CreateMaybeMessage< ::techmo::sarmata::RecognizedPhrase_RecognizedWord >(Arena* arena) {
  return Arena::CreateInternal< ::techmo::sarmata::RecognizedPhrase_RecognizedWord >(arena);
}
template<> PROTOBUF_NOINLINE ::techmo::sarmata::RecognizedPhrase* Arena::CreateMaybeMessage< ::techmo::sarmata::RecognizedPhrase >(Arena* arena) {
  return Arena::CreateInternal< ::techmo::sarmata::RecognizedPhrase >(arena);
}
template<> PROTOBUF_NOINLINE ::techmo::sarmata::DefineGrammarRequest* Arena::CreateMaybeMessage< ::techmo::sarmata::DefineGrammarRequest >(Arena* arena) {
  return Arena::CreateInternal< ::techmo::sarmata::DefineGrammarRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::techmo::sarmata::DefineGrammarResponse* Arena::CreateMaybeMessage< ::techmo::sarmata::DefineGrammarResponse >(Arena* arena) {
  return Arena::CreateInternal< ::techmo::sarmata::DefineGrammarResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
