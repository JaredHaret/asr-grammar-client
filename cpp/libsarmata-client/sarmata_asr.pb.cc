// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sarmata_asr.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sarmata_asr.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace techmo {
namespace sarmata {
class RecognizeRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RecognizeRequest>
     _instance;
  const ::techmo::sarmata::RecognitionConfig* config_;
  ::google::protobuf::internal::ArenaStringPtr audio_content_;
} _RecognizeRequest_default_instance_;
class RecognitionConfigDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RecognitionConfig>
     _instance;
  ::google::protobuf::internal::ArenaStringPtr grammar_name_;
  ::google::protobuf::internal::ArenaStringPtr grammar_data_;
} _RecognitionConfig_default_instance_;
class TimeoutSettingsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TimeoutSettings>
     _instance;
} _TimeoutSettings_default_instance_;
class ConfigFieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ConfigField>
     _instance;
} _ConfigField_default_instance_;
class RecognizeResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RecognizeResponse>
     _instance;
} _RecognizeResponse_default_instance_;
class RecognizedPhrase_RecognizedWordDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RecognizedPhrase_RecognizedWord>
     _instance;
} _RecognizedPhrase_RecognizedWord_default_instance_;
class RecognizedPhraseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RecognizedPhrase>
     _instance;
} _RecognizedPhrase_default_instance_;
class DefineGrammarRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DefineGrammarRequest>
     _instance;
} _DefineGrammarRequest_default_instance_;
class DefineGrammarResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DefineGrammarResponse>
     _instance;
} _DefineGrammarResponse_default_instance_;

namespace protobuf_sarmata_5fasr_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(RecognizeRequestDefaultTypeInternal, config_),
  offsetof(RecognizeRequestDefaultTypeInternal, audio_content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeRequest, request_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognitionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognitionConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(RecognitionConfigDefaultTypeInternal, grammar_name_),
  offsetof(RecognitionConfigDefaultTypeInternal, grammar_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognitionConfig, sample_rate_hertz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognitionConfig, max_alternatives_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognitionConfig, no_match_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognitionConfig, timeout_settings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognitionConfig, additional_settings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognitionConfig, grammar_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeoutSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeoutSettings, no_input_timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeoutSettings, recognition_timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeoutSettings, speech_complete_timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeoutSettings, speech_incomplete_timeout_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigField, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigField, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeResponse, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeResponse, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeResponse, event_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeResponse, results_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizedPhrase_RecognizedWord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizedPhrase_RecognizedWord, transcript_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizedPhrase_RecognizedWord, confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizedPhrase_RecognizedWord, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizedPhrase_RecognizedWord, end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizedPhrase_RecognizedWord, logprob_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizedPhrase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizedPhrase, words_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizedPhrase, confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizedPhrase, correct_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizedPhrase, semantic_interpretation_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefineGrammarRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefineGrammarRequest, grammar_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefineGrammarRequest, grammar_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefineGrammarResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefineGrammarResponse, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefineGrammarResponse, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefineGrammarResponse, ok_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(RecognizeRequest)},
  { 8, -1, sizeof(RecognitionConfig)},
  { 21, -1, sizeof(TimeoutSettings)},
  { 30, -1, sizeof(ConfigField)},
  { 37, -1, sizeof(RecognizeResponse)},
  { 46, -1, sizeof(RecognizedPhrase_RecognizedWord)},
  { 56, -1, sizeof(RecognizedPhrase)},
  { 65, -1, sizeof(DefineGrammarRequest)},
  { 72, -1, sizeof(DefineGrammarResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_RecognizeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RecognitionConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TimeoutSettings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConfigField_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RecognizeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RecognizedPhrase_RecognizedWord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RecognizedPhrase_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DefineGrammarRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DefineGrammarResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "sarmata_asr.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _RecognizeRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RecognizeRequest_default_instance_);_RecognitionConfig_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RecognitionConfig_default_instance_);_TimeoutSettings_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TimeoutSettings_default_instance_);_ConfigField_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ConfigField_default_instance_);_RecognizeResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RecognizeResponse_default_instance_);_RecognizedPhrase_RecognizedWord_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RecognizedPhrase_RecognizedWord_default_instance_);_RecognizedPhrase_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RecognizedPhrase_default_instance_);_DefineGrammarRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DefineGrammarRequest_default_instance_);_DefineGrammarResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DefineGrammarResponse_default_instance_);_RecognizeRequest_default_instance_.config_ = const_cast< ::techmo::sarmata::RecognitionConfig*>(
      ::techmo::sarmata::RecognitionConfig::internal_default_instance());
  _RecognizeRequest_default_instance_.audio_content_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _RecognitionConfig_default_instance_.grammar_name_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _RecognitionConfig_default_instance_.grammar_data_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _RecognitionConfig_default_instance_._instance.get_mutable()->timeout_settings_ = const_cast< ::techmo::sarmata::TimeoutSettings*>(
      ::techmo::sarmata::TimeoutSettings::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021sarmata_asr.proto\022\016techmo.sarmata\"k\n\020R"
      "ecognizeRequest\0223\n\006config\030\001 \001(\0132!.techmo"
      ".sarmata.RecognitionConfigH\000\022\027\n\raudio_co"
      "ntent\030\002 \001(\014H\000B\t\n\007request\"\224\002\n\021Recognition"
      "Config\022\026\n\014grammar_name\030\001 \001(\tH\000\022\026\n\014gramma"
      "r_data\030\002 \001(\tH\000\022\031\n\021sample_rate_hertz\030\003 \001("
      "\005\022\030\n\020max_alternatives\030\004 \001(\005\022\032\n\022no_match_"
      "threshold\030\005 \001(\001\0229\n\020timeout_settings\030\006 \001("
      "\0132\037.techmo.sarmata.TimeoutSettings\0228\n\023ad"
      "ditional_settings\030\007 \003(\0132\033.techmo.sarmata"
      ".ConfigFieldB\t\n\007grammar\"\214\001\n\017TimeoutSetti"
      "ngs\022\030\n\020no_input_timeout\030\001 \001(\005\022\033\n\023recogni"
      "tion_timeout\030\002 \001(\005\022\037\n\027speech_complete_ti"
      "meout\030\003 \001(\005\022!\n\031speech_incomplete_timeout"
      "\030\004 \001(\005\")\n\013ConfigField\022\013\n\003key\030\001 \001(\t\022\r\n\005va"
      "lue\030\002 \001(\t\"\231\001\n\021RecognizeResponse\022.\n\006statu"
      "s\030\001 \001(\0162\036.techmo.sarmata.ResponseStatus\022"
      "\r\n\005error\030\002 \001(\t\022\022\n\nevent_time\030\003 \001(\005\0221\n\007re"
      "sults\030\004 \003(\0132 .techmo.sarmata.RecognizedP"
      "hrase\"\377\001\n\020RecognizedPhrase\022>\n\005words\030\001 \003("
      "\0132/.techmo.sarmata.RecognizedPhrase.Reco"
      "gnizedWord\022\022\n\nconfidence\030\002 \001(\001\022\017\n\007correc"
      "t\030\003 \001(\010\022\037\n\027semantic_interpretation\030\004 \001(\t"
      "\032e\n\016RecognizedWord\022\022\n\ntranscript\030\001 \001(\t\022\022"
      "\n\nconfidence\030\002 \001(\001\022\r\n\005start\030\003 \001(\005\022\013\n\003end"
      "\030\004 \001(\005\022\017\n\007logprob\030\005 \001(\001\"B\n\024DefineGrammar"
      "Request\022\024\n\014grammar_name\030\001 \001(\t\022\024\n\014grammar"
      "_data\030\002 \001(\t\"b\n\025DefineGrammarResponse\022.\n\006"
      "status\030\001 \001(\0162\036.techmo.sarmata.ResponseSt"
      "atus\022\r\n\005error\030\002 \001(\t\022\n\n\002ok\030\003 \001(\010*\231\002\n\016Resp"
      "onseStatus\022\t\n\005EMPTY\020\000\022\013\n\007SUCCESS\020\001\022\021\n\rPA"
      "RTIAL_MATCH\020\002\022\014\n\010NO_MATCH\020\003\022\024\n\020NO_INPUT_"
      "TIMEOUT\020\004\022\030\n\024GRAMMAR_LOAD_FAILURE\020\005\022\037\n\033G"
      "RAMMAR_COMPILATION_FAILURE\020\006\022\024\n\020RECOGNIZ"
      "ER_ERROR\020\007\022\033\n\027TOO_MUCH_SPEECH_TIMEOUT\020\010\022"
      "\r\n\tCANCELLED\020\t\022\022\n\016START_OF_INPUT\020\n\022\020\n\014EN"
      "D_OF_AUDIO\020\013\022\025\n\021SEMANTICS_FAILURE\020\0142\271\001\n\003"
      "ASR\022T\n\tRecognize\022 .techmo.sarmata.Recogn"
      "izeRequest\032!.techmo.sarmata.RecognizeRes"
      "ponse(\0010\001\022\\\n\rDefineGrammar\022$.techmo.sarm"
      "ata.DefineGrammarRequest\032%.techmo.sarmat"
      "a.DefineGrammarResponseb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1671);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sarmata_asr.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_sarmata_5fasr_2eproto

const ::google::protobuf::EnumDescriptor* ResponseStatus_descriptor() {
  protobuf_sarmata_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sarmata_5fasr_2eproto::file_level_enum_descriptors[0];
}
bool ResponseStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecognizeRequest::kConfigFieldNumber;
const int RecognizeRequest::kAudioContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecognizeRequest::RecognizeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sarmata_5fasr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.sarmata.RecognizeRequest)
}
RecognizeRequest::RecognizeRequest(const RecognizeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_request();
  switch (from.request_case()) {
    case kConfig: {
      mutable_config()->::techmo::sarmata::RecognitionConfig::MergeFrom(from.config());
      break;
    }
    case kAudioContent: {
      set_audio_content(from.audio_content());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:techmo.sarmata.RecognizeRequest)
}

void RecognizeRequest::SharedCtor() {
  clear_has_request();
  _cached_size_ = 0;
}

RecognizeRequest::~RecognizeRequest() {
  // @@protoc_insertion_point(destructor:techmo.sarmata.RecognizeRequest)
  SharedDtor();
}

void RecognizeRequest::SharedDtor() {
  if (has_request()) {
    clear_request();
  }
}

void RecognizeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecognizeRequest::descriptor() {
  protobuf_sarmata_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sarmata_5fasr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecognizeRequest& RecognizeRequest::default_instance() {
  protobuf_sarmata_5fasr_2eproto::InitDefaults();
  return *internal_default_instance();
}

RecognizeRequest* RecognizeRequest::New(::google::protobuf::Arena* arena) const {
  RecognizeRequest* n = new RecognizeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecognizeRequest::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:techmo.sarmata.RecognizeRequest)
  switch (request_case()) {
    case kConfig: {
      delete request_.config_;
      break;
    }
    case kAudioContent: {
      request_.audio_content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_NOT_SET;
}


void RecognizeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.sarmata.RecognizeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_request();
  _internal_metadata_.Clear();
}

bool RecognizeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:techmo.sarmata.RecognizeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .techmo.sarmata.RecognitionConfig config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes audio_content = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_audio_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:techmo.sarmata.RecognizeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:techmo.sarmata.RecognizeRequest)
  return false;
#undef DO_
}

void RecognizeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:techmo.sarmata.RecognizeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .techmo.sarmata.RecognitionConfig config = 1;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *request_.config_, output);
  }

  // bytes audio_content = 2;
  if (has_audio_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->audio_content(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:techmo.sarmata.RecognizeRequest)
}

::google::protobuf::uint8* RecognizeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:techmo.sarmata.RecognizeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .techmo.sarmata.RecognitionConfig config = 1;
  if (has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *request_.config_, deterministic, target);
  }

  // bytes audio_content = 2;
  if (has_audio_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->audio_content(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.sarmata.RecognizeRequest)
  return target;
}

size_t RecognizeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.sarmata.RecognizeRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (request_case()) {
    // .techmo.sarmata.RecognitionConfig config = 1;
    case kConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_.config_);
      break;
    }
    // bytes audio_content = 2;
    case kAudioContent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->audio_content());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecognizeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.sarmata.RecognizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RecognizeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecognizeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.sarmata.RecognizeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.sarmata.RecognizeRequest)
    MergeFrom(*source);
  }
}

void RecognizeRequest::MergeFrom(const RecognizeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.sarmata.RecognizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.request_case()) {
    case kConfig: {
      mutable_config()->::techmo::sarmata::RecognitionConfig::MergeFrom(from.config());
      break;
    }
    case kAudioContent: {
      set_audio_content(from.audio_content());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
}

void RecognizeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.sarmata.RecognizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecognizeRequest::CopyFrom(const RecognizeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.sarmata.RecognizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognizeRequest::IsInitialized() const {
  return true;
}

void RecognizeRequest::Swap(RecognizeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecognizeRequest::InternalSwap(RecognizeRequest* other) {
  using std::swap;
  swap(request_, other->request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecognizeRequest::GetMetadata() const {
  protobuf_sarmata_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sarmata_5fasr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecognizeRequest

// .techmo.sarmata.RecognitionConfig config = 1;
bool RecognizeRequest::has_config() const {
  return request_case() == kConfig;
}
void RecognizeRequest::set_has_config() {
  _oneof_case_[0] = kConfig;
}
void RecognizeRequest::clear_config() {
  if (has_config()) {
    delete request_.config_;
    clear_has_request();
  }
}
 const ::techmo::sarmata::RecognitionConfig& RecognizeRequest::config() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.RecognizeRequest.config)
  return has_config()
      ? *request_.config_
      : ::techmo::sarmata::RecognitionConfig::default_instance();
}
::techmo::sarmata::RecognitionConfig* RecognizeRequest::mutable_config() {
  if (!has_config()) {
    clear_request();
    set_has_config();
    request_.config_ = new ::techmo::sarmata::RecognitionConfig;
  }
  // @@protoc_insertion_point(field_mutable:techmo.sarmata.RecognizeRequest.config)
  return request_.config_;
}
::techmo::sarmata::RecognitionConfig* RecognizeRequest::release_config() {
  // @@protoc_insertion_point(field_release:techmo.sarmata.RecognizeRequest.config)
  if (has_config()) {
    clear_has_request();
    ::techmo::sarmata::RecognitionConfig* temp = request_.config_;
    request_.config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RecognizeRequest::set_allocated_config(::techmo::sarmata::RecognitionConfig* config) {
  clear_request();
  if (config) {
    set_has_config();
    request_.config_ = config;
  }
  // @@protoc_insertion_point(field_set_allocated:techmo.sarmata.RecognizeRequest.config)
}

// bytes audio_content = 2;
bool RecognizeRequest::has_audio_content() const {
  return request_case() == kAudioContent;
}
void RecognizeRequest::set_has_audio_content() {
  _oneof_case_[0] = kAudioContent;
}
void RecognizeRequest::clear_audio_content() {
  if (has_audio_content()) {
    request_.audio_content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_request();
  }
}
const ::std::string& RecognizeRequest::audio_content() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.RecognizeRequest.audio_content)
  if (has_audio_content()) {
    return request_.audio_content_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void RecognizeRequest::set_audio_content(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognizeRequest.audio_content)
  if (!has_audio_content()) {
    clear_request();
    set_has_audio_content();
    request_.audio_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  request_.audio_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognizeRequest.audio_content)
}
#if LANG_CXX11
void RecognizeRequest::set_audio_content(::std::string&& value) {
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognizeRequest.audio_content)
  if (!has_audio_content()) {
    clear_request();
    set_has_audio_content();
    request_.audio_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  request_.audio_content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:techmo.sarmata.RecognizeRequest.audio_content)
}
#endif
void RecognizeRequest::set_audio_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_audio_content()) {
    clear_request();
    set_has_audio_content();
    request_.audio_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  request_.audio_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:techmo.sarmata.RecognizeRequest.audio_content)
}
void RecognizeRequest::set_audio_content(const void* value, size_t size) {
  if (!has_audio_content()) {
    clear_request();
    set_has_audio_content();
    request_.audio_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  request_.audio_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:techmo.sarmata.RecognizeRequest.audio_content)
}
::std::string* RecognizeRequest::mutable_audio_content() {
  if (!has_audio_content()) {
    clear_request();
    set_has_audio_content();
    request_.audio_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:techmo.sarmata.RecognizeRequest.audio_content)
  return request_.audio_content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RecognizeRequest::release_audio_content() {
  // @@protoc_insertion_point(field_release:techmo.sarmata.RecognizeRequest.audio_content)
  if (has_audio_content()) {
    clear_has_request();
    return request_.audio_content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void RecognizeRequest::set_allocated_audio_content(::std::string* audio_content) {
  if (!has_audio_content()) {
    request_.audio_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_request();
  if (audio_content != NULL) {
    set_has_audio_content();
    request_.audio_content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        audio_content);
  }
  // @@protoc_insertion_point(field_set_allocated:techmo.sarmata.RecognizeRequest.audio_content)
}

bool RecognizeRequest::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
void RecognizeRequest::clear_has_request() {
  _oneof_case_[0] = REQUEST_NOT_SET;
}
RecognizeRequest::RequestCase RecognizeRequest::request_case() const {
  return RecognizeRequest::RequestCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecognitionConfig::kGrammarNameFieldNumber;
const int RecognitionConfig::kGrammarDataFieldNumber;
const int RecognitionConfig::kSampleRateHertzFieldNumber;
const int RecognitionConfig::kMaxAlternativesFieldNumber;
const int RecognitionConfig::kNoMatchThresholdFieldNumber;
const int RecognitionConfig::kTimeoutSettingsFieldNumber;
const int RecognitionConfig::kAdditionalSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecognitionConfig::RecognitionConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sarmata_5fasr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.sarmata.RecognitionConfig)
}
RecognitionConfig::RecognitionConfig(const RecognitionConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      additional_settings_(from.additional_settings_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timeout_settings()) {
    timeout_settings_ = new ::techmo::sarmata::TimeoutSettings(*from.timeout_settings_);
  } else {
    timeout_settings_ = NULL;
  }
  ::memcpy(&sample_rate_hertz_, &from.sample_rate_hertz_,
    static_cast<size_t>(reinterpret_cast<char*>(&no_match_threshold_) -
    reinterpret_cast<char*>(&sample_rate_hertz_)) + sizeof(no_match_threshold_));
  clear_has_grammar();
  switch (from.grammar_case()) {
    case kGrammarName: {
      set_grammar_name(from.grammar_name());
      break;
    }
    case kGrammarData: {
      set_grammar_data(from.grammar_data());
      break;
    }
    case GRAMMAR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:techmo.sarmata.RecognitionConfig)
}

void RecognitionConfig::SharedCtor() {
  ::memset(&timeout_settings_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&no_match_threshold_) -
      reinterpret_cast<char*>(&timeout_settings_)) + sizeof(no_match_threshold_));
  clear_has_grammar();
  _cached_size_ = 0;
}

RecognitionConfig::~RecognitionConfig() {
  // @@protoc_insertion_point(destructor:techmo.sarmata.RecognitionConfig)
  SharedDtor();
}

void RecognitionConfig::SharedDtor() {
  if (this != internal_default_instance()) delete timeout_settings_;
  if (has_grammar()) {
    clear_grammar();
  }
}

void RecognitionConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecognitionConfig::descriptor() {
  protobuf_sarmata_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sarmata_5fasr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecognitionConfig& RecognitionConfig::default_instance() {
  protobuf_sarmata_5fasr_2eproto::InitDefaults();
  return *internal_default_instance();
}

RecognitionConfig* RecognitionConfig::New(::google::protobuf::Arena* arena) const {
  RecognitionConfig* n = new RecognitionConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecognitionConfig::clear_grammar() {
// @@protoc_insertion_point(one_of_clear_start:techmo.sarmata.RecognitionConfig)
  switch (grammar_case()) {
    case kGrammarName: {
      grammar_.grammar_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kGrammarData: {
      grammar_.grammar_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case GRAMMAR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = GRAMMAR_NOT_SET;
}


void RecognitionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.sarmata.RecognitionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_settings_.Clear();
  if (GetArenaNoVirtual() == NULL && timeout_settings_ != NULL) {
    delete timeout_settings_;
  }
  timeout_settings_ = NULL;
  ::memset(&sample_rate_hertz_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&no_match_threshold_) -
      reinterpret_cast<char*>(&sample_rate_hertz_)) + sizeof(no_match_threshold_));
  clear_grammar();
  _internal_metadata_.Clear();
}

bool RecognitionConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:techmo.sarmata.RecognitionConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string grammar_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_grammar_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->grammar_name().data(), static_cast<int>(this->grammar_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "techmo.sarmata.RecognitionConfig.grammar_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string grammar_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_grammar_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->grammar_data().data(), static_cast<int>(this->grammar_data().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "techmo.sarmata.RecognitionConfig.grammar_data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sample_rate_hertz = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sample_rate_hertz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_alternatives = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_alternatives_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double no_match_threshold = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &no_match_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .techmo.sarmata.TimeoutSettings timeout_settings = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timeout_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .techmo.sarmata.ConfigField additional_settings = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_additional_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:techmo.sarmata.RecognitionConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:techmo.sarmata.RecognitionConfig)
  return false;
#undef DO_
}

void RecognitionConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:techmo.sarmata.RecognitionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string grammar_name = 1;
  if (has_grammar_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->grammar_name().data(), static_cast<int>(this->grammar_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "techmo.sarmata.RecognitionConfig.grammar_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->grammar_name(), output);
  }

  // string grammar_data = 2;
  if (has_grammar_data()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->grammar_data().data(), static_cast<int>(this->grammar_data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "techmo.sarmata.RecognitionConfig.grammar_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->grammar_data(), output);
  }

  // int32 sample_rate_hertz = 3;
  if (this->sample_rate_hertz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sample_rate_hertz(), output);
  }

  // int32 max_alternatives = 4;
  if (this->max_alternatives() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_alternatives(), output);
  }

  // double no_match_threshold = 5;
  if (this->no_match_threshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->no_match_threshold(), output);
  }

  // .techmo.sarmata.TimeoutSettings timeout_settings = 6;
  if (this->has_timeout_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->timeout_settings_, output);
  }

  // repeated .techmo.sarmata.ConfigField additional_settings = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->additional_settings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->additional_settings(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:techmo.sarmata.RecognitionConfig)
}

::google::protobuf::uint8* RecognitionConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:techmo.sarmata.RecognitionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string grammar_name = 1;
  if (has_grammar_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->grammar_name().data(), static_cast<int>(this->grammar_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "techmo.sarmata.RecognitionConfig.grammar_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->grammar_name(), target);
  }

  // string grammar_data = 2;
  if (has_grammar_data()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->grammar_data().data(), static_cast<int>(this->grammar_data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "techmo.sarmata.RecognitionConfig.grammar_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->grammar_data(), target);
  }

  // int32 sample_rate_hertz = 3;
  if (this->sample_rate_hertz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sample_rate_hertz(), target);
  }

  // int32 max_alternatives = 4;
  if (this->max_alternatives() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_alternatives(), target);
  }

  // double no_match_threshold = 5;
  if (this->no_match_threshold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->no_match_threshold(), target);
  }

  // .techmo.sarmata.TimeoutSettings timeout_settings = 6;
  if (this->has_timeout_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->timeout_settings_, deterministic, target);
  }

  // repeated .techmo.sarmata.ConfigField additional_settings = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->additional_settings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->additional_settings(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.sarmata.RecognitionConfig)
  return target;
}

size_t RecognitionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.sarmata.RecognitionConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .techmo.sarmata.ConfigField additional_settings = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->additional_settings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->additional_settings(static_cast<int>(i)));
    }
  }

  // .techmo.sarmata.TimeoutSettings timeout_settings = 6;
  if (this->has_timeout_settings()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timeout_settings_);
  }

  // int32 sample_rate_hertz = 3;
  if (this->sample_rate_hertz() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sample_rate_hertz());
  }

  // int32 max_alternatives = 4;
  if (this->max_alternatives() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_alternatives());
  }

  // double no_match_threshold = 5;
  if (this->no_match_threshold() != 0) {
    total_size += 1 + 8;
  }

  switch (grammar_case()) {
    // string grammar_name = 1;
    case kGrammarName: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->grammar_name());
      break;
    }
    // string grammar_data = 2;
    case kGrammarData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->grammar_data());
      break;
    }
    case GRAMMAR_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecognitionConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.sarmata.RecognitionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RecognitionConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecognitionConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.sarmata.RecognitionConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.sarmata.RecognitionConfig)
    MergeFrom(*source);
  }
}

void RecognitionConfig::MergeFrom(const RecognitionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.sarmata.RecognitionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_settings_.MergeFrom(from.additional_settings_);
  if (from.has_timeout_settings()) {
    mutable_timeout_settings()->::techmo::sarmata::TimeoutSettings::MergeFrom(from.timeout_settings());
  }
  if (from.sample_rate_hertz() != 0) {
    set_sample_rate_hertz(from.sample_rate_hertz());
  }
  if (from.max_alternatives() != 0) {
    set_max_alternatives(from.max_alternatives());
  }
  if (from.no_match_threshold() != 0) {
    set_no_match_threshold(from.no_match_threshold());
  }
  switch (from.grammar_case()) {
    case kGrammarName: {
      set_grammar_name(from.grammar_name());
      break;
    }
    case kGrammarData: {
      set_grammar_data(from.grammar_data());
      break;
    }
    case GRAMMAR_NOT_SET: {
      break;
    }
  }
}

void RecognitionConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.sarmata.RecognitionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecognitionConfig::CopyFrom(const RecognitionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.sarmata.RecognitionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognitionConfig::IsInitialized() const {
  return true;
}

void RecognitionConfig::Swap(RecognitionConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecognitionConfig::InternalSwap(RecognitionConfig* other) {
  using std::swap;
  additional_settings_.InternalSwap(&other->additional_settings_);
  swap(timeout_settings_, other->timeout_settings_);
  swap(sample_rate_hertz_, other->sample_rate_hertz_);
  swap(max_alternatives_, other->max_alternatives_);
  swap(no_match_threshold_, other->no_match_threshold_);
  swap(grammar_, other->grammar_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecognitionConfig::GetMetadata() const {
  protobuf_sarmata_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sarmata_5fasr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecognitionConfig

// string grammar_name = 1;
bool RecognitionConfig::has_grammar_name() const {
  return grammar_case() == kGrammarName;
}
void RecognitionConfig::set_has_grammar_name() {
  _oneof_case_[0] = kGrammarName;
}
void RecognitionConfig::clear_grammar_name() {
  if (has_grammar_name()) {
    grammar_.grammar_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_grammar();
  }
}
const ::std::string& RecognitionConfig::grammar_name() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.RecognitionConfig.grammar_name)
  if (has_grammar_name()) {
    return grammar_.grammar_name_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void RecognitionConfig::set_grammar_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognitionConfig.grammar_name)
  if (!has_grammar_name()) {
    clear_grammar();
    set_has_grammar_name();
    grammar_.grammar_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  grammar_.grammar_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognitionConfig.grammar_name)
}
#if LANG_CXX11
void RecognitionConfig::set_grammar_name(::std::string&& value) {
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognitionConfig.grammar_name)
  if (!has_grammar_name()) {
    clear_grammar();
    set_has_grammar_name();
    grammar_.grammar_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  grammar_.grammar_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:techmo.sarmata.RecognitionConfig.grammar_name)
}
#endif
void RecognitionConfig::set_grammar_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_grammar_name()) {
    clear_grammar();
    set_has_grammar_name();
    grammar_.grammar_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  grammar_.grammar_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:techmo.sarmata.RecognitionConfig.grammar_name)
}
void RecognitionConfig::set_grammar_name(const char* value, size_t size) {
  if (!has_grammar_name()) {
    clear_grammar();
    set_has_grammar_name();
    grammar_.grammar_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  grammar_.grammar_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:techmo.sarmata.RecognitionConfig.grammar_name)
}
::std::string* RecognitionConfig::mutable_grammar_name() {
  if (!has_grammar_name()) {
    clear_grammar();
    set_has_grammar_name();
    grammar_.grammar_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:techmo.sarmata.RecognitionConfig.grammar_name)
  return grammar_.grammar_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RecognitionConfig::release_grammar_name() {
  // @@protoc_insertion_point(field_release:techmo.sarmata.RecognitionConfig.grammar_name)
  if (has_grammar_name()) {
    clear_has_grammar();
    return grammar_.grammar_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void RecognitionConfig::set_allocated_grammar_name(::std::string* grammar_name) {
  if (!has_grammar_name()) {
    grammar_.grammar_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_grammar();
  if (grammar_name != NULL) {
    set_has_grammar_name();
    grammar_.grammar_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        grammar_name);
  }
  // @@protoc_insertion_point(field_set_allocated:techmo.sarmata.RecognitionConfig.grammar_name)
}

// string grammar_data = 2;
bool RecognitionConfig::has_grammar_data() const {
  return grammar_case() == kGrammarData;
}
void RecognitionConfig::set_has_grammar_data() {
  _oneof_case_[0] = kGrammarData;
}
void RecognitionConfig::clear_grammar_data() {
  if (has_grammar_data()) {
    grammar_.grammar_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_grammar();
  }
}
const ::std::string& RecognitionConfig::grammar_data() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.RecognitionConfig.grammar_data)
  if (has_grammar_data()) {
    return grammar_.grammar_data_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void RecognitionConfig::set_grammar_data(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognitionConfig.grammar_data)
  if (!has_grammar_data()) {
    clear_grammar();
    set_has_grammar_data();
    grammar_.grammar_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  grammar_.grammar_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognitionConfig.grammar_data)
}
#if LANG_CXX11
void RecognitionConfig::set_grammar_data(::std::string&& value) {
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognitionConfig.grammar_data)
  if (!has_grammar_data()) {
    clear_grammar();
    set_has_grammar_data();
    grammar_.grammar_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  grammar_.grammar_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:techmo.sarmata.RecognitionConfig.grammar_data)
}
#endif
void RecognitionConfig::set_grammar_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_grammar_data()) {
    clear_grammar();
    set_has_grammar_data();
    grammar_.grammar_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  grammar_.grammar_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:techmo.sarmata.RecognitionConfig.grammar_data)
}
void RecognitionConfig::set_grammar_data(const char* value, size_t size) {
  if (!has_grammar_data()) {
    clear_grammar();
    set_has_grammar_data();
    grammar_.grammar_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  grammar_.grammar_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:techmo.sarmata.RecognitionConfig.grammar_data)
}
::std::string* RecognitionConfig::mutable_grammar_data() {
  if (!has_grammar_data()) {
    clear_grammar();
    set_has_grammar_data();
    grammar_.grammar_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:techmo.sarmata.RecognitionConfig.grammar_data)
  return grammar_.grammar_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RecognitionConfig::release_grammar_data() {
  // @@protoc_insertion_point(field_release:techmo.sarmata.RecognitionConfig.grammar_data)
  if (has_grammar_data()) {
    clear_has_grammar();
    return grammar_.grammar_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void RecognitionConfig::set_allocated_grammar_data(::std::string* grammar_data) {
  if (!has_grammar_data()) {
    grammar_.grammar_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_grammar();
  if (grammar_data != NULL) {
    set_has_grammar_data();
    grammar_.grammar_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        grammar_data);
  }
  // @@protoc_insertion_point(field_set_allocated:techmo.sarmata.RecognitionConfig.grammar_data)
}

// int32 sample_rate_hertz = 3;
void RecognitionConfig::clear_sample_rate_hertz() {
  sample_rate_hertz_ = 0;
}
::google::protobuf::int32 RecognitionConfig::sample_rate_hertz() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.RecognitionConfig.sample_rate_hertz)
  return sample_rate_hertz_;
}
void RecognitionConfig::set_sample_rate_hertz(::google::protobuf::int32 value) {
  
  sample_rate_hertz_ = value;
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognitionConfig.sample_rate_hertz)
}

// int32 max_alternatives = 4;
void RecognitionConfig::clear_max_alternatives() {
  max_alternatives_ = 0;
}
::google::protobuf::int32 RecognitionConfig::max_alternatives() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.RecognitionConfig.max_alternatives)
  return max_alternatives_;
}
void RecognitionConfig::set_max_alternatives(::google::protobuf::int32 value) {
  
  max_alternatives_ = value;
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognitionConfig.max_alternatives)
}

// double no_match_threshold = 5;
void RecognitionConfig::clear_no_match_threshold() {
  no_match_threshold_ = 0;
}
double RecognitionConfig::no_match_threshold() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.RecognitionConfig.no_match_threshold)
  return no_match_threshold_;
}
void RecognitionConfig::set_no_match_threshold(double value) {
  
  no_match_threshold_ = value;
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognitionConfig.no_match_threshold)
}

// .techmo.sarmata.TimeoutSettings timeout_settings = 6;
bool RecognitionConfig::has_timeout_settings() const {
  return this != internal_default_instance() && timeout_settings_ != NULL;
}
void RecognitionConfig::clear_timeout_settings() {
  if (GetArenaNoVirtual() == NULL && timeout_settings_ != NULL) delete timeout_settings_;
  timeout_settings_ = NULL;
}
const ::techmo::sarmata::TimeoutSettings& RecognitionConfig::timeout_settings() const {
  const ::techmo::sarmata::TimeoutSettings* p = timeout_settings_;
  // @@protoc_insertion_point(field_get:techmo.sarmata.RecognitionConfig.timeout_settings)
  return p != NULL ? *p : *reinterpret_cast<const ::techmo::sarmata::TimeoutSettings*>(
      &::techmo::sarmata::_TimeoutSettings_default_instance_);
}
::techmo::sarmata::TimeoutSettings* RecognitionConfig::mutable_timeout_settings() {
  
  if (timeout_settings_ == NULL) {
    timeout_settings_ = new ::techmo::sarmata::TimeoutSettings;
  }
  // @@protoc_insertion_point(field_mutable:techmo.sarmata.RecognitionConfig.timeout_settings)
  return timeout_settings_;
}
::techmo::sarmata::TimeoutSettings* RecognitionConfig::release_timeout_settings() {
  // @@protoc_insertion_point(field_release:techmo.sarmata.RecognitionConfig.timeout_settings)
  
  ::techmo::sarmata::TimeoutSettings* temp = timeout_settings_;
  timeout_settings_ = NULL;
  return temp;
}
void RecognitionConfig::set_allocated_timeout_settings(::techmo::sarmata::TimeoutSettings* timeout_settings) {
  delete timeout_settings_;
  timeout_settings_ = timeout_settings;
  if (timeout_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:techmo.sarmata.RecognitionConfig.timeout_settings)
}

// repeated .techmo.sarmata.ConfigField additional_settings = 7;
int RecognitionConfig::additional_settings_size() const {
  return additional_settings_.size();
}
void RecognitionConfig::clear_additional_settings() {
  additional_settings_.Clear();
}
const ::techmo::sarmata::ConfigField& RecognitionConfig::additional_settings(int index) const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.RecognitionConfig.additional_settings)
  return additional_settings_.Get(index);
}
::techmo::sarmata::ConfigField* RecognitionConfig::mutable_additional_settings(int index) {
  // @@protoc_insertion_point(field_mutable:techmo.sarmata.RecognitionConfig.additional_settings)
  return additional_settings_.Mutable(index);
}
::techmo::sarmata::ConfigField* RecognitionConfig::add_additional_settings() {
  // @@protoc_insertion_point(field_add:techmo.sarmata.RecognitionConfig.additional_settings)
  return additional_settings_.Add();
}
::google::protobuf::RepeatedPtrField< ::techmo::sarmata::ConfigField >*
RecognitionConfig::mutable_additional_settings() {
  // @@protoc_insertion_point(field_mutable_list:techmo.sarmata.RecognitionConfig.additional_settings)
  return &additional_settings_;
}
const ::google::protobuf::RepeatedPtrField< ::techmo::sarmata::ConfigField >&
RecognitionConfig::additional_settings() const {
  // @@protoc_insertion_point(field_list:techmo.sarmata.RecognitionConfig.additional_settings)
  return additional_settings_;
}

bool RecognitionConfig::has_grammar() const {
  return grammar_case() != GRAMMAR_NOT_SET;
}
void RecognitionConfig::clear_has_grammar() {
  _oneof_case_[0] = GRAMMAR_NOT_SET;
}
RecognitionConfig::GrammarCase RecognitionConfig::grammar_case() const {
  return RecognitionConfig::GrammarCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeoutSettings::kNoInputTimeoutFieldNumber;
const int TimeoutSettings::kRecognitionTimeoutFieldNumber;
const int TimeoutSettings::kSpeechCompleteTimeoutFieldNumber;
const int TimeoutSettings::kSpeechIncompleteTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeoutSettings::TimeoutSettings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sarmata_5fasr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.sarmata.TimeoutSettings)
}
TimeoutSettings::TimeoutSettings(const TimeoutSettings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&no_input_timeout_, &from.no_input_timeout_,
    static_cast<size_t>(reinterpret_cast<char*>(&speech_incomplete_timeout_) -
    reinterpret_cast<char*>(&no_input_timeout_)) + sizeof(speech_incomplete_timeout_));
  // @@protoc_insertion_point(copy_constructor:techmo.sarmata.TimeoutSettings)
}

void TimeoutSettings::SharedCtor() {
  ::memset(&no_input_timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speech_incomplete_timeout_) -
      reinterpret_cast<char*>(&no_input_timeout_)) + sizeof(speech_incomplete_timeout_));
  _cached_size_ = 0;
}

TimeoutSettings::~TimeoutSettings() {
  // @@protoc_insertion_point(destructor:techmo.sarmata.TimeoutSettings)
  SharedDtor();
}

void TimeoutSettings::SharedDtor() {
}

void TimeoutSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeoutSettings::descriptor() {
  protobuf_sarmata_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sarmata_5fasr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TimeoutSettings& TimeoutSettings::default_instance() {
  protobuf_sarmata_5fasr_2eproto::InitDefaults();
  return *internal_default_instance();
}

TimeoutSettings* TimeoutSettings::New(::google::protobuf::Arena* arena) const {
  TimeoutSettings* n = new TimeoutSettings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimeoutSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.sarmata.TimeoutSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&no_input_timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speech_incomplete_timeout_) -
      reinterpret_cast<char*>(&no_input_timeout_)) + sizeof(speech_incomplete_timeout_));
  _internal_metadata_.Clear();
}

bool TimeoutSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:techmo.sarmata.TimeoutSettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 no_input_timeout = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &no_input_timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 recognition_timeout = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recognition_timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 speech_complete_timeout = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speech_complete_timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 speech_incomplete_timeout = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speech_incomplete_timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:techmo.sarmata.TimeoutSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:techmo.sarmata.TimeoutSettings)
  return false;
#undef DO_
}

void TimeoutSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:techmo.sarmata.TimeoutSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 no_input_timeout = 1;
  if (this->no_input_timeout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->no_input_timeout(), output);
  }

  // int32 recognition_timeout = 2;
  if (this->recognition_timeout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->recognition_timeout(), output);
  }

  // int32 speech_complete_timeout = 3;
  if (this->speech_complete_timeout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->speech_complete_timeout(), output);
  }

  // int32 speech_incomplete_timeout = 4;
  if (this->speech_incomplete_timeout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->speech_incomplete_timeout(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:techmo.sarmata.TimeoutSettings)
}

::google::protobuf::uint8* TimeoutSettings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:techmo.sarmata.TimeoutSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 no_input_timeout = 1;
  if (this->no_input_timeout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->no_input_timeout(), target);
  }

  // int32 recognition_timeout = 2;
  if (this->recognition_timeout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->recognition_timeout(), target);
  }

  // int32 speech_complete_timeout = 3;
  if (this->speech_complete_timeout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->speech_complete_timeout(), target);
  }

  // int32 speech_incomplete_timeout = 4;
  if (this->speech_incomplete_timeout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->speech_incomplete_timeout(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.sarmata.TimeoutSettings)
  return target;
}

size_t TimeoutSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.sarmata.TimeoutSettings)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 no_input_timeout = 1;
  if (this->no_input_timeout() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->no_input_timeout());
  }

  // int32 recognition_timeout = 2;
  if (this->recognition_timeout() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->recognition_timeout());
  }

  // int32 speech_complete_timeout = 3;
  if (this->speech_complete_timeout() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->speech_complete_timeout());
  }

  // int32 speech_incomplete_timeout = 4;
  if (this->speech_incomplete_timeout() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->speech_incomplete_timeout());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeoutSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.sarmata.TimeoutSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeoutSettings* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimeoutSettings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.sarmata.TimeoutSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.sarmata.TimeoutSettings)
    MergeFrom(*source);
  }
}

void TimeoutSettings::MergeFrom(const TimeoutSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.sarmata.TimeoutSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.no_input_timeout() != 0) {
    set_no_input_timeout(from.no_input_timeout());
  }
  if (from.recognition_timeout() != 0) {
    set_recognition_timeout(from.recognition_timeout());
  }
  if (from.speech_complete_timeout() != 0) {
    set_speech_complete_timeout(from.speech_complete_timeout());
  }
  if (from.speech_incomplete_timeout() != 0) {
    set_speech_incomplete_timeout(from.speech_incomplete_timeout());
  }
}

void TimeoutSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.sarmata.TimeoutSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeoutSettings::CopyFrom(const TimeoutSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.sarmata.TimeoutSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeoutSettings::IsInitialized() const {
  return true;
}

void TimeoutSettings::Swap(TimeoutSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeoutSettings::InternalSwap(TimeoutSettings* other) {
  using std::swap;
  swap(no_input_timeout_, other->no_input_timeout_);
  swap(recognition_timeout_, other->recognition_timeout_);
  swap(speech_complete_timeout_, other->speech_complete_timeout_);
  swap(speech_incomplete_timeout_, other->speech_incomplete_timeout_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimeoutSettings::GetMetadata() const {
  protobuf_sarmata_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sarmata_5fasr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimeoutSettings

// int32 no_input_timeout = 1;
void TimeoutSettings::clear_no_input_timeout() {
  no_input_timeout_ = 0;
}
::google::protobuf::int32 TimeoutSettings::no_input_timeout() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.TimeoutSettings.no_input_timeout)
  return no_input_timeout_;
}
void TimeoutSettings::set_no_input_timeout(::google::protobuf::int32 value) {
  
  no_input_timeout_ = value;
  // @@protoc_insertion_point(field_set:techmo.sarmata.TimeoutSettings.no_input_timeout)
}

// int32 recognition_timeout = 2;
void TimeoutSettings::clear_recognition_timeout() {
  recognition_timeout_ = 0;
}
::google::protobuf::int32 TimeoutSettings::recognition_timeout() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.TimeoutSettings.recognition_timeout)
  return recognition_timeout_;
}
void TimeoutSettings::set_recognition_timeout(::google::protobuf::int32 value) {
  
  recognition_timeout_ = value;
  // @@protoc_insertion_point(field_set:techmo.sarmata.TimeoutSettings.recognition_timeout)
}

// int32 speech_complete_timeout = 3;
void TimeoutSettings::clear_speech_complete_timeout() {
  speech_complete_timeout_ = 0;
}
::google::protobuf::int32 TimeoutSettings::speech_complete_timeout() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.TimeoutSettings.speech_complete_timeout)
  return speech_complete_timeout_;
}
void TimeoutSettings::set_speech_complete_timeout(::google::protobuf::int32 value) {
  
  speech_complete_timeout_ = value;
  // @@protoc_insertion_point(field_set:techmo.sarmata.TimeoutSettings.speech_complete_timeout)
}

// int32 speech_incomplete_timeout = 4;
void TimeoutSettings::clear_speech_incomplete_timeout() {
  speech_incomplete_timeout_ = 0;
}
::google::protobuf::int32 TimeoutSettings::speech_incomplete_timeout() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.TimeoutSettings.speech_incomplete_timeout)
  return speech_incomplete_timeout_;
}
void TimeoutSettings::set_speech_incomplete_timeout(::google::protobuf::int32 value) {
  
  speech_incomplete_timeout_ = value;
  // @@protoc_insertion_point(field_set:techmo.sarmata.TimeoutSettings.speech_incomplete_timeout)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigField::kKeyFieldNumber;
const int ConfigField::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigField::ConfigField()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sarmata_5fasr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.sarmata.ConfigField)
}
ConfigField::ConfigField(const ConfigField& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:techmo.sarmata.ConfigField)
}

void ConfigField::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ConfigField::~ConfigField() {
  // @@protoc_insertion_point(destructor:techmo.sarmata.ConfigField)
  SharedDtor();
}

void ConfigField::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigField::descriptor() {
  protobuf_sarmata_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sarmata_5fasr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigField& ConfigField::default_instance() {
  protobuf_sarmata_5fasr_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConfigField* ConfigField::New(::google::protobuf::Arena* arena) const {
  ConfigField* n = new ConfigField;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConfigField::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.sarmata.ConfigField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ConfigField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:techmo.sarmata.ConfigField)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "techmo.sarmata.ConfigField.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "techmo.sarmata.ConfigField.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:techmo.sarmata.ConfigField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:techmo.sarmata.ConfigField)
  return false;
#undef DO_
}

void ConfigField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:techmo.sarmata.ConfigField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "techmo.sarmata.ConfigField.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "techmo.sarmata.ConfigField.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:techmo.sarmata.ConfigField)
}

::google::protobuf::uint8* ConfigField::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:techmo.sarmata.ConfigField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "techmo.sarmata.ConfigField.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "techmo.sarmata.ConfigField.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.sarmata.ConfigField)
  return target;
}

size_t ConfigField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.sarmata.ConfigField)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigField::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.sarmata.ConfigField)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigField* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigField>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.sarmata.ConfigField)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.sarmata.ConfigField)
    MergeFrom(*source);
  }
}

void ConfigField::MergeFrom(const ConfigField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.sarmata.ConfigField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void ConfigField::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.sarmata.ConfigField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigField::CopyFrom(const ConfigField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.sarmata.ConfigField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigField::IsInitialized() const {
  return true;
}

void ConfigField::Swap(ConfigField* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfigField::InternalSwap(ConfigField* other) {
  using std::swap;
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConfigField::GetMetadata() const {
  protobuf_sarmata_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sarmata_5fasr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConfigField

// string key = 1;
void ConfigField::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ConfigField::key() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.ConfigField.key)
  return key_.GetNoArena();
}
void ConfigField::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:techmo.sarmata.ConfigField.key)
}
#if LANG_CXX11
void ConfigField::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:techmo.sarmata.ConfigField.key)
}
#endif
void ConfigField::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:techmo.sarmata.ConfigField.key)
}
void ConfigField::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:techmo.sarmata.ConfigField.key)
}
::std::string* ConfigField::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:techmo.sarmata.ConfigField.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConfigField::release_key() {
  // @@protoc_insertion_point(field_release:techmo.sarmata.ConfigField.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConfigField::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:techmo.sarmata.ConfigField.key)
}

// string value = 2;
void ConfigField::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ConfigField::value() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.ConfigField.value)
  return value_.GetNoArena();
}
void ConfigField::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:techmo.sarmata.ConfigField.value)
}
#if LANG_CXX11
void ConfigField::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:techmo.sarmata.ConfigField.value)
}
#endif
void ConfigField::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:techmo.sarmata.ConfigField.value)
}
void ConfigField::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:techmo.sarmata.ConfigField.value)
}
::std::string* ConfigField::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:techmo.sarmata.ConfigField.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConfigField::release_value() {
  // @@protoc_insertion_point(field_release:techmo.sarmata.ConfigField.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConfigField::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:techmo.sarmata.ConfigField.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecognizeResponse::kStatusFieldNumber;
const int RecognizeResponse::kErrorFieldNumber;
const int RecognizeResponse::kEventTimeFieldNumber;
const int RecognizeResponse::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecognizeResponse::RecognizeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sarmata_5fasr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.sarmata.RecognizeResponse)
}
RecognizeResponse::RecognizeResponse(const RecognizeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      results_(from.results_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error().size() > 0) {
    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_time_) -
    reinterpret_cast<char*>(&status_)) + sizeof(event_time_));
  // @@protoc_insertion_point(copy_constructor:techmo.sarmata.RecognizeResponse)
}

void RecognizeResponse::SharedCtor() {
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_time_) -
      reinterpret_cast<char*>(&status_)) + sizeof(event_time_));
  _cached_size_ = 0;
}

RecognizeResponse::~RecognizeResponse() {
  // @@protoc_insertion_point(destructor:techmo.sarmata.RecognizeResponse)
  SharedDtor();
}

void RecognizeResponse::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RecognizeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecognizeResponse::descriptor() {
  protobuf_sarmata_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sarmata_5fasr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecognizeResponse& RecognizeResponse::default_instance() {
  protobuf_sarmata_5fasr_2eproto::InitDefaults();
  return *internal_default_instance();
}

RecognizeResponse* RecognizeResponse::New(::google::protobuf::Arena* arena) const {
  RecognizeResponse* n = new RecognizeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecognizeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.sarmata.RecognizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_time_) -
      reinterpret_cast<char*>(&status_)) + sizeof(event_time_));
  _internal_metadata_.Clear();
}

bool RecognizeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:techmo.sarmata.RecognizeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .techmo.sarmata.ResponseStatus status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::techmo::sarmata::ResponseStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), static_cast<int>(this->error().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "techmo.sarmata.RecognizeResponse.error"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 event_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .techmo.sarmata.RecognizedPhrase results = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:techmo.sarmata.RecognizeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:techmo.sarmata.RecognizeResponse)
  return false;
#undef DO_
}

void RecognizeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:techmo.sarmata.RecognizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .techmo.sarmata.ResponseStatus status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "techmo.sarmata.RecognizeResponse.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  // int32 event_time = 3;
  if (this->event_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->event_time(), output);
  }

  // repeated .techmo.sarmata.RecognizedPhrase results = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->results(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:techmo.sarmata.RecognizeResponse)
}

::google::protobuf::uint8* RecognizeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:techmo.sarmata.RecognizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .techmo.sarmata.ResponseStatus status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "techmo.sarmata.RecognizeResponse.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  // int32 event_time = 3;
  if (this->event_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->event_time(), target);
  }

  // repeated .techmo.sarmata.RecognizedPhrase results = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->results(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.sarmata.RecognizeResponse)
  return target;
}

size_t RecognizeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.sarmata.RecognizeResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .techmo.sarmata.RecognizedPhrase results = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->results(static_cast<int>(i)));
    }
  }

  // string error = 2;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  // .techmo.sarmata.ResponseStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // int32 event_time = 3;
  if (this->event_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->event_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecognizeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.sarmata.RecognizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RecognizeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecognizeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.sarmata.RecognizeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.sarmata.RecognizeResponse)
    MergeFrom(*source);
  }
}

void RecognizeResponse::MergeFrom(const RecognizeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.sarmata.RecognizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.event_time() != 0) {
    set_event_time(from.event_time());
  }
}

void RecognizeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.sarmata.RecognizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecognizeResponse::CopyFrom(const RecognizeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.sarmata.RecognizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognizeResponse::IsInitialized() const {
  return true;
}

void RecognizeResponse::Swap(RecognizeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecognizeResponse::InternalSwap(RecognizeResponse* other) {
  using std::swap;
  results_.InternalSwap(&other->results_);
  error_.Swap(&other->error_);
  swap(status_, other->status_);
  swap(event_time_, other->event_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecognizeResponse::GetMetadata() const {
  protobuf_sarmata_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sarmata_5fasr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecognizeResponse

// .techmo.sarmata.ResponseStatus status = 1;
void RecognizeResponse::clear_status() {
  status_ = 0;
}
::techmo::sarmata::ResponseStatus RecognizeResponse::status() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.RecognizeResponse.status)
  return static_cast< ::techmo::sarmata::ResponseStatus >(status_);
}
void RecognizeResponse::set_status(::techmo::sarmata::ResponseStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognizeResponse.status)
}

// string error = 2;
void RecognizeResponse::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RecognizeResponse::error() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.RecognizeResponse.error)
  return error_.GetNoArena();
}
void RecognizeResponse::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognizeResponse.error)
}
#if LANG_CXX11
void RecognizeResponse::set_error(::std::string&& value) {
  
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:techmo.sarmata.RecognizeResponse.error)
}
#endif
void RecognizeResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:techmo.sarmata.RecognizeResponse.error)
}
void RecognizeResponse::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:techmo.sarmata.RecognizeResponse.error)
}
::std::string* RecognizeResponse::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:techmo.sarmata.RecognizeResponse.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RecognizeResponse::release_error() {
  // @@protoc_insertion_point(field_release:techmo.sarmata.RecognizeResponse.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RecognizeResponse::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:techmo.sarmata.RecognizeResponse.error)
}

// int32 event_time = 3;
void RecognizeResponse::clear_event_time() {
  event_time_ = 0;
}
::google::protobuf::int32 RecognizeResponse::event_time() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.RecognizeResponse.event_time)
  return event_time_;
}
void RecognizeResponse::set_event_time(::google::protobuf::int32 value) {
  
  event_time_ = value;
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognizeResponse.event_time)
}

// repeated .techmo.sarmata.RecognizedPhrase results = 4;
int RecognizeResponse::results_size() const {
  return results_.size();
}
void RecognizeResponse::clear_results() {
  results_.Clear();
}
const ::techmo::sarmata::RecognizedPhrase& RecognizeResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.RecognizeResponse.results)
  return results_.Get(index);
}
::techmo::sarmata::RecognizedPhrase* RecognizeResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:techmo.sarmata.RecognizeResponse.results)
  return results_.Mutable(index);
}
::techmo::sarmata::RecognizedPhrase* RecognizeResponse::add_results() {
  // @@protoc_insertion_point(field_add:techmo.sarmata.RecognizeResponse.results)
  return results_.Add();
}
::google::protobuf::RepeatedPtrField< ::techmo::sarmata::RecognizedPhrase >*
RecognizeResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:techmo.sarmata.RecognizeResponse.results)
  return &results_;
}
const ::google::protobuf::RepeatedPtrField< ::techmo::sarmata::RecognizedPhrase >&
RecognizeResponse::results() const {
  // @@protoc_insertion_point(field_list:techmo.sarmata.RecognizeResponse.results)
  return results_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecognizedPhrase_RecognizedWord::kTranscriptFieldNumber;
const int RecognizedPhrase_RecognizedWord::kConfidenceFieldNumber;
const int RecognizedPhrase_RecognizedWord::kStartFieldNumber;
const int RecognizedPhrase_RecognizedWord::kEndFieldNumber;
const int RecognizedPhrase_RecognizedWord::kLogprobFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecognizedPhrase_RecognizedWord::RecognizedPhrase_RecognizedWord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sarmata_5fasr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.sarmata.RecognizedPhrase.RecognizedWord)
}
RecognizedPhrase_RecognizedWord::RecognizedPhrase_RecognizedWord(const RecognizedPhrase_RecognizedWord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  transcript_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.transcript().size() > 0) {
    transcript_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transcript_);
  }
  ::memcpy(&confidence_, &from.confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&logprob_) -
    reinterpret_cast<char*>(&confidence_)) + sizeof(logprob_));
  // @@protoc_insertion_point(copy_constructor:techmo.sarmata.RecognizedPhrase.RecognizedWord)
}

void RecognizedPhrase_RecognizedWord::SharedCtor() {
  transcript_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logprob_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(logprob_));
  _cached_size_ = 0;
}

RecognizedPhrase_RecognizedWord::~RecognizedPhrase_RecognizedWord() {
  // @@protoc_insertion_point(destructor:techmo.sarmata.RecognizedPhrase.RecognizedWord)
  SharedDtor();
}

void RecognizedPhrase_RecognizedWord::SharedDtor() {
  transcript_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RecognizedPhrase_RecognizedWord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecognizedPhrase_RecognizedWord::descriptor() {
  protobuf_sarmata_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sarmata_5fasr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecognizedPhrase_RecognizedWord& RecognizedPhrase_RecognizedWord::default_instance() {
  protobuf_sarmata_5fasr_2eproto::InitDefaults();
  return *internal_default_instance();
}

RecognizedPhrase_RecognizedWord* RecognizedPhrase_RecognizedWord::New(::google::protobuf::Arena* arena) const {
  RecognizedPhrase_RecognizedWord* n = new RecognizedPhrase_RecognizedWord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecognizedPhrase_RecognizedWord::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.sarmata.RecognizedPhrase.RecognizedWord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transcript_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logprob_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(logprob_));
  _internal_metadata_.Clear();
}

bool RecognizedPhrase_RecognizedWord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:techmo.sarmata.RecognizedPhrase.RecognizedWord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string transcript = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transcript()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->transcript().data(), static_cast<int>(this->transcript().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "techmo.sarmata.RecognizedPhrase.RecognizedWord.transcript"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 start = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 end = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double logprob = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &logprob_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:techmo.sarmata.RecognizedPhrase.RecognizedWord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:techmo.sarmata.RecognizedPhrase.RecognizedWord)
  return false;
#undef DO_
}

void RecognizedPhrase_RecognizedWord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:techmo.sarmata.RecognizedPhrase.RecognizedWord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string transcript = 1;
  if (this->transcript().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transcript().data(), static_cast<int>(this->transcript().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "techmo.sarmata.RecognizedPhrase.RecognizedWord.transcript");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->transcript(), output);
  }

  // double confidence = 2;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->confidence(), output);
  }

  // int32 start = 3;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->start(), output);
  }

  // int32 end = 4;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->end(), output);
  }

  // double logprob = 5;
  if (this->logprob() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->logprob(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:techmo.sarmata.RecognizedPhrase.RecognizedWord)
}

::google::protobuf::uint8* RecognizedPhrase_RecognizedWord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:techmo.sarmata.RecognizedPhrase.RecognizedWord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string transcript = 1;
  if (this->transcript().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transcript().data(), static_cast<int>(this->transcript().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "techmo.sarmata.RecognizedPhrase.RecognizedWord.transcript");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->transcript(), target);
  }

  // double confidence = 2;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->confidence(), target);
  }

  // int32 start = 3;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->start(), target);
  }

  // int32 end = 4;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->end(), target);
  }

  // double logprob = 5;
  if (this->logprob() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->logprob(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.sarmata.RecognizedPhrase.RecognizedWord)
  return target;
}

size_t RecognizedPhrase_RecognizedWord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.sarmata.RecognizedPhrase.RecognizedWord)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string transcript = 1;
  if (this->transcript().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->transcript());
  }

  // double confidence = 2;
  if (this->confidence() != 0) {
    total_size += 1 + 8;
  }

  // int32 start = 3;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->start());
  }

  // int32 end = 4;
  if (this->end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->end());
  }

  // double logprob = 5;
  if (this->logprob() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecognizedPhrase_RecognizedWord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.sarmata.RecognizedPhrase.RecognizedWord)
  GOOGLE_DCHECK_NE(&from, this);
  const RecognizedPhrase_RecognizedWord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecognizedPhrase_RecognizedWord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.sarmata.RecognizedPhrase.RecognizedWord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.sarmata.RecognizedPhrase.RecognizedWord)
    MergeFrom(*source);
  }
}

void RecognizedPhrase_RecognizedWord::MergeFrom(const RecognizedPhrase_RecognizedWord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.sarmata.RecognizedPhrase.RecognizedWord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.transcript().size() > 0) {

    transcript_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transcript_);
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
  if (from.logprob() != 0) {
    set_logprob(from.logprob());
  }
}

void RecognizedPhrase_RecognizedWord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.sarmata.RecognizedPhrase.RecognizedWord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecognizedPhrase_RecognizedWord::CopyFrom(const RecognizedPhrase_RecognizedWord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.sarmata.RecognizedPhrase.RecognizedWord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognizedPhrase_RecognizedWord::IsInitialized() const {
  return true;
}

void RecognizedPhrase_RecognizedWord::Swap(RecognizedPhrase_RecognizedWord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecognizedPhrase_RecognizedWord::InternalSwap(RecognizedPhrase_RecognizedWord* other) {
  using std::swap;
  transcript_.Swap(&other->transcript_);
  swap(confidence_, other->confidence_);
  swap(start_, other->start_);
  swap(end_, other->end_);
  swap(logprob_, other->logprob_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecognizedPhrase_RecognizedWord::GetMetadata() const {
  protobuf_sarmata_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sarmata_5fasr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecognizedPhrase_RecognizedWord

// string transcript = 1;
void RecognizedPhrase_RecognizedWord::clear_transcript() {
  transcript_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RecognizedPhrase_RecognizedWord::transcript() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.RecognizedPhrase.RecognizedWord.transcript)
  return transcript_.GetNoArena();
}
void RecognizedPhrase_RecognizedWord::set_transcript(const ::std::string& value) {
  
  transcript_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognizedPhrase.RecognizedWord.transcript)
}
#if LANG_CXX11
void RecognizedPhrase_RecognizedWord::set_transcript(::std::string&& value) {
  
  transcript_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:techmo.sarmata.RecognizedPhrase.RecognizedWord.transcript)
}
#endif
void RecognizedPhrase_RecognizedWord::set_transcript(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  transcript_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:techmo.sarmata.RecognizedPhrase.RecognizedWord.transcript)
}
void RecognizedPhrase_RecognizedWord::set_transcript(const char* value, size_t size) {
  
  transcript_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:techmo.sarmata.RecognizedPhrase.RecognizedWord.transcript)
}
::std::string* RecognizedPhrase_RecognizedWord::mutable_transcript() {
  
  // @@protoc_insertion_point(field_mutable:techmo.sarmata.RecognizedPhrase.RecognizedWord.transcript)
  return transcript_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RecognizedPhrase_RecognizedWord::release_transcript() {
  // @@protoc_insertion_point(field_release:techmo.sarmata.RecognizedPhrase.RecognizedWord.transcript)
  
  return transcript_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RecognizedPhrase_RecognizedWord::set_allocated_transcript(::std::string* transcript) {
  if (transcript != NULL) {
    
  } else {
    
  }
  transcript_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transcript);
  // @@protoc_insertion_point(field_set_allocated:techmo.sarmata.RecognizedPhrase.RecognizedWord.transcript)
}

// double confidence = 2;
void RecognizedPhrase_RecognizedWord::clear_confidence() {
  confidence_ = 0;
}
double RecognizedPhrase_RecognizedWord::confidence() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.RecognizedPhrase.RecognizedWord.confidence)
  return confidence_;
}
void RecognizedPhrase_RecognizedWord::set_confidence(double value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognizedPhrase.RecognizedWord.confidence)
}

// int32 start = 3;
void RecognizedPhrase_RecognizedWord::clear_start() {
  start_ = 0;
}
::google::protobuf::int32 RecognizedPhrase_RecognizedWord::start() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.RecognizedPhrase.RecognizedWord.start)
  return start_;
}
void RecognizedPhrase_RecognizedWord::set_start(::google::protobuf::int32 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognizedPhrase.RecognizedWord.start)
}

// int32 end = 4;
void RecognizedPhrase_RecognizedWord::clear_end() {
  end_ = 0;
}
::google::protobuf::int32 RecognizedPhrase_RecognizedWord::end() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.RecognizedPhrase.RecognizedWord.end)
  return end_;
}
void RecognizedPhrase_RecognizedWord::set_end(::google::protobuf::int32 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognizedPhrase.RecognizedWord.end)
}

// double logprob = 5;
void RecognizedPhrase_RecognizedWord::clear_logprob() {
  logprob_ = 0;
}
double RecognizedPhrase_RecognizedWord::logprob() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.RecognizedPhrase.RecognizedWord.logprob)
  return logprob_;
}
void RecognizedPhrase_RecognizedWord::set_logprob(double value) {
  
  logprob_ = value;
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognizedPhrase.RecognizedWord.logprob)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecognizedPhrase::kWordsFieldNumber;
const int RecognizedPhrase::kConfidenceFieldNumber;
const int RecognizedPhrase::kCorrectFieldNumber;
const int RecognizedPhrase::kSemanticInterpretationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecognizedPhrase::RecognizedPhrase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sarmata_5fasr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.sarmata.RecognizedPhrase)
}
RecognizedPhrase::RecognizedPhrase(const RecognizedPhrase& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      words_(from.words_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  semantic_interpretation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.semantic_interpretation().size() > 0) {
    semantic_interpretation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.semantic_interpretation_);
  }
  ::memcpy(&confidence_, &from.confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&correct_) -
    reinterpret_cast<char*>(&confidence_)) + sizeof(correct_));
  // @@protoc_insertion_point(copy_constructor:techmo.sarmata.RecognizedPhrase)
}

void RecognizedPhrase::SharedCtor() {
  semantic_interpretation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&correct_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(correct_));
  _cached_size_ = 0;
}

RecognizedPhrase::~RecognizedPhrase() {
  // @@protoc_insertion_point(destructor:techmo.sarmata.RecognizedPhrase)
  SharedDtor();
}

void RecognizedPhrase::SharedDtor() {
  semantic_interpretation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RecognizedPhrase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecognizedPhrase::descriptor() {
  protobuf_sarmata_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sarmata_5fasr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecognizedPhrase& RecognizedPhrase::default_instance() {
  protobuf_sarmata_5fasr_2eproto::InitDefaults();
  return *internal_default_instance();
}

RecognizedPhrase* RecognizedPhrase::New(::google::protobuf::Arena* arena) const {
  RecognizedPhrase* n = new RecognizedPhrase;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecognizedPhrase::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.sarmata.RecognizedPhrase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  words_.Clear();
  semantic_interpretation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&correct_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(correct_));
  _internal_metadata_.Clear();
}

bool RecognizedPhrase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:techmo.sarmata.RecognizedPhrase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .techmo.sarmata.RecognizedPhrase.RecognizedWord words = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_words()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool correct = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &correct_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string semantic_interpretation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_semantic_interpretation()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->semantic_interpretation().data(), static_cast<int>(this->semantic_interpretation().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "techmo.sarmata.RecognizedPhrase.semantic_interpretation"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:techmo.sarmata.RecognizedPhrase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:techmo.sarmata.RecognizedPhrase)
  return false;
#undef DO_
}

void RecognizedPhrase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:techmo.sarmata.RecognizedPhrase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .techmo.sarmata.RecognizedPhrase.RecognizedWord words = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->words_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->words(static_cast<int>(i)), output);
  }

  // double confidence = 2;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->confidence(), output);
  }

  // bool correct = 3;
  if (this->correct() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->correct(), output);
  }

  // string semantic_interpretation = 4;
  if (this->semantic_interpretation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->semantic_interpretation().data(), static_cast<int>(this->semantic_interpretation().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "techmo.sarmata.RecognizedPhrase.semantic_interpretation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->semantic_interpretation(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:techmo.sarmata.RecognizedPhrase)
}

::google::protobuf::uint8* RecognizedPhrase::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:techmo.sarmata.RecognizedPhrase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .techmo.sarmata.RecognizedPhrase.RecognizedWord words = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->words_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->words(static_cast<int>(i)), deterministic, target);
  }

  // double confidence = 2;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->confidence(), target);
  }

  // bool correct = 3;
  if (this->correct() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->correct(), target);
  }

  // string semantic_interpretation = 4;
  if (this->semantic_interpretation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->semantic_interpretation().data(), static_cast<int>(this->semantic_interpretation().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "techmo.sarmata.RecognizedPhrase.semantic_interpretation");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->semantic_interpretation(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.sarmata.RecognizedPhrase)
  return target;
}

size_t RecognizedPhrase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.sarmata.RecognizedPhrase)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .techmo.sarmata.RecognizedPhrase.RecognizedWord words = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->words_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->words(static_cast<int>(i)));
    }
  }

  // string semantic_interpretation = 4;
  if (this->semantic_interpretation().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->semantic_interpretation());
  }

  // double confidence = 2;
  if (this->confidence() != 0) {
    total_size += 1 + 8;
  }

  // bool correct = 3;
  if (this->correct() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecognizedPhrase::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.sarmata.RecognizedPhrase)
  GOOGLE_DCHECK_NE(&from, this);
  const RecognizedPhrase* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecognizedPhrase>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.sarmata.RecognizedPhrase)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.sarmata.RecognizedPhrase)
    MergeFrom(*source);
  }
}

void RecognizedPhrase::MergeFrom(const RecognizedPhrase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.sarmata.RecognizedPhrase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  words_.MergeFrom(from.words_);
  if (from.semantic_interpretation().size() > 0) {

    semantic_interpretation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.semantic_interpretation_);
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
  if (from.correct() != 0) {
    set_correct(from.correct());
  }
}

void RecognizedPhrase::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.sarmata.RecognizedPhrase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecognizedPhrase::CopyFrom(const RecognizedPhrase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.sarmata.RecognizedPhrase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognizedPhrase::IsInitialized() const {
  return true;
}

void RecognizedPhrase::Swap(RecognizedPhrase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecognizedPhrase::InternalSwap(RecognizedPhrase* other) {
  using std::swap;
  words_.InternalSwap(&other->words_);
  semantic_interpretation_.Swap(&other->semantic_interpretation_);
  swap(confidence_, other->confidence_);
  swap(correct_, other->correct_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecognizedPhrase::GetMetadata() const {
  protobuf_sarmata_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sarmata_5fasr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecognizedPhrase

// repeated .techmo.sarmata.RecognizedPhrase.RecognizedWord words = 1;
int RecognizedPhrase::words_size() const {
  return words_.size();
}
void RecognizedPhrase::clear_words() {
  words_.Clear();
}
const ::techmo::sarmata::RecognizedPhrase_RecognizedWord& RecognizedPhrase::words(int index) const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.RecognizedPhrase.words)
  return words_.Get(index);
}
::techmo::sarmata::RecognizedPhrase_RecognizedWord* RecognizedPhrase::mutable_words(int index) {
  // @@protoc_insertion_point(field_mutable:techmo.sarmata.RecognizedPhrase.words)
  return words_.Mutable(index);
}
::techmo::sarmata::RecognizedPhrase_RecognizedWord* RecognizedPhrase::add_words() {
  // @@protoc_insertion_point(field_add:techmo.sarmata.RecognizedPhrase.words)
  return words_.Add();
}
::google::protobuf::RepeatedPtrField< ::techmo::sarmata::RecognizedPhrase_RecognizedWord >*
RecognizedPhrase::mutable_words() {
  // @@protoc_insertion_point(field_mutable_list:techmo.sarmata.RecognizedPhrase.words)
  return &words_;
}
const ::google::protobuf::RepeatedPtrField< ::techmo::sarmata::RecognizedPhrase_RecognizedWord >&
RecognizedPhrase::words() const {
  // @@protoc_insertion_point(field_list:techmo.sarmata.RecognizedPhrase.words)
  return words_;
}

// double confidence = 2;
void RecognizedPhrase::clear_confidence() {
  confidence_ = 0;
}
double RecognizedPhrase::confidence() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.RecognizedPhrase.confidence)
  return confidence_;
}
void RecognizedPhrase::set_confidence(double value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognizedPhrase.confidence)
}

// bool correct = 3;
void RecognizedPhrase::clear_correct() {
  correct_ = false;
}
bool RecognizedPhrase::correct() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.RecognizedPhrase.correct)
  return correct_;
}
void RecognizedPhrase::set_correct(bool value) {
  
  correct_ = value;
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognizedPhrase.correct)
}

// string semantic_interpretation = 4;
void RecognizedPhrase::clear_semantic_interpretation() {
  semantic_interpretation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RecognizedPhrase::semantic_interpretation() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.RecognizedPhrase.semantic_interpretation)
  return semantic_interpretation_.GetNoArena();
}
void RecognizedPhrase::set_semantic_interpretation(const ::std::string& value) {
  
  semantic_interpretation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:techmo.sarmata.RecognizedPhrase.semantic_interpretation)
}
#if LANG_CXX11
void RecognizedPhrase::set_semantic_interpretation(::std::string&& value) {
  
  semantic_interpretation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:techmo.sarmata.RecognizedPhrase.semantic_interpretation)
}
#endif
void RecognizedPhrase::set_semantic_interpretation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  semantic_interpretation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:techmo.sarmata.RecognizedPhrase.semantic_interpretation)
}
void RecognizedPhrase::set_semantic_interpretation(const char* value, size_t size) {
  
  semantic_interpretation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:techmo.sarmata.RecognizedPhrase.semantic_interpretation)
}
::std::string* RecognizedPhrase::mutable_semantic_interpretation() {
  
  // @@protoc_insertion_point(field_mutable:techmo.sarmata.RecognizedPhrase.semantic_interpretation)
  return semantic_interpretation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RecognizedPhrase::release_semantic_interpretation() {
  // @@protoc_insertion_point(field_release:techmo.sarmata.RecognizedPhrase.semantic_interpretation)
  
  return semantic_interpretation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RecognizedPhrase::set_allocated_semantic_interpretation(::std::string* semantic_interpretation) {
  if (semantic_interpretation != NULL) {
    
  } else {
    
  }
  semantic_interpretation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), semantic_interpretation);
  // @@protoc_insertion_point(field_set_allocated:techmo.sarmata.RecognizedPhrase.semantic_interpretation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DefineGrammarRequest::kGrammarNameFieldNumber;
const int DefineGrammarRequest::kGrammarDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DefineGrammarRequest::DefineGrammarRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sarmata_5fasr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.sarmata.DefineGrammarRequest)
}
DefineGrammarRequest::DefineGrammarRequest(const DefineGrammarRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  grammar_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.grammar_name().size() > 0) {
    grammar_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.grammar_name_);
  }
  grammar_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.grammar_data().size() > 0) {
    grammar_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.grammar_data_);
  }
  // @@protoc_insertion_point(copy_constructor:techmo.sarmata.DefineGrammarRequest)
}

void DefineGrammarRequest::SharedCtor() {
  grammar_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  grammar_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DefineGrammarRequest::~DefineGrammarRequest() {
  // @@protoc_insertion_point(destructor:techmo.sarmata.DefineGrammarRequest)
  SharedDtor();
}

void DefineGrammarRequest::SharedDtor() {
  grammar_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  grammar_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DefineGrammarRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DefineGrammarRequest::descriptor() {
  protobuf_sarmata_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sarmata_5fasr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DefineGrammarRequest& DefineGrammarRequest::default_instance() {
  protobuf_sarmata_5fasr_2eproto::InitDefaults();
  return *internal_default_instance();
}

DefineGrammarRequest* DefineGrammarRequest::New(::google::protobuf::Arena* arena) const {
  DefineGrammarRequest* n = new DefineGrammarRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DefineGrammarRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.sarmata.DefineGrammarRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  grammar_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  grammar_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool DefineGrammarRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:techmo.sarmata.DefineGrammarRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string grammar_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_grammar_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->grammar_name().data(), static_cast<int>(this->grammar_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "techmo.sarmata.DefineGrammarRequest.grammar_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string grammar_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_grammar_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->grammar_data().data(), static_cast<int>(this->grammar_data().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "techmo.sarmata.DefineGrammarRequest.grammar_data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:techmo.sarmata.DefineGrammarRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:techmo.sarmata.DefineGrammarRequest)
  return false;
#undef DO_
}

void DefineGrammarRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:techmo.sarmata.DefineGrammarRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string grammar_name = 1;
  if (this->grammar_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->grammar_name().data(), static_cast<int>(this->grammar_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "techmo.sarmata.DefineGrammarRequest.grammar_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->grammar_name(), output);
  }

  // string grammar_data = 2;
  if (this->grammar_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->grammar_data().data(), static_cast<int>(this->grammar_data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "techmo.sarmata.DefineGrammarRequest.grammar_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->grammar_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:techmo.sarmata.DefineGrammarRequest)
}

::google::protobuf::uint8* DefineGrammarRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:techmo.sarmata.DefineGrammarRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string grammar_name = 1;
  if (this->grammar_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->grammar_name().data(), static_cast<int>(this->grammar_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "techmo.sarmata.DefineGrammarRequest.grammar_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->grammar_name(), target);
  }

  // string grammar_data = 2;
  if (this->grammar_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->grammar_data().data(), static_cast<int>(this->grammar_data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "techmo.sarmata.DefineGrammarRequest.grammar_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->grammar_data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.sarmata.DefineGrammarRequest)
  return target;
}

size_t DefineGrammarRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.sarmata.DefineGrammarRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string grammar_name = 1;
  if (this->grammar_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->grammar_name());
  }

  // string grammar_data = 2;
  if (this->grammar_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->grammar_data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DefineGrammarRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.sarmata.DefineGrammarRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DefineGrammarRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DefineGrammarRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.sarmata.DefineGrammarRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.sarmata.DefineGrammarRequest)
    MergeFrom(*source);
  }
}

void DefineGrammarRequest::MergeFrom(const DefineGrammarRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.sarmata.DefineGrammarRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.grammar_name().size() > 0) {

    grammar_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.grammar_name_);
  }
  if (from.grammar_data().size() > 0) {

    grammar_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.grammar_data_);
  }
}

void DefineGrammarRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.sarmata.DefineGrammarRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DefineGrammarRequest::CopyFrom(const DefineGrammarRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.sarmata.DefineGrammarRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefineGrammarRequest::IsInitialized() const {
  return true;
}

void DefineGrammarRequest::Swap(DefineGrammarRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DefineGrammarRequest::InternalSwap(DefineGrammarRequest* other) {
  using std::swap;
  grammar_name_.Swap(&other->grammar_name_);
  grammar_data_.Swap(&other->grammar_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DefineGrammarRequest::GetMetadata() const {
  protobuf_sarmata_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sarmata_5fasr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DefineGrammarRequest

// string grammar_name = 1;
void DefineGrammarRequest::clear_grammar_name() {
  grammar_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DefineGrammarRequest::grammar_name() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.DefineGrammarRequest.grammar_name)
  return grammar_name_.GetNoArena();
}
void DefineGrammarRequest::set_grammar_name(const ::std::string& value) {
  
  grammar_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:techmo.sarmata.DefineGrammarRequest.grammar_name)
}
#if LANG_CXX11
void DefineGrammarRequest::set_grammar_name(::std::string&& value) {
  
  grammar_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:techmo.sarmata.DefineGrammarRequest.grammar_name)
}
#endif
void DefineGrammarRequest::set_grammar_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  grammar_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:techmo.sarmata.DefineGrammarRequest.grammar_name)
}
void DefineGrammarRequest::set_grammar_name(const char* value, size_t size) {
  
  grammar_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:techmo.sarmata.DefineGrammarRequest.grammar_name)
}
::std::string* DefineGrammarRequest::mutable_grammar_name() {
  
  // @@protoc_insertion_point(field_mutable:techmo.sarmata.DefineGrammarRequest.grammar_name)
  return grammar_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DefineGrammarRequest::release_grammar_name() {
  // @@protoc_insertion_point(field_release:techmo.sarmata.DefineGrammarRequest.grammar_name)
  
  return grammar_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DefineGrammarRequest::set_allocated_grammar_name(::std::string* grammar_name) {
  if (grammar_name != NULL) {
    
  } else {
    
  }
  grammar_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), grammar_name);
  // @@protoc_insertion_point(field_set_allocated:techmo.sarmata.DefineGrammarRequest.grammar_name)
}

// string grammar_data = 2;
void DefineGrammarRequest::clear_grammar_data() {
  grammar_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DefineGrammarRequest::grammar_data() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.DefineGrammarRequest.grammar_data)
  return grammar_data_.GetNoArena();
}
void DefineGrammarRequest::set_grammar_data(const ::std::string& value) {
  
  grammar_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:techmo.sarmata.DefineGrammarRequest.grammar_data)
}
#if LANG_CXX11
void DefineGrammarRequest::set_grammar_data(::std::string&& value) {
  
  grammar_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:techmo.sarmata.DefineGrammarRequest.grammar_data)
}
#endif
void DefineGrammarRequest::set_grammar_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  grammar_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:techmo.sarmata.DefineGrammarRequest.grammar_data)
}
void DefineGrammarRequest::set_grammar_data(const char* value, size_t size) {
  
  grammar_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:techmo.sarmata.DefineGrammarRequest.grammar_data)
}
::std::string* DefineGrammarRequest::mutable_grammar_data() {
  
  // @@protoc_insertion_point(field_mutable:techmo.sarmata.DefineGrammarRequest.grammar_data)
  return grammar_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DefineGrammarRequest::release_grammar_data() {
  // @@protoc_insertion_point(field_release:techmo.sarmata.DefineGrammarRequest.grammar_data)
  
  return grammar_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DefineGrammarRequest::set_allocated_grammar_data(::std::string* grammar_data) {
  if (grammar_data != NULL) {
    
  } else {
    
  }
  grammar_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), grammar_data);
  // @@protoc_insertion_point(field_set_allocated:techmo.sarmata.DefineGrammarRequest.grammar_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DefineGrammarResponse::kStatusFieldNumber;
const int DefineGrammarResponse::kErrorFieldNumber;
const int DefineGrammarResponse::kOkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DefineGrammarResponse::DefineGrammarResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sarmata_5fasr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.sarmata.DefineGrammarResponse)
}
DefineGrammarResponse::DefineGrammarResponse(const DefineGrammarResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error().size() > 0) {
    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&ok_) -
    reinterpret_cast<char*>(&status_)) + sizeof(ok_));
  // @@protoc_insertion_point(copy_constructor:techmo.sarmata.DefineGrammarResponse)
}

void DefineGrammarResponse::SharedCtor() {
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ok_) -
      reinterpret_cast<char*>(&status_)) + sizeof(ok_));
  _cached_size_ = 0;
}

DefineGrammarResponse::~DefineGrammarResponse() {
  // @@protoc_insertion_point(destructor:techmo.sarmata.DefineGrammarResponse)
  SharedDtor();
}

void DefineGrammarResponse::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DefineGrammarResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DefineGrammarResponse::descriptor() {
  protobuf_sarmata_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sarmata_5fasr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DefineGrammarResponse& DefineGrammarResponse::default_instance() {
  protobuf_sarmata_5fasr_2eproto::InitDefaults();
  return *internal_default_instance();
}

DefineGrammarResponse* DefineGrammarResponse::New(::google::protobuf::Arena* arena) const {
  DefineGrammarResponse* n = new DefineGrammarResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DefineGrammarResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.sarmata.DefineGrammarResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ok_) -
      reinterpret_cast<char*>(&status_)) + sizeof(ok_));
  _internal_metadata_.Clear();
}

bool DefineGrammarResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:techmo.sarmata.DefineGrammarResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .techmo.sarmata.ResponseStatus status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::techmo::sarmata::ResponseStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), static_cast<int>(this->error().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "techmo.sarmata.DefineGrammarResponse.error"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ok = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ok_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:techmo.sarmata.DefineGrammarResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:techmo.sarmata.DefineGrammarResponse)
  return false;
#undef DO_
}

void DefineGrammarResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:techmo.sarmata.DefineGrammarResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .techmo.sarmata.ResponseStatus status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "techmo.sarmata.DefineGrammarResponse.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  // bool ok = 3;
  if (this->ok() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ok(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:techmo.sarmata.DefineGrammarResponse)
}

::google::protobuf::uint8* DefineGrammarResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:techmo.sarmata.DefineGrammarResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .techmo.sarmata.ResponseStatus status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "techmo.sarmata.DefineGrammarResponse.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  // bool ok = 3;
  if (this->ok() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ok(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.sarmata.DefineGrammarResponse)
  return target;
}

size_t DefineGrammarResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.sarmata.DefineGrammarResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string error = 2;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  // .techmo.sarmata.ResponseStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // bool ok = 3;
  if (this->ok() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DefineGrammarResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.sarmata.DefineGrammarResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DefineGrammarResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DefineGrammarResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.sarmata.DefineGrammarResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.sarmata.DefineGrammarResponse)
    MergeFrom(*source);
  }
}

void DefineGrammarResponse::MergeFrom(const DefineGrammarResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.sarmata.DefineGrammarResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.ok() != 0) {
    set_ok(from.ok());
  }
}

void DefineGrammarResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.sarmata.DefineGrammarResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DefineGrammarResponse::CopyFrom(const DefineGrammarResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.sarmata.DefineGrammarResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefineGrammarResponse::IsInitialized() const {
  return true;
}

void DefineGrammarResponse::Swap(DefineGrammarResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DefineGrammarResponse::InternalSwap(DefineGrammarResponse* other) {
  using std::swap;
  error_.Swap(&other->error_);
  swap(status_, other->status_);
  swap(ok_, other->ok_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DefineGrammarResponse::GetMetadata() const {
  protobuf_sarmata_5fasr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sarmata_5fasr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DefineGrammarResponse

// .techmo.sarmata.ResponseStatus status = 1;
void DefineGrammarResponse::clear_status() {
  status_ = 0;
}
::techmo::sarmata::ResponseStatus DefineGrammarResponse::status() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.DefineGrammarResponse.status)
  return static_cast< ::techmo::sarmata::ResponseStatus >(status_);
}
void DefineGrammarResponse::set_status(::techmo::sarmata::ResponseStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:techmo.sarmata.DefineGrammarResponse.status)
}

// string error = 2;
void DefineGrammarResponse::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DefineGrammarResponse::error() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.DefineGrammarResponse.error)
  return error_.GetNoArena();
}
void DefineGrammarResponse::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:techmo.sarmata.DefineGrammarResponse.error)
}
#if LANG_CXX11
void DefineGrammarResponse::set_error(::std::string&& value) {
  
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:techmo.sarmata.DefineGrammarResponse.error)
}
#endif
void DefineGrammarResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:techmo.sarmata.DefineGrammarResponse.error)
}
void DefineGrammarResponse::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:techmo.sarmata.DefineGrammarResponse.error)
}
::std::string* DefineGrammarResponse::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:techmo.sarmata.DefineGrammarResponse.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DefineGrammarResponse::release_error() {
  // @@protoc_insertion_point(field_release:techmo.sarmata.DefineGrammarResponse.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DefineGrammarResponse::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:techmo.sarmata.DefineGrammarResponse.error)
}

// bool ok = 3;
void DefineGrammarResponse::clear_ok() {
  ok_ = false;
}
bool DefineGrammarResponse::ok() const {
  // @@protoc_insertion_point(field_get:techmo.sarmata.DefineGrammarResponse.ok)
  return ok_;
}
void DefineGrammarResponse::set_ok(bool value) {
  
  ok_ = value;
  // @@protoc_insertion_point(field_set:techmo.sarmata.DefineGrammarResponse.ok)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace sarmata
}  // namespace techmo

// @@protoc_insertion_point(global_scope)
