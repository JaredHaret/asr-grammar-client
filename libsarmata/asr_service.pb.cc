// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: asr_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "asr_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sarmata {

namespace {

const ::google::protobuf::Descriptor* RecognizeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecognizeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConfigField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfigField_reflection_ = NULL;
const ::google::protobuf::Descriptor* InitialRecognizeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitialRecognizeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AudioRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AudioRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* InterpretRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InterpretRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* InterpretResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InterpretResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DefineGrammarRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DefineGrammarRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DefineGrammarRespone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DefineGrammarRespone_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecognizeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecognizeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Phrase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Phrase_reflection_ = NULL;
const ::google::protobuf::Descriptor* Phrase_Word_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Phrase_Word_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ResponseStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_asr_5fservice_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_asr_5fservice_2eproto() {
  protobuf_AddDesc_asr_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "asr_service.proto");
  GOOGLE_CHECK(file != NULL);
  RecognizeRequest_descriptor_ = file->message_type(0);
  static const int RecognizeRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeRequest, initial_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeRequest, audio_request_),
  };
  RecognizeRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RecognizeRequest_descriptor_,
      RecognizeRequest::default_instance_,
      RecognizeRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(RecognizeRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeRequest, _is_default_instance_));
  ConfigField_descriptor_ = file->message_type(1);
  static const int ConfigField_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigField, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigField, value_),
  };
  ConfigField_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConfigField_descriptor_,
      ConfigField::default_instance_,
      ConfigField_offsets_,
      -1,
      -1,
      -1,
      sizeof(ConfigField),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigField, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigField, _is_default_instance_));
  InitialRecognizeRequest_descriptor_ = file->message_type(2);
  static const int InitialRecognizeRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitialRecognizeRequest, config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitialRecognizeRequest, token_),
  };
  InitialRecognizeRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InitialRecognizeRequest_descriptor_,
      InitialRecognizeRequest::default_instance_,
      InitialRecognizeRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(InitialRecognizeRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitialRecognizeRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitialRecognizeRequest, _is_default_instance_));
  AudioRequest_descriptor_ = file->message_type(3);
  static const int AudioRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioRequest, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioRequest, end_of_stream_),
  };
  AudioRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AudioRequest_descriptor_,
      AudioRequest::default_instance_,
      AudioRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(AudioRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioRequest, _is_default_instance_));
  InterpretRequest_descriptor_ = file->message_type(4);
  static const int InterpretRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterpretRequest, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterpretRequest, grammar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterpretRequest, sentence_),
  };
  InterpretRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InterpretRequest_descriptor_,
      InterpretRequest::default_instance_,
      InterpretRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(InterpretRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterpretRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterpretRequest, _is_default_instance_));
  InterpretResponse_descriptor_ = file->message_type(5);
  static const int InterpretResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterpretResponse, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterpretResponse, si_),
  };
  InterpretResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InterpretResponse_descriptor_,
      InterpretResponse::default_instance_,
      InterpretResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(InterpretResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterpretResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterpretResponse, _is_default_instance_));
  DefineGrammarRequest_descriptor_ = file->message_type(6);
  static const int DefineGrammarRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefineGrammarRequest, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefineGrammarRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefineGrammarRequest, grammar_),
  };
  DefineGrammarRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DefineGrammarRequest_descriptor_,
      DefineGrammarRequest::default_instance_,
      DefineGrammarRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(DefineGrammarRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefineGrammarRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefineGrammarRequest, _is_default_instance_));
  DefineGrammarRespone_descriptor_ = file->message_type(7);
  static const int DefineGrammarRespone_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefineGrammarRespone, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefineGrammarRespone, grammarname_),
  };
  DefineGrammarRespone_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DefineGrammarRespone_descriptor_,
      DefineGrammarRespone::default_instance_,
      DefineGrammarRespone_offsets_,
      -1,
      -1,
      -1,
      sizeof(DefineGrammarRespone),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefineGrammarRespone, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefineGrammarRespone, _is_default_instance_));
  RecognizeResponse_descriptor_ = file->message_type(8);
  static const int RecognizeResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeResponse, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeResponse, warning_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeResponse, event_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeResponse, results_),
  };
  RecognizeResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RecognizeResponse_descriptor_,
      RecognizeResponse::default_instance_,
      RecognizeResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(RecognizeResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeResponse, _is_default_instance_));
  Phrase_descriptor_ = file->message_type(9);
  static const int Phrase_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phrase, words_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phrase, confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phrase, correct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phrase, semantic_interpretation_),
  };
  Phrase_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Phrase_descriptor_,
      Phrase::default_instance_,
      Phrase_offsets_,
      -1,
      -1,
      -1,
      sizeof(Phrase),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phrase, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phrase, _is_default_instance_));
  Phrase_Word_descriptor_ = Phrase_descriptor_->nested_type(0);
  static const int Phrase_Word_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phrase_Word, transcript_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phrase_Word, confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phrase_Word, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phrase_Word, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phrase_Word, logprob_),
  };
  Phrase_Word_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Phrase_Word_descriptor_,
      Phrase_Word::default_instance_,
      Phrase_Word_offsets_,
      -1,
      -1,
      -1,
      sizeof(Phrase_Word),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phrase_Word, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phrase_Word, _is_default_instance_));
  ResponseStatus_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_asr_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RecognizeRequest_descriptor_, &RecognizeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConfigField_descriptor_, &ConfigField::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InitialRecognizeRequest_descriptor_, &InitialRecognizeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AudioRequest_descriptor_, &AudioRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InterpretRequest_descriptor_, &InterpretRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InterpretResponse_descriptor_, &InterpretResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DefineGrammarRequest_descriptor_, &DefineGrammarRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DefineGrammarRespone_descriptor_, &DefineGrammarRespone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RecognizeResponse_descriptor_, &RecognizeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Phrase_descriptor_, &Phrase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Phrase_Word_descriptor_, &Phrase_Word::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_asr_5fservice_2eproto() {
  delete RecognizeRequest::default_instance_;
  delete RecognizeRequest_reflection_;
  delete ConfigField::default_instance_;
  delete ConfigField_reflection_;
  delete InitialRecognizeRequest::default_instance_;
  delete InitialRecognizeRequest_reflection_;
  delete AudioRequest::default_instance_;
  delete AudioRequest_reflection_;
  delete InterpretRequest::default_instance_;
  delete InterpretRequest_reflection_;
  delete InterpretResponse::default_instance_;
  delete InterpretResponse_reflection_;
  delete DefineGrammarRequest::default_instance_;
  delete DefineGrammarRequest_reflection_;
  delete DefineGrammarRespone::default_instance_;
  delete DefineGrammarRespone_reflection_;
  delete RecognizeResponse::default_instance_;
  delete RecognizeResponse_reflection_;
  delete Phrase::default_instance_;
  delete Phrase_reflection_;
  delete Phrase_Word::default_instance_;
  delete Phrase_Word_reflection_;
}

void protobuf_AddDesc_asr_5fservice_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_asr_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021asr_service.proto\022\007sarmata\"{\n\020Recogniz"
    "eRequest\0229\n\017initial_request\030\001 \001(\0132 .sarm"
    "ata.InitialRecognizeRequest\022,\n\raudio_req"
    "uest\030\002 \001(\0132\025.sarmata.AudioRequest\")\n\013Con"
    "figField\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"N\n\027"
    "InitialRecognizeRequest\022$\n\006config\030\001 \003(\0132"
    "\024.sarmata.ConfigField\022\r\n\005token\030\002 \001(\t\"6\n\014"
    "AudioRequest\022\017\n\007content\030\001 \001(\014\022\025\n\rend_of_"
    "stream\030\002 \001(\010\"D\n\020InterpretRequest\022\r\n\005toke"
    "n\030\001 \001(\t\022\017\n\007grammar\030\002 \001(\t\022\020\n\010sentence\030\003 \001"
    "(\t\".\n\021InterpretResponse\022\r\n\005error\030\001 \001(\t\022\n"
    "\n\002si\030\002 \003(\t\"D\n\024DefineGrammarRequest\022\r\n\005to"
    "ken\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\017\n\007grammar\030\003 \001(\t"
    "\":\n\024DefineGrammarRespone\022\r\n\005error\030\001 \001(\t\022"
    "\023\n\013grammarName\030\002 \001(\t\"\222\001\n\021RecognizeRespon"
    "se\022\'\n\006status\030\001 \001(\0162\027.sarmata.ResponseSta"
    "tus\022\r\n\005error\030\002 \001(\t\022\017\n\007warning\030\003 \001(\t\022\022\n\ne"
    "vent_time\030\004 \001(\005\022 \n\007results\030\005 \003(\0132\017.sarma"
    "ta.Phrase\"\320\001\n\006Phrase\022#\n\005words\030\001 \003(\0132\024.sa"
    "rmata.Phrase.Word\022\022\n\nconfidence\030\002 \001(\001\022\017\n"
    "\007correct\030\003 \001(\010\022\037\n\027semantic_interpretatio"
    "n\030\004 \001(\t\032[\n\004Word\022\022\n\ntranscript\030\001 \001(\t\022\022\n\nc"
    "onfidence\030\002 \001(\001\022\r\n\005start\030\003 \001(\005\022\013\n\003end\030\004 "
    "\001(\005\022\017\n\007logprob\030\005 \001(\001*\273\002\n\016ResponseStatus\022"
    "\013\n\007SUCCESS\020\000\022\021\n\rPARTIAL_MATCH\020\001\022\014\n\010NO_MA"
    "TCH\020\002\022\024\n\020NO_INPUT_TIMEOUT\020\003\022\027\n\023RECOGNITI"
    "ON_TIMEOUT\020\004\022\030\n\024GRAMMAR_LOAD_FAILURE\020\005\022\037"
    "\n\033GRAMMAR_COMPILATION_FAILURE\020\006\022\024\n\020RECOG"
    "NIZER_ERROR\020\007\022\033\n\027TOO_MUCH_SPEECH_TIMEOUT"
    "\020\010\022\017\n\013URI_FAILURE\020\t\022\030\n\024LANGUAGE_UNSUPPOR"
    "TED\020\n\022\r\n\tCANCELLED\020\013\022\022\n\016START_OF_INPUT\020\014"
    "\022\020\n\014END_OF_AUDIO\020\r2\234\001\n\003ASR\022F\n\tRecognize\022"
    "\031.sarmata.RecognizeRequest\032\032.sarmata.Rec"
    "ognizeResponse(\0010\001\022M\n\rDefineGrammar\022\035.sa"
    "rmata.DefineGrammarRequest\032\035.sarmata.Def"
    "ineGrammarResponeb\006proto3", 1425);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "asr_service.proto", &protobuf_RegisterTypes);
  RecognizeRequest::default_instance_ = new RecognizeRequest();
  ConfigField::default_instance_ = new ConfigField();
  InitialRecognizeRequest::default_instance_ = new InitialRecognizeRequest();
  AudioRequest::default_instance_ = new AudioRequest();
  InterpretRequest::default_instance_ = new InterpretRequest();
  InterpretResponse::default_instance_ = new InterpretResponse();
  DefineGrammarRequest::default_instance_ = new DefineGrammarRequest();
  DefineGrammarRespone::default_instance_ = new DefineGrammarRespone();
  RecognizeResponse::default_instance_ = new RecognizeResponse();
  Phrase::default_instance_ = new Phrase();
  Phrase_Word::default_instance_ = new Phrase_Word();
  RecognizeRequest::default_instance_->InitAsDefaultInstance();
  ConfigField::default_instance_->InitAsDefaultInstance();
  InitialRecognizeRequest::default_instance_->InitAsDefaultInstance();
  AudioRequest::default_instance_->InitAsDefaultInstance();
  InterpretRequest::default_instance_->InitAsDefaultInstance();
  InterpretResponse::default_instance_->InitAsDefaultInstance();
  DefineGrammarRequest::default_instance_->InitAsDefaultInstance();
  DefineGrammarRespone::default_instance_->InitAsDefaultInstance();
  RecognizeResponse::default_instance_->InitAsDefaultInstance();
  Phrase::default_instance_->InitAsDefaultInstance();
  Phrase_Word::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_asr_5fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_asr_5fservice_2eproto {
  StaticDescriptorInitializer_asr_5fservice_2eproto() {
    protobuf_AddDesc_asr_5fservice_2eproto();
  }
} static_descriptor_initializer_asr_5fservice_2eproto_;
const ::google::protobuf::EnumDescriptor* ResponseStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseStatus_descriptor_;
}
bool ResponseStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecognizeRequest::kInitialRequestFieldNumber;
const int RecognizeRequest::kAudioRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecognizeRequest::RecognizeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sarmata.RecognizeRequest)
}

void RecognizeRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  initial_request_ = const_cast< ::sarmata::InitialRecognizeRequest*>(&::sarmata::InitialRecognizeRequest::default_instance());
  audio_request_ = const_cast< ::sarmata::AudioRequest*>(&::sarmata::AudioRequest::default_instance());
}

RecognizeRequest::RecognizeRequest(const RecognizeRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sarmata.RecognizeRequest)
}

void RecognizeRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  initial_request_ = NULL;
  audio_request_ = NULL;
}

RecognizeRequest::~RecognizeRequest() {
  // @@protoc_insertion_point(destructor:sarmata.RecognizeRequest)
  SharedDtor();
}

void RecognizeRequest::SharedDtor() {
  if (this != default_instance_) {
    delete initial_request_;
    delete audio_request_;
  }
}

void RecognizeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecognizeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecognizeRequest_descriptor_;
}

const RecognizeRequest& RecognizeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_asr_5fservice_2eproto();
  return *default_instance_;
}

RecognizeRequest* RecognizeRequest::default_instance_ = NULL;

RecognizeRequest* RecognizeRequest::New(::google::protobuf::Arena* arena) const {
  RecognizeRequest* n = new RecognizeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecognizeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sarmata.RecognizeRequest)
  if (GetArenaNoVirtual() == NULL && initial_request_ != NULL) delete initial_request_;
  initial_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && audio_request_ != NULL) delete audio_request_;
  audio_request_ = NULL;
}

bool RecognizeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sarmata.RecognizeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sarmata.InitialRecognizeRequest initial_request = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initial_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_audio_request;
        break;
      }

      // optional .sarmata.AudioRequest audio_request = 2;
      case 2: {
        if (tag == 18) {
         parse_audio_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_audio_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sarmata.RecognizeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sarmata.RecognizeRequest)
  return false;
#undef DO_
}

void RecognizeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sarmata.RecognizeRequest)
  // optional .sarmata.InitialRecognizeRequest initial_request = 1;
  if (this->has_initial_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->initial_request_, output);
  }

  // optional .sarmata.AudioRequest audio_request = 2;
  if (this->has_audio_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->audio_request_, output);
  }

  // @@protoc_insertion_point(serialize_end:sarmata.RecognizeRequest)
}

::google::protobuf::uint8* RecognizeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sarmata.RecognizeRequest)
  // optional .sarmata.InitialRecognizeRequest initial_request = 1;
  if (this->has_initial_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->initial_request_, false, target);
  }

  // optional .sarmata.AudioRequest audio_request = 2;
  if (this->has_audio_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->audio_request_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sarmata.RecognizeRequest)
  return target;
}

int RecognizeRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:sarmata.RecognizeRequest)
  int total_size = 0;

  // optional .sarmata.InitialRecognizeRequest initial_request = 1;
  if (this->has_initial_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->initial_request_);
  }

  // optional .sarmata.AudioRequest audio_request = 2;
  if (this->has_audio_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->audio_request_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecognizeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sarmata.RecognizeRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RecognizeRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RecognizeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sarmata.RecognizeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sarmata.RecognizeRequest)
    MergeFrom(*source);
  }
}

void RecognizeRequest::MergeFrom(const RecognizeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sarmata.RecognizeRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_initial_request()) {
    mutable_initial_request()->::sarmata::InitialRecognizeRequest::MergeFrom(from.initial_request());
  }
  if (from.has_audio_request()) {
    mutable_audio_request()->::sarmata::AudioRequest::MergeFrom(from.audio_request());
  }
}

void RecognizeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sarmata.RecognizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecognizeRequest::CopyFrom(const RecognizeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sarmata.RecognizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognizeRequest::IsInitialized() const {

  return true;
}

void RecognizeRequest::Swap(RecognizeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecognizeRequest::InternalSwap(RecognizeRequest* other) {
  std::swap(initial_request_, other->initial_request_);
  std::swap(audio_request_, other->audio_request_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecognizeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecognizeRequest_descriptor_;
  metadata.reflection = RecognizeRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecognizeRequest

// optional .sarmata.InitialRecognizeRequest initial_request = 1;
bool RecognizeRequest::has_initial_request() const {
  return !_is_default_instance_ && initial_request_ != NULL;
}
void RecognizeRequest::clear_initial_request() {
  if (GetArenaNoVirtual() == NULL && initial_request_ != NULL) delete initial_request_;
  initial_request_ = NULL;
}
const ::sarmata::InitialRecognizeRequest& RecognizeRequest::initial_request() const {
  // @@protoc_insertion_point(field_get:sarmata.RecognizeRequest.initial_request)
  return initial_request_ != NULL ? *initial_request_ : *default_instance_->initial_request_;
}
::sarmata::InitialRecognizeRequest* RecognizeRequest::mutable_initial_request() {
  
  if (initial_request_ == NULL) {
    initial_request_ = new ::sarmata::InitialRecognizeRequest;
  }
  // @@protoc_insertion_point(field_mutable:sarmata.RecognizeRequest.initial_request)
  return initial_request_;
}
::sarmata::InitialRecognizeRequest* RecognizeRequest::release_initial_request() {
  // @@protoc_insertion_point(field_release:sarmata.RecognizeRequest.initial_request)
  
  ::sarmata::InitialRecognizeRequest* temp = initial_request_;
  initial_request_ = NULL;
  return temp;
}
void RecognizeRequest::set_allocated_initial_request(::sarmata::InitialRecognizeRequest* initial_request) {
  delete initial_request_;
  initial_request_ = initial_request;
  if (initial_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sarmata.RecognizeRequest.initial_request)
}

// optional .sarmata.AudioRequest audio_request = 2;
bool RecognizeRequest::has_audio_request() const {
  return !_is_default_instance_ && audio_request_ != NULL;
}
void RecognizeRequest::clear_audio_request() {
  if (GetArenaNoVirtual() == NULL && audio_request_ != NULL) delete audio_request_;
  audio_request_ = NULL;
}
const ::sarmata::AudioRequest& RecognizeRequest::audio_request() const {
  // @@protoc_insertion_point(field_get:sarmata.RecognizeRequest.audio_request)
  return audio_request_ != NULL ? *audio_request_ : *default_instance_->audio_request_;
}
::sarmata::AudioRequest* RecognizeRequest::mutable_audio_request() {
  
  if (audio_request_ == NULL) {
    audio_request_ = new ::sarmata::AudioRequest;
  }
  // @@protoc_insertion_point(field_mutable:sarmata.RecognizeRequest.audio_request)
  return audio_request_;
}
::sarmata::AudioRequest* RecognizeRequest::release_audio_request() {
  // @@protoc_insertion_point(field_release:sarmata.RecognizeRequest.audio_request)
  
  ::sarmata::AudioRequest* temp = audio_request_;
  audio_request_ = NULL;
  return temp;
}
void RecognizeRequest::set_allocated_audio_request(::sarmata::AudioRequest* audio_request) {
  delete audio_request_;
  audio_request_ = audio_request;
  if (audio_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sarmata.RecognizeRequest.audio_request)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigField::kKeyFieldNumber;
const int ConfigField::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigField::ConfigField()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sarmata.ConfigField)
}

void ConfigField::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ConfigField::ConfigField(const ConfigField& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sarmata.ConfigField)
}

void ConfigField::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ConfigField::~ConfigField() {
  // @@protoc_insertion_point(destructor:sarmata.ConfigField)
  SharedDtor();
}

void ConfigField::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ConfigField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfigField_descriptor_;
}

const ConfigField& ConfigField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_asr_5fservice_2eproto();
  return *default_instance_;
}

ConfigField* ConfigField::default_instance_ = NULL;

ConfigField* ConfigField::New(::google::protobuf::Arena* arena) const {
  ConfigField* n = new ConfigField;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConfigField::Clear() {
// @@protoc_insertion_point(message_clear_start:sarmata.ConfigField)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ConfigField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sarmata.ConfigField)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sarmata.ConfigField.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sarmata.ConfigField.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sarmata.ConfigField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sarmata.ConfigField)
  return false;
#undef DO_
}

void ConfigField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sarmata.ConfigField)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sarmata.ConfigField.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sarmata.ConfigField.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:sarmata.ConfigField)
}

::google::protobuf::uint8* ConfigField::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sarmata.ConfigField)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sarmata.ConfigField.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sarmata.ConfigField.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sarmata.ConfigField)
  return target;
}

int ConfigField::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:sarmata.ConfigField)
  int total_size = 0;

  // optional string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // optional string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigField::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sarmata.ConfigField)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ConfigField* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigField>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sarmata.ConfigField)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sarmata.ConfigField)
    MergeFrom(*source);
  }
}

void ConfigField::MergeFrom(const ConfigField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sarmata.ConfigField)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void ConfigField::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sarmata.ConfigField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigField::CopyFrom(const ConfigField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sarmata.ConfigField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigField::IsInitialized() const {

  return true;
}

void ConfigField::Swap(ConfigField* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfigField::InternalSwap(ConfigField* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConfigField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfigField_descriptor_;
  metadata.reflection = ConfigField_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConfigField

// optional string key = 1;
void ConfigField::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ConfigField::key() const {
  // @@protoc_insertion_point(field_get:sarmata.ConfigField.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConfigField::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sarmata.ConfigField.key)
}
 void ConfigField::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sarmata.ConfigField.key)
}
 void ConfigField::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sarmata.ConfigField.key)
}
 ::std::string* ConfigField::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:sarmata.ConfigField.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ConfigField::release_key() {
  // @@protoc_insertion_point(field_release:sarmata.ConfigField.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConfigField::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:sarmata.ConfigField.key)
}

// optional string value = 2;
void ConfigField::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ConfigField::value() const {
  // @@protoc_insertion_point(field_get:sarmata.ConfigField.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConfigField::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sarmata.ConfigField.value)
}
 void ConfigField::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sarmata.ConfigField.value)
}
 void ConfigField::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sarmata.ConfigField.value)
}
 ::std::string* ConfigField::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:sarmata.ConfigField.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ConfigField::release_value() {
  // @@protoc_insertion_point(field_release:sarmata.ConfigField.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConfigField::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:sarmata.ConfigField.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitialRecognizeRequest::kConfigFieldNumber;
const int InitialRecognizeRequest::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitialRecognizeRequest::InitialRecognizeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sarmata.InitialRecognizeRequest)
}

void InitialRecognizeRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

InitialRecognizeRequest::InitialRecognizeRequest(const InitialRecognizeRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sarmata.InitialRecognizeRequest)
}

void InitialRecognizeRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

InitialRecognizeRequest::~InitialRecognizeRequest() {
  // @@protoc_insertion_point(destructor:sarmata.InitialRecognizeRequest)
  SharedDtor();
}

void InitialRecognizeRequest::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void InitialRecognizeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitialRecognizeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitialRecognizeRequest_descriptor_;
}

const InitialRecognizeRequest& InitialRecognizeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_asr_5fservice_2eproto();
  return *default_instance_;
}

InitialRecognizeRequest* InitialRecognizeRequest::default_instance_ = NULL;

InitialRecognizeRequest* InitialRecognizeRequest::New(::google::protobuf::Arena* arena) const {
  InitialRecognizeRequest* n = new InitialRecognizeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitialRecognizeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sarmata.InitialRecognizeRequest)
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_.Clear();
}

bool InitialRecognizeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sarmata.InitialRecognizeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sarmata.ConfigField config = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_config;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sarmata.InitialRecognizeRequest.token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sarmata.InitialRecognizeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sarmata.InitialRecognizeRequest)
  return false;
#undef DO_
}

void InitialRecognizeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sarmata.InitialRecognizeRequest)
  // repeated .sarmata.ConfigField config = 1;
  for (unsigned int i = 0, n = this->config_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->config(i), output);
  }

  // optional string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sarmata.InitialRecognizeRequest.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // @@protoc_insertion_point(serialize_end:sarmata.InitialRecognizeRequest)
}

::google::protobuf::uint8* InitialRecognizeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sarmata.InitialRecognizeRequest)
  // repeated .sarmata.ConfigField config = 1;
  for (unsigned int i = 0, n = this->config_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->config(i), false, target);
  }

  // optional string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sarmata.InitialRecognizeRequest.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sarmata.InitialRecognizeRequest)
  return target;
}

int InitialRecognizeRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:sarmata.InitialRecognizeRequest)
  int total_size = 0;

  // optional string token = 2;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // repeated .sarmata.ConfigField config = 1;
  total_size += 1 * this->config_size();
  for (int i = 0; i < this->config_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->config(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitialRecognizeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sarmata.InitialRecognizeRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const InitialRecognizeRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InitialRecognizeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sarmata.InitialRecognizeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sarmata.InitialRecognizeRequest)
    MergeFrom(*source);
  }
}

void InitialRecognizeRequest::MergeFrom(const InitialRecognizeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sarmata.InitialRecognizeRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  config_.MergeFrom(from.config_);
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
}

void InitialRecognizeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sarmata.InitialRecognizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitialRecognizeRequest::CopyFrom(const InitialRecognizeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sarmata.InitialRecognizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitialRecognizeRequest::IsInitialized() const {

  return true;
}

void InitialRecognizeRequest::Swap(InitialRecognizeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitialRecognizeRequest::InternalSwap(InitialRecognizeRequest* other) {
  config_.UnsafeArenaSwap(&other->config_);
  token_.Swap(&other->token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InitialRecognizeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitialRecognizeRequest_descriptor_;
  metadata.reflection = InitialRecognizeRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitialRecognizeRequest

// repeated .sarmata.ConfigField config = 1;
int InitialRecognizeRequest::config_size() const {
  return config_.size();
}
void InitialRecognizeRequest::clear_config() {
  config_.Clear();
}
const ::sarmata::ConfigField& InitialRecognizeRequest::config(int index) const {
  // @@protoc_insertion_point(field_get:sarmata.InitialRecognizeRequest.config)
  return config_.Get(index);
}
::sarmata::ConfigField* InitialRecognizeRequest::mutable_config(int index) {
  // @@protoc_insertion_point(field_mutable:sarmata.InitialRecognizeRequest.config)
  return config_.Mutable(index);
}
::sarmata::ConfigField* InitialRecognizeRequest::add_config() {
  // @@protoc_insertion_point(field_add:sarmata.InitialRecognizeRequest.config)
  return config_.Add();
}
::google::protobuf::RepeatedPtrField< ::sarmata::ConfigField >*
InitialRecognizeRequest::mutable_config() {
  // @@protoc_insertion_point(field_mutable_list:sarmata.InitialRecognizeRequest.config)
  return &config_;
}
const ::google::protobuf::RepeatedPtrField< ::sarmata::ConfigField >&
InitialRecognizeRequest::config() const {
  // @@protoc_insertion_point(field_list:sarmata.InitialRecognizeRequest.config)
  return config_;
}

// optional string token = 2;
void InitialRecognizeRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& InitialRecognizeRequest::token() const {
  // @@protoc_insertion_point(field_get:sarmata.InitialRecognizeRequest.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InitialRecognizeRequest::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sarmata.InitialRecognizeRequest.token)
}
 void InitialRecognizeRequest::set_token(const char* value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sarmata.InitialRecognizeRequest.token)
}
 void InitialRecognizeRequest::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sarmata.InitialRecognizeRequest.token)
}
 ::std::string* InitialRecognizeRequest::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:sarmata.InitialRecognizeRequest.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InitialRecognizeRequest::release_token() {
  // @@protoc_insertion_point(field_release:sarmata.InitialRecognizeRequest.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InitialRecognizeRequest::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:sarmata.InitialRecognizeRequest.token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AudioRequest::kContentFieldNumber;
const int AudioRequest::kEndOfStreamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AudioRequest::AudioRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sarmata.AudioRequest)
}

void AudioRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AudioRequest::AudioRequest(const AudioRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sarmata.AudioRequest)
}

void AudioRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_of_stream_ = false;
}

AudioRequest::~AudioRequest() {
  // @@protoc_insertion_point(destructor:sarmata.AudioRequest)
  SharedDtor();
}

void AudioRequest::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void AudioRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AudioRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AudioRequest_descriptor_;
}

const AudioRequest& AudioRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_asr_5fservice_2eproto();
  return *default_instance_;
}

AudioRequest* AudioRequest::default_instance_ = NULL;

AudioRequest* AudioRequest::New(::google::protobuf::Arena* arena) const {
  AudioRequest* n = new AudioRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AudioRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sarmata.AudioRequest)
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_of_stream_ = false;
}

bool AudioRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sarmata.AudioRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes content = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_end_of_stream;
        break;
      }

      // optional bool end_of_stream = 2;
      case 2: {
        if (tag == 16) {
         parse_end_of_stream:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &end_of_stream_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sarmata.AudioRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sarmata.AudioRequest)
  return false;
#undef DO_
}

void AudioRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sarmata.AudioRequest)
  // optional bytes content = 1;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->content(), output);
  }

  // optional bool end_of_stream = 2;
  if (this->end_of_stream() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->end_of_stream(), output);
  }

  // @@protoc_insertion_point(serialize_end:sarmata.AudioRequest)
}

::google::protobuf::uint8* AudioRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sarmata.AudioRequest)
  // optional bytes content = 1;
  if (this->content().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->content(), target);
  }

  // optional bool end_of_stream = 2;
  if (this->end_of_stream() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->end_of_stream(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sarmata.AudioRequest)
  return target;
}

int AudioRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:sarmata.AudioRequest)
  int total_size = 0;

  // optional bytes content = 1;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  // optional bool end_of_stream = 2;
  if (this->end_of_stream() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sarmata.AudioRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AudioRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AudioRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sarmata.AudioRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sarmata.AudioRequest)
    MergeFrom(*source);
  }
}

void AudioRequest::MergeFrom(const AudioRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sarmata.AudioRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.end_of_stream() != 0) {
    set_end_of_stream(from.end_of_stream());
  }
}

void AudioRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sarmata.AudioRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioRequest::CopyFrom(const AudioRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sarmata.AudioRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioRequest::IsInitialized() const {

  return true;
}

void AudioRequest::Swap(AudioRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AudioRequest::InternalSwap(AudioRequest* other) {
  content_.Swap(&other->content_);
  std::swap(end_of_stream_, other->end_of_stream_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AudioRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AudioRequest_descriptor_;
  metadata.reflection = AudioRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AudioRequest

// optional bytes content = 1;
void AudioRequest::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AudioRequest::content() const {
  // @@protoc_insertion_point(field_get:sarmata.AudioRequest.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AudioRequest::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sarmata.AudioRequest.content)
}
 void AudioRequest::set_content(const char* value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sarmata.AudioRequest.content)
}
 void AudioRequest::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sarmata.AudioRequest.content)
}
 ::std::string* AudioRequest::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:sarmata.AudioRequest.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AudioRequest::release_content() {
  // @@protoc_insertion_point(field_release:sarmata.AudioRequest.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AudioRequest::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:sarmata.AudioRequest.content)
}

// optional bool end_of_stream = 2;
void AudioRequest::clear_end_of_stream() {
  end_of_stream_ = false;
}
 bool AudioRequest::end_of_stream() const {
  // @@protoc_insertion_point(field_get:sarmata.AudioRequest.end_of_stream)
  return end_of_stream_;
}
 void AudioRequest::set_end_of_stream(bool value) {
  
  end_of_stream_ = value;
  // @@protoc_insertion_point(field_set:sarmata.AudioRequest.end_of_stream)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InterpretRequest::kTokenFieldNumber;
const int InterpretRequest::kGrammarFieldNumber;
const int InterpretRequest::kSentenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InterpretRequest::InterpretRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sarmata.InterpretRequest)
}

void InterpretRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

InterpretRequest::InterpretRequest(const InterpretRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sarmata.InterpretRequest)
}

void InterpretRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  grammar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sentence_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

InterpretRequest::~InterpretRequest() {
  // @@protoc_insertion_point(destructor:sarmata.InterpretRequest)
  SharedDtor();
}

void InterpretRequest::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  grammar_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sentence_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void InterpretRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InterpretRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InterpretRequest_descriptor_;
}

const InterpretRequest& InterpretRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_asr_5fservice_2eproto();
  return *default_instance_;
}

InterpretRequest* InterpretRequest::default_instance_ = NULL;

InterpretRequest* InterpretRequest::New(::google::protobuf::Arena* arena) const {
  InterpretRequest* n = new InterpretRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InterpretRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sarmata.InterpretRequest)
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  grammar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sentence_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool InterpretRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sarmata.InterpretRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sarmata.InterpretRequest.token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_grammar;
        break;
      }

      // optional string grammar = 2;
      case 2: {
        if (tag == 18) {
         parse_grammar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_grammar()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->grammar().data(), this->grammar().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sarmata.InterpretRequest.grammar"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sentence;
        break;
      }

      // optional string sentence = 3;
      case 3: {
        if (tag == 26) {
         parse_sentence:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sentence()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sentence().data(), this->sentence().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sarmata.InterpretRequest.sentence"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sarmata.InterpretRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sarmata.InterpretRequest)
  return false;
#undef DO_
}

void InterpretRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sarmata.InterpretRequest)
  // optional string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sarmata.InterpretRequest.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // optional string grammar = 2;
  if (this->grammar().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->grammar().data(), this->grammar().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sarmata.InterpretRequest.grammar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->grammar(), output);
  }

  // optional string sentence = 3;
  if (this->sentence().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sentence().data(), this->sentence().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sarmata.InterpretRequest.sentence");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sentence(), output);
  }

  // @@protoc_insertion_point(serialize_end:sarmata.InterpretRequest)
}

::google::protobuf::uint8* InterpretRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sarmata.InterpretRequest)
  // optional string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sarmata.InterpretRequest.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // optional string grammar = 2;
  if (this->grammar().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->grammar().data(), this->grammar().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sarmata.InterpretRequest.grammar");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->grammar(), target);
  }

  // optional string sentence = 3;
  if (this->sentence().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sentence().data(), this->sentence().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sarmata.InterpretRequest.sentence");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sentence(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sarmata.InterpretRequest)
  return target;
}

int InterpretRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:sarmata.InterpretRequest)
  int total_size = 0;

  // optional string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // optional string grammar = 2;
  if (this->grammar().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->grammar());
  }

  // optional string sentence = 3;
  if (this->sentence().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sentence());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InterpretRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sarmata.InterpretRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const InterpretRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InterpretRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sarmata.InterpretRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sarmata.InterpretRequest)
    MergeFrom(*source);
  }
}

void InterpretRequest::MergeFrom(const InterpretRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sarmata.InterpretRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.grammar().size() > 0) {

    grammar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.grammar_);
  }
  if (from.sentence().size() > 0) {

    sentence_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sentence_);
  }
}

void InterpretRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sarmata.InterpretRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InterpretRequest::CopyFrom(const InterpretRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sarmata.InterpretRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterpretRequest::IsInitialized() const {

  return true;
}

void InterpretRequest::Swap(InterpretRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InterpretRequest::InternalSwap(InterpretRequest* other) {
  token_.Swap(&other->token_);
  grammar_.Swap(&other->grammar_);
  sentence_.Swap(&other->sentence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InterpretRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InterpretRequest_descriptor_;
  metadata.reflection = InterpretRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InterpretRequest

// optional string token = 1;
void InterpretRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& InterpretRequest::token() const {
  // @@protoc_insertion_point(field_get:sarmata.InterpretRequest.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InterpretRequest::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sarmata.InterpretRequest.token)
}
 void InterpretRequest::set_token(const char* value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sarmata.InterpretRequest.token)
}
 void InterpretRequest::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sarmata.InterpretRequest.token)
}
 ::std::string* InterpretRequest::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:sarmata.InterpretRequest.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InterpretRequest::release_token() {
  // @@protoc_insertion_point(field_release:sarmata.InterpretRequest.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InterpretRequest::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:sarmata.InterpretRequest.token)
}

// optional string grammar = 2;
void InterpretRequest::clear_grammar() {
  grammar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& InterpretRequest::grammar() const {
  // @@protoc_insertion_point(field_get:sarmata.InterpretRequest.grammar)
  return grammar_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InterpretRequest::set_grammar(const ::std::string& value) {
  
  grammar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sarmata.InterpretRequest.grammar)
}
 void InterpretRequest::set_grammar(const char* value) {
  
  grammar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sarmata.InterpretRequest.grammar)
}
 void InterpretRequest::set_grammar(const char* value, size_t size) {
  
  grammar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sarmata.InterpretRequest.grammar)
}
 ::std::string* InterpretRequest::mutable_grammar() {
  
  // @@protoc_insertion_point(field_mutable:sarmata.InterpretRequest.grammar)
  return grammar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InterpretRequest::release_grammar() {
  // @@protoc_insertion_point(field_release:sarmata.InterpretRequest.grammar)
  
  return grammar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InterpretRequest::set_allocated_grammar(::std::string* grammar) {
  if (grammar != NULL) {
    
  } else {
    
  }
  grammar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), grammar);
  // @@protoc_insertion_point(field_set_allocated:sarmata.InterpretRequest.grammar)
}

// optional string sentence = 3;
void InterpretRequest::clear_sentence() {
  sentence_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& InterpretRequest::sentence() const {
  // @@protoc_insertion_point(field_get:sarmata.InterpretRequest.sentence)
  return sentence_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InterpretRequest::set_sentence(const ::std::string& value) {
  
  sentence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sarmata.InterpretRequest.sentence)
}
 void InterpretRequest::set_sentence(const char* value) {
  
  sentence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sarmata.InterpretRequest.sentence)
}
 void InterpretRequest::set_sentence(const char* value, size_t size) {
  
  sentence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sarmata.InterpretRequest.sentence)
}
 ::std::string* InterpretRequest::mutable_sentence() {
  
  // @@protoc_insertion_point(field_mutable:sarmata.InterpretRequest.sentence)
  return sentence_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InterpretRequest::release_sentence() {
  // @@protoc_insertion_point(field_release:sarmata.InterpretRequest.sentence)
  
  return sentence_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InterpretRequest::set_allocated_sentence(::std::string* sentence) {
  if (sentence != NULL) {
    
  } else {
    
  }
  sentence_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sentence);
  // @@protoc_insertion_point(field_set_allocated:sarmata.InterpretRequest.sentence)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InterpretResponse::kErrorFieldNumber;
const int InterpretResponse::kSiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InterpretResponse::InterpretResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sarmata.InterpretResponse)
}

void InterpretResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

InterpretResponse::InterpretResponse(const InterpretResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sarmata.InterpretResponse)
}

void InterpretResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

InterpretResponse::~InterpretResponse() {
  // @@protoc_insertion_point(destructor:sarmata.InterpretResponse)
  SharedDtor();
}

void InterpretResponse::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void InterpretResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InterpretResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InterpretResponse_descriptor_;
}

const InterpretResponse& InterpretResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_asr_5fservice_2eproto();
  return *default_instance_;
}

InterpretResponse* InterpretResponse::default_instance_ = NULL;

InterpretResponse* InterpretResponse::New(::google::protobuf::Arena* arena) const {
  InterpretResponse* n = new InterpretResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InterpretResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sarmata.InterpretResponse)
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  si_.Clear();
}

bool InterpretResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sarmata.InterpretResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sarmata.InterpretResponse.error"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_si;
        break;
      }

      // repeated string si = 2;
      case 2: {
        if (tag == 18) {
         parse_si:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_si()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->si(this->si_size() - 1).data(),
            this->si(this->si_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sarmata.InterpretResponse.si"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_si;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sarmata.InterpretResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sarmata.InterpretResponse)
  return false;
#undef DO_
}

void InterpretResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sarmata.InterpretResponse)
  // optional string error = 1;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sarmata.InterpretResponse.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->error(), output);
  }

  // repeated string si = 2;
  for (int i = 0; i < this->si_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->si(i).data(), this->si(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sarmata.InterpretResponse.si");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->si(i), output);
  }

  // @@protoc_insertion_point(serialize_end:sarmata.InterpretResponse)
}

::google::protobuf::uint8* InterpretResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sarmata.InterpretResponse)
  // optional string error = 1;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sarmata.InterpretResponse.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->error(), target);
  }

  // repeated string si = 2;
  for (int i = 0; i < this->si_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->si(i).data(), this->si(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sarmata.InterpretResponse.si");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->si(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sarmata.InterpretResponse)
  return target;
}

int InterpretResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:sarmata.InterpretResponse)
  int total_size = 0;

  // optional string error = 1;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  // repeated string si = 2;
  total_size += 1 * this->si_size();
  for (int i = 0; i < this->si_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->si(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InterpretResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sarmata.InterpretResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const InterpretResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InterpretResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sarmata.InterpretResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sarmata.InterpretResponse)
    MergeFrom(*source);
  }
}

void InterpretResponse::MergeFrom(const InterpretResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sarmata.InterpretResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  si_.MergeFrom(from.si_);
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
}

void InterpretResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sarmata.InterpretResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InterpretResponse::CopyFrom(const InterpretResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sarmata.InterpretResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterpretResponse::IsInitialized() const {

  return true;
}

void InterpretResponse::Swap(InterpretResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InterpretResponse::InternalSwap(InterpretResponse* other) {
  error_.Swap(&other->error_);
  si_.UnsafeArenaSwap(&other->si_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InterpretResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InterpretResponse_descriptor_;
  metadata.reflection = InterpretResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InterpretResponse

// optional string error = 1;
void InterpretResponse::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& InterpretResponse::error() const {
  // @@protoc_insertion_point(field_get:sarmata.InterpretResponse.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InterpretResponse::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sarmata.InterpretResponse.error)
}
 void InterpretResponse::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sarmata.InterpretResponse.error)
}
 void InterpretResponse::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sarmata.InterpretResponse.error)
}
 ::std::string* InterpretResponse::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:sarmata.InterpretResponse.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InterpretResponse::release_error() {
  // @@protoc_insertion_point(field_release:sarmata.InterpretResponse.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InterpretResponse::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:sarmata.InterpretResponse.error)
}

// repeated string si = 2;
int InterpretResponse::si_size() const {
  return si_.size();
}
void InterpretResponse::clear_si() {
  si_.Clear();
}
 const ::std::string& InterpretResponse::si(int index) const {
  // @@protoc_insertion_point(field_get:sarmata.InterpretResponse.si)
  return si_.Get(index);
}
 ::std::string* InterpretResponse::mutable_si(int index) {
  // @@protoc_insertion_point(field_mutable:sarmata.InterpretResponse.si)
  return si_.Mutable(index);
}
 void InterpretResponse::set_si(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:sarmata.InterpretResponse.si)
  si_.Mutable(index)->assign(value);
}
 void InterpretResponse::set_si(int index, const char* value) {
  si_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sarmata.InterpretResponse.si)
}
 void InterpretResponse::set_si(int index, const char* value, size_t size) {
  si_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sarmata.InterpretResponse.si)
}
 ::std::string* InterpretResponse::add_si() {
  // @@protoc_insertion_point(field_add_mutable:sarmata.InterpretResponse.si)
  return si_.Add();
}
 void InterpretResponse::add_si(const ::std::string& value) {
  si_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sarmata.InterpretResponse.si)
}
 void InterpretResponse::add_si(const char* value) {
  si_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sarmata.InterpretResponse.si)
}
 void InterpretResponse::add_si(const char* value, size_t size) {
  si_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sarmata.InterpretResponse.si)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
InterpretResponse::si() const {
  // @@protoc_insertion_point(field_list:sarmata.InterpretResponse.si)
  return si_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
InterpretResponse::mutable_si() {
  // @@protoc_insertion_point(field_mutable_list:sarmata.InterpretResponse.si)
  return &si_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DefineGrammarRequest::kTokenFieldNumber;
const int DefineGrammarRequest::kNameFieldNumber;
const int DefineGrammarRequest::kGrammarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DefineGrammarRequest::DefineGrammarRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sarmata.DefineGrammarRequest)
}

void DefineGrammarRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DefineGrammarRequest::DefineGrammarRequest(const DefineGrammarRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sarmata.DefineGrammarRequest)
}

void DefineGrammarRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  grammar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DefineGrammarRequest::~DefineGrammarRequest() {
  // @@protoc_insertion_point(destructor:sarmata.DefineGrammarRequest)
  SharedDtor();
}

void DefineGrammarRequest::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  grammar_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DefineGrammarRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DefineGrammarRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DefineGrammarRequest_descriptor_;
}

const DefineGrammarRequest& DefineGrammarRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_asr_5fservice_2eproto();
  return *default_instance_;
}

DefineGrammarRequest* DefineGrammarRequest::default_instance_ = NULL;

DefineGrammarRequest* DefineGrammarRequest::New(::google::protobuf::Arena* arena) const {
  DefineGrammarRequest* n = new DefineGrammarRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DefineGrammarRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sarmata.DefineGrammarRequest)
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  grammar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DefineGrammarRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sarmata.DefineGrammarRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sarmata.DefineGrammarRequest.token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sarmata.DefineGrammarRequest.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_grammar;
        break;
      }

      // optional string grammar = 3;
      case 3: {
        if (tag == 26) {
         parse_grammar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_grammar()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->grammar().data(), this->grammar().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sarmata.DefineGrammarRequest.grammar"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sarmata.DefineGrammarRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sarmata.DefineGrammarRequest)
  return false;
#undef DO_
}

void DefineGrammarRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sarmata.DefineGrammarRequest)
  // optional string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sarmata.DefineGrammarRequest.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sarmata.DefineGrammarRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string grammar = 3;
  if (this->grammar().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->grammar().data(), this->grammar().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sarmata.DefineGrammarRequest.grammar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->grammar(), output);
  }

  // @@protoc_insertion_point(serialize_end:sarmata.DefineGrammarRequest)
}

::google::protobuf::uint8* DefineGrammarRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sarmata.DefineGrammarRequest)
  // optional string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sarmata.DefineGrammarRequest.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sarmata.DefineGrammarRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string grammar = 3;
  if (this->grammar().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->grammar().data(), this->grammar().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sarmata.DefineGrammarRequest.grammar");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->grammar(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sarmata.DefineGrammarRequest)
  return target;
}

int DefineGrammarRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:sarmata.DefineGrammarRequest)
  int total_size = 0;

  // optional string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string grammar = 3;
  if (this->grammar().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->grammar());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DefineGrammarRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sarmata.DefineGrammarRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DefineGrammarRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DefineGrammarRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sarmata.DefineGrammarRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sarmata.DefineGrammarRequest)
    MergeFrom(*source);
  }
}

void DefineGrammarRequest::MergeFrom(const DefineGrammarRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sarmata.DefineGrammarRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.grammar().size() > 0) {

    grammar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.grammar_);
  }
}

void DefineGrammarRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sarmata.DefineGrammarRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DefineGrammarRequest::CopyFrom(const DefineGrammarRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sarmata.DefineGrammarRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefineGrammarRequest::IsInitialized() const {

  return true;
}

void DefineGrammarRequest::Swap(DefineGrammarRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DefineGrammarRequest::InternalSwap(DefineGrammarRequest* other) {
  token_.Swap(&other->token_);
  name_.Swap(&other->name_);
  grammar_.Swap(&other->grammar_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DefineGrammarRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DefineGrammarRequest_descriptor_;
  metadata.reflection = DefineGrammarRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DefineGrammarRequest

// optional string token = 1;
void DefineGrammarRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DefineGrammarRequest::token() const {
  // @@protoc_insertion_point(field_get:sarmata.DefineGrammarRequest.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DefineGrammarRequest::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sarmata.DefineGrammarRequest.token)
}
 void DefineGrammarRequest::set_token(const char* value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sarmata.DefineGrammarRequest.token)
}
 void DefineGrammarRequest::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sarmata.DefineGrammarRequest.token)
}
 ::std::string* DefineGrammarRequest::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:sarmata.DefineGrammarRequest.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DefineGrammarRequest::release_token() {
  // @@protoc_insertion_point(field_release:sarmata.DefineGrammarRequest.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DefineGrammarRequest::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:sarmata.DefineGrammarRequest.token)
}

// optional string name = 2;
void DefineGrammarRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DefineGrammarRequest::name() const {
  // @@protoc_insertion_point(field_get:sarmata.DefineGrammarRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DefineGrammarRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sarmata.DefineGrammarRequest.name)
}
 void DefineGrammarRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sarmata.DefineGrammarRequest.name)
}
 void DefineGrammarRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sarmata.DefineGrammarRequest.name)
}
 ::std::string* DefineGrammarRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:sarmata.DefineGrammarRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DefineGrammarRequest::release_name() {
  // @@protoc_insertion_point(field_release:sarmata.DefineGrammarRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DefineGrammarRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:sarmata.DefineGrammarRequest.name)
}

// optional string grammar = 3;
void DefineGrammarRequest::clear_grammar() {
  grammar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DefineGrammarRequest::grammar() const {
  // @@protoc_insertion_point(field_get:sarmata.DefineGrammarRequest.grammar)
  return grammar_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DefineGrammarRequest::set_grammar(const ::std::string& value) {
  
  grammar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sarmata.DefineGrammarRequest.grammar)
}
 void DefineGrammarRequest::set_grammar(const char* value) {
  
  grammar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sarmata.DefineGrammarRequest.grammar)
}
 void DefineGrammarRequest::set_grammar(const char* value, size_t size) {
  
  grammar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sarmata.DefineGrammarRequest.grammar)
}
 ::std::string* DefineGrammarRequest::mutable_grammar() {
  
  // @@protoc_insertion_point(field_mutable:sarmata.DefineGrammarRequest.grammar)
  return grammar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DefineGrammarRequest::release_grammar() {
  // @@protoc_insertion_point(field_release:sarmata.DefineGrammarRequest.grammar)
  
  return grammar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DefineGrammarRequest::set_allocated_grammar(::std::string* grammar) {
  if (grammar != NULL) {
    
  } else {
    
  }
  grammar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), grammar);
  // @@protoc_insertion_point(field_set_allocated:sarmata.DefineGrammarRequest.grammar)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DefineGrammarRespone::kErrorFieldNumber;
const int DefineGrammarRespone::kGrammarNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DefineGrammarRespone::DefineGrammarRespone()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sarmata.DefineGrammarRespone)
}

void DefineGrammarRespone::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DefineGrammarRespone::DefineGrammarRespone(const DefineGrammarRespone& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sarmata.DefineGrammarRespone)
}

void DefineGrammarRespone::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  grammarname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DefineGrammarRespone::~DefineGrammarRespone() {
  // @@protoc_insertion_point(destructor:sarmata.DefineGrammarRespone)
  SharedDtor();
}

void DefineGrammarRespone::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  grammarname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DefineGrammarRespone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DefineGrammarRespone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DefineGrammarRespone_descriptor_;
}

const DefineGrammarRespone& DefineGrammarRespone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_asr_5fservice_2eproto();
  return *default_instance_;
}

DefineGrammarRespone* DefineGrammarRespone::default_instance_ = NULL;

DefineGrammarRespone* DefineGrammarRespone::New(::google::protobuf::Arena* arena) const {
  DefineGrammarRespone* n = new DefineGrammarRespone;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DefineGrammarRespone::Clear() {
// @@protoc_insertion_point(message_clear_start:sarmata.DefineGrammarRespone)
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  grammarname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DefineGrammarRespone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sarmata.DefineGrammarRespone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sarmata.DefineGrammarRespone.error"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_grammarName;
        break;
      }

      // optional string grammarName = 2;
      case 2: {
        if (tag == 18) {
         parse_grammarName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_grammarname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->grammarname().data(), this->grammarname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sarmata.DefineGrammarRespone.grammarName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sarmata.DefineGrammarRespone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sarmata.DefineGrammarRespone)
  return false;
#undef DO_
}

void DefineGrammarRespone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sarmata.DefineGrammarRespone)
  // optional string error = 1;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sarmata.DefineGrammarRespone.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->error(), output);
  }

  // optional string grammarName = 2;
  if (this->grammarname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->grammarname().data(), this->grammarname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sarmata.DefineGrammarRespone.grammarName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->grammarname(), output);
  }

  // @@protoc_insertion_point(serialize_end:sarmata.DefineGrammarRespone)
}

::google::protobuf::uint8* DefineGrammarRespone::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sarmata.DefineGrammarRespone)
  // optional string error = 1;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sarmata.DefineGrammarRespone.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->error(), target);
  }

  // optional string grammarName = 2;
  if (this->grammarname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->grammarname().data(), this->grammarname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sarmata.DefineGrammarRespone.grammarName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->grammarname(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sarmata.DefineGrammarRespone)
  return target;
}

int DefineGrammarRespone::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:sarmata.DefineGrammarRespone)
  int total_size = 0;

  // optional string error = 1;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  // optional string grammarName = 2;
  if (this->grammarname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->grammarname());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DefineGrammarRespone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sarmata.DefineGrammarRespone)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DefineGrammarRespone* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DefineGrammarRespone>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sarmata.DefineGrammarRespone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sarmata.DefineGrammarRespone)
    MergeFrom(*source);
  }
}

void DefineGrammarRespone::MergeFrom(const DefineGrammarRespone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sarmata.DefineGrammarRespone)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.grammarname().size() > 0) {

    grammarname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.grammarname_);
  }
}

void DefineGrammarRespone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sarmata.DefineGrammarRespone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DefineGrammarRespone::CopyFrom(const DefineGrammarRespone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sarmata.DefineGrammarRespone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefineGrammarRespone::IsInitialized() const {

  return true;
}

void DefineGrammarRespone::Swap(DefineGrammarRespone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DefineGrammarRespone::InternalSwap(DefineGrammarRespone* other) {
  error_.Swap(&other->error_);
  grammarname_.Swap(&other->grammarname_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DefineGrammarRespone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DefineGrammarRespone_descriptor_;
  metadata.reflection = DefineGrammarRespone_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DefineGrammarRespone

// optional string error = 1;
void DefineGrammarRespone::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DefineGrammarRespone::error() const {
  // @@protoc_insertion_point(field_get:sarmata.DefineGrammarRespone.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DefineGrammarRespone::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sarmata.DefineGrammarRespone.error)
}
 void DefineGrammarRespone::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sarmata.DefineGrammarRespone.error)
}
 void DefineGrammarRespone::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sarmata.DefineGrammarRespone.error)
}
 ::std::string* DefineGrammarRespone::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:sarmata.DefineGrammarRespone.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DefineGrammarRespone::release_error() {
  // @@protoc_insertion_point(field_release:sarmata.DefineGrammarRespone.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DefineGrammarRespone::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:sarmata.DefineGrammarRespone.error)
}

// optional string grammarName = 2;
void DefineGrammarRespone::clear_grammarname() {
  grammarname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DefineGrammarRespone::grammarname() const {
  // @@protoc_insertion_point(field_get:sarmata.DefineGrammarRespone.grammarName)
  return grammarname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DefineGrammarRespone::set_grammarname(const ::std::string& value) {
  
  grammarname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sarmata.DefineGrammarRespone.grammarName)
}
 void DefineGrammarRespone::set_grammarname(const char* value) {
  
  grammarname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sarmata.DefineGrammarRespone.grammarName)
}
 void DefineGrammarRespone::set_grammarname(const char* value, size_t size) {
  
  grammarname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sarmata.DefineGrammarRespone.grammarName)
}
 ::std::string* DefineGrammarRespone::mutable_grammarname() {
  
  // @@protoc_insertion_point(field_mutable:sarmata.DefineGrammarRespone.grammarName)
  return grammarname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DefineGrammarRespone::release_grammarname() {
  // @@protoc_insertion_point(field_release:sarmata.DefineGrammarRespone.grammarName)
  
  return grammarname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DefineGrammarRespone::set_allocated_grammarname(::std::string* grammarname) {
  if (grammarname != NULL) {
    
  } else {
    
  }
  grammarname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), grammarname);
  // @@protoc_insertion_point(field_set_allocated:sarmata.DefineGrammarRespone.grammarName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecognizeResponse::kStatusFieldNumber;
const int RecognizeResponse::kErrorFieldNumber;
const int RecognizeResponse::kWarningFieldNumber;
const int RecognizeResponse::kEventTimeFieldNumber;
const int RecognizeResponse::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecognizeResponse::RecognizeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sarmata.RecognizeResponse)
}

void RecognizeResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RecognizeResponse::RecognizeResponse(const RecognizeResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sarmata.RecognizeResponse)
}

void RecognizeResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = 0;
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  warning_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_time_ = 0;
}

RecognizeResponse::~RecognizeResponse() {
  // @@protoc_insertion_point(destructor:sarmata.RecognizeResponse)
  SharedDtor();
}

void RecognizeResponse::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  warning_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RecognizeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecognizeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecognizeResponse_descriptor_;
}

const RecognizeResponse& RecognizeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_asr_5fservice_2eproto();
  return *default_instance_;
}

RecognizeResponse* RecognizeResponse::default_instance_ = NULL;

RecognizeResponse* RecognizeResponse::New(::google::protobuf::Arena* arena) const {
  RecognizeResponse* n = new RecognizeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecognizeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sarmata.RecognizeResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RecognizeResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RecognizeResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(status_, event_time_);
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  warning_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  results_.Clear();
}

bool RecognizeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sarmata.RecognizeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sarmata.ResponseStatus status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::sarmata::ResponseStatus >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional string error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sarmata.RecognizeResponse.error"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_warning;
        break;
      }

      // optional string warning = 3;
      case 3: {
        if (tag == 26) {
         parse_warning:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_warning()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->warning().data(), this->warning().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sarmata.RecognizeResponse.warning"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_event_time;
        break;
      }

      // optional int32 event_time = 4;
      case 4: {
        if (tag == 32) {
         parse_event_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_results;
        break;
      }

      // repeated .sarmata.Phrase results = 5;
      case 5: {
        if (tag == 42) {
         parse_results:
          DO_(input->IncrementRecursionDepth());
         parse_loop_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_results;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sarmata.RecognizeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sarmata.RecognizeResponse)
  return false;
#undef DO_
}

void RecognizeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sarmata.RecognizeResponse)
  // optional .sarmata.ResponseStatus status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sarmata.RecognizeResponse.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  // optional string warning = 3;
  if (this->warning().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->warning().data(), this->warning().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sarmata.RecognizeResponse.warning");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->warning(), output);
  }

  // optional int32 event_time = 4;
  if (this->event_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->event_time(), output);
  }

  // repeated .sarmata.Phrase results = 5;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->results(i), output);
  }

  // @@protoc_insertion_point(serialize_end:sarmata.RecognizeResponse)
}

::google::protobuf::uint8* RecognizeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sarmata.RecognizeResponse)
  // optional .sarmata.ResponseStatus status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sarmata.RecognizeResponse.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  // optional string warning = 3;
  if (this->warning().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->warning().data(), this->warning().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sarmata.RecognizeResponse.warning");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->warning(), target);
  }

  // optional int32 event_time = 4;
  if (this->event_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->event_time(), target);
  }

  // repeated .sarmata.Phrase results = 5;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->results(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sarmata.RecognizeResponse)
  return target;
}

int RecognizeResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:sarmata.RecognizeResponse)
  int total_size = 0;

  // optional .sarmata.ResponseStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  // optional string warning = 3;
  if (this->warning().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->warning());
  }

  // optional int32 event_time = 4;
  if (this->event_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->event_time());
  }

  // repeated .sarmata.Phrase results = 5;
  total_size += 1 * this->results_size();
  for (int i = 0; i < this->results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->results(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecognizeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sarmata.RecognizeResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RecognizeResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RecognizeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sarmata.RecognizeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sarmata.RecognizeResponse)
    MergeFrom(*source);
  }
}

void RecognizeResponse::MergeFrom(const RecognizeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sarmata.RecognizeResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  results_.MergeFrom(from.results_);
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.warning().size() > 0) {

    warning_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.warning_);
  }
  if (from.event_time() != 0) {
    set_event_time(from.event_time());
  }
}

void RecognizeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sarmata.RecognizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecognizeResponse::CopyFrom(const RecognizeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sarmata.RecognizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognizeResponse::IsInitialized() const {

  return true;
}

void RecognizeResponse::Swap(RecognizeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecognizeResponse::InternalSwap(RecognizeResponse* other) {
  std::swap(status_, other->status_);
  error_.Swap(&other->error_);
  warning_.Swap(&other->warning_);
  std::swap(event_time_, other->event_time_);
  results_.UnsafeArenaSwap(&other->results_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecognizeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecognizeResponse_descriptor_;
  metadata.reflection = RecognizeResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecognizeResponse

// optional .sarmata.ResponseStatus status = 1;
void RecognizeResponse::clear_status() {
  status_ = 0;
}
 ::sarmata::ResponseStatus RecognizeResponse::status() const {
  // @@protoc_insertion_point(field_get:sarmata.RecognizeResponse.status)
  return static_cast< ::sarmata::ResponseStatus >(status_);
}
 void RecognizeResponse::set_status(::sarmata::ResponseStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:sarmata.RecognizeResponse.status)
}

// optional string error = 2;
void RecognizeResponse::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RecognizeResponse::error() const {
  // @@protoc_insertion_point(field_get:sarmata.RecognizeResponse.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecognizeResponse::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sarmata.RecognizeResponse.error)
}
 void RecognizeResponse::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sarmata.RecognizeResponse.error)
}
 void RecognizeResponse::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sarmata.RecognizeResponse.error)
}
 ::std::string* RecognizeResponse::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:sarmata.RecognizeResponse.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RecognizeResponse::release_error() {
  // @@protoc_insertion_point(field_release:sarmata.RecognizeResponse.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecognizeResponse::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:sarmata.RecognizeResponse.error)
}

// optional string warning = 3;
void RecognizeResponse::clear_warning() {
  warning_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RecognizeResponse::warning() const {
  // @@protoc_insertion_point(field_get:sarmata.RecognizeResponse.warning)
  return warning_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecognizeResponse::set_warning(const ::std::string& value) {
  
  warning_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sarmata.RecognizeResponse.warning)
}
 void RecognizeResponse::set_warning(const char* value) {
  
  warning_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sarmata.RecognizeResponse.warning)
}
 void RecognizeResponse::set_warning(const char* value, size_t size) {
  
  warning_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sarmata.RecognizeResponse.warning)
}
 ::std::string* RecognizeResponse::mutable_warning() {
  
  // @@protoc_insertion_point(field_mutable:sarmata.RecognizeResponse.warning)
  return warning_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RecognizeResponse::release_warning() {
  // @@protoc_insertion_point(field_release:sarmata.RecognizeResponse.warning)
  
  return warning_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecognizeResponse::set_allocated_warning(::std::string* warning) {
  if (warning != NULL) {
    
  } else {
    
  }
  warning_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), warning);
  // @@protoc_insertion_point(field_set_allocated:sarmata.RecognizeResponse.warning)
}

// optional int32 event_time = 4;
void RecognizeResponse::clear_event_time() {
  event_time_ = 0;
}
 ::google::protobuf::int32 RecognizeResponse::event_time() const {
  // @@protoc_insertion_point(field_get:sarmata.RecognizeResponse.event_time)
  return event_time_;
}
 void RecognizeResponse::set_event_time(::google::protobuf::int32 value) {
  
  event_time_ = value;
  // @@protoc_insertion_point(field_set:sarmata.RecognizeResponse.event_time)
}

// repeated .sarmata.Phrase results = 5;
int RecognizeResponse::results_size() const {
  return results_.size();
}
void RecognizeResponse::clear_results() {
  results_.Clear();
}
const ::sarmata::Phrase& RecognizeResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:sarmata.RecognizeResponse.results)
  return results_.Get(index);
}
::sarmata::Phrase* RecognizeResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:sarmata.RecognizeResponse.results)
  return results_.Mutable(index);
}
::sarmata::Phrase* RecognizeResponse::add_results() {
  // @@protoc_insertion_point(field_add:sarmata.RecognizeResponse.results)
  return results_.Add();
}
::google::protobuf::RepeatedPtrField< ::sarmata::Phrase >*
RecognizeResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:sarmata.RecognizeResponse.results)
  return &results_;
}
const ::google::protobuf::RepeatedPtrField< ::sarmata::Phrase >&
RecognizeResponse::results() const {
  // @@protoc_insertion_point(field_list:sarmata.RecognizeResponse.results)
  return results_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Phrase_Word::kTranscriptFieldNumber;
const int Phrase_Word::kConfidenceFieldNumber;
const int Phrase_Word::kStartFieldNumber;
const int Phrase_Word::kEndFieldNumber;
const int Phrase_Word::kLogprobFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Phrase_Word::Phrase_Word()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sarmata.Phrase.Word)
}

void Phrase_Word::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Phrase_Word::Phrase_Word(const Phrase_Word& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sarmata.Phrase.Word)
}

void Phrase_Word::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  transcript_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confidence_ = 0;
  start_ = 0;
  end_ = 0;
  logprob_ = 0;
}

Phrase_Word::~Phrase_Word() {
  // @@protoc_insertion_point(destructor:sarmata.Phrase.Word)
  SharedDtor();
}

void Phrase_Word::SharedDtor() {
  transcript_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Phrase_Word::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Phrase_Word::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Phrase_Word_descriptor_;
}

const Phrase_Word& Phrase_Word::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_asr_5fservice_2eproto();
  return *default_instance_;
}

Phrase_Word* Phrase_Word::default_instance_ = NULL;

Phrase_Word* Phrase_Word::New(::google::protobuf::Arena* arena) const {
  Phrase_Word* n = new Phrase_Word;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Phrase_Word::Clear() {
// @@protoc_insertion_point(message_clear_start:sarmata.Phrase.Word)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Phrase_Word, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Phrase_Word*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(confidence_, logprob_);
  transcript_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Phrase_Word::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sarmata.Phrase.Word)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string transcript = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transcript()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->transcript().data(), this->transcript().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sarmata.Phrase.Word.transcript"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_confidence;
        break;
      }

      // optional double confidence = 2;
      case 2: {
        if (tag == 17) {
         parse_confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &confidence_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_start;
        break;
      }

      // optional int32 start = 3;
      case 3: {
        if (tag == 24) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_end;
        break;
      }

      // optional int32 end = 4;
      case 4: {
        if (tag == 32) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_logprob;
        break;
      }

      // optional double logprob = 5;
      case 5: {
        if (tag == 41) {
         parse_logprob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &logprob_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sarmata.Phrase.Word)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sarmata.Phrase.Word)
  return false;
#undef DO_
}

void Phrase_Word::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sarmata.Phrase.Word)
  // optional string transcript = 1;
  if (this->transcript().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transcript().data(), this->transcript().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sarmata.Phrase.Word.transcript");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->transcript(), output);
  }

  // optional double confidence = 2;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->confidence(), output);
  }

  // optional int32 start = 3;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->start(), output);
  }

  // optional int32 end = 4;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->end(), output);
  }

  // optional double logprob = 5;
  if (this->logprob() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->logprob(), output);
  }

  // @@protoc_insertion_point(serialize_end:sarmata.Phrase.Word)
}

::google::protobuf::uint8* Phrase_Word::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sarmata.Phrase.Word)
  // optional string transcript = 1;
  if (this->transcript().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transcript().data(), this->transcript().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sarmata.Phrase.Word.transcript");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->transcript(), target);
  }

  // optional double confidence = 2;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->confidence(), target);
  }

  // optional int32 start = 3;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->start(), target);
  }

  // optional int32 end = 4;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->end(), target);
  }

  // optional double logprob = 5;
  if (this->logprob() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->logprob(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sarmata.Phrase.Word)
  return target;
}

int Phrase_Word::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:sarmata.Phrase.Word)
  int total_size = 0;

  // optional string transcript = 1;
  if (this->transcript().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->transcript());
  }

  // optional double confidence = 2;
  if (this->confidence() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 start = 3;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->start());
  }

  // optional int32 end = 4;
  if (this->end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->end());
  }

  // optional double logprob = 5;
  if (this->logprob() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Phrase_Word::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sarmata.Phrase.Word)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Phrase_Word* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Phrase_Word>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sarmata.Phrase.Word)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sarmata.Phrase.Word)
    MergeFrom(*source);
  }
}

void Phrase_Word::MergeFrom(const Phrase_Word& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sarmata.Phrase.Word)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.transcript().size() > 0) {

    transcript_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transcript_);
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
  if (from.logprob() != 0) {
    set_logprob(from.logprob());
  }
}

void Phrase_Word::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sarmata.Phrase.Word)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Phrase_Word::CopyFrom(const Phrase_Word& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sarmata.Phrase.Word)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Phrase_Word::IsInitialized() const {

  return true;
}

void Phrase_Word::Swap(Phrase_Word* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Phrase_Word::InternalSwap(Phrase_Word* other) {
  transcript_.Swap(&other->transcript_);
  std::swap(confidence_, other->confidence_);
  std::swap(start_, other->start_);
  std::swap(end_, other->end_);
  std::swap(logprob_, other->logprob_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Phrase_Word::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Phrase_Word_descriptor_;
  metadata.reflection = Phrase_Word_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Phrase::kWordsFieldNumber;
const int Phrase::kConfidenceFieldNumber;
const int Phrase::kCorrectFieldNumber;
const int Phrase::kSemanticInterpretationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Phrase::Phrase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sarmata.Phrase)
}

void Phrase::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Phrase::Phrase(const Phrase& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sarmata.Phrase)
}

void Phrase::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  confidence_ = 0;
  correct_ = false;
  semantic_interpretation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Phrase::~Phrase() {
  // @@protoc_insertion_point(destructor:sarmata.Phrase)
  SharedDtor();
}

void Phrase::SharedDtor() {
  semantic_interpretation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Phrase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Phrase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Phrase_descriptor_;
}

const Phrase& Phrase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_asr_5fservice_2eproto();
  return *default_instance_;
}

Phrase* Phrase::default_instance_ = NULL;

Phrase* Phrase::New(::google::protobuf::Arena* arena) const {
  Phrase* n = new Phrase;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Phrase::Clear() {
// @@protoc_insertion_point(message_clear_start:sarmata.Phrase)
  confidence_ = 0;
  correct_ = false;
  semantic_interpretation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  words_.Clear();
}

bool Phrase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sarmata.Phrase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sarmata.Phrase.Word words = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_words:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_words()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_words;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(17)) goto parse_confidence;
        break;
      }

      // optional double confidence = 2;
      case 2: {
        if (tag == 17) {
         parse_confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &confidence_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_correct;
        break;
      }

      // optional bool correct = 3;
      case 3: {
        if (tag == 24) {
         parse_correct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &correct_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_semantic_interpretation;
        break;
      }

      // optional string semantic_interpretation = 4;
      case 4: {
        if (tag == 34) {
         parse_semantic_interpretation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_semantic_interpretation()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->semantic_interpretation().data(), this->semantic_interpretation().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sarmata.Phrase.semantic_interpretation"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sarmata.Phrase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sarmata.Phrase)
  return false;
#undef DO_
}

void Phrase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sarmata.Phrase)
  // repeated .sarmata.Phrase.Word words = 1;
  for (unsigned int i = 0, n = this->words_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->words(i), output);
  }

  // optional double confidence = 2;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->confidence(), output);
  }

  // optional bool correct = 3;
  if (this->correct() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->correct(), output);
  }

  // optional string semantic_interpretation = 4;
  if (this->semantic_interpretation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->semantic_interpretation().data(), this->semantic_interpretation().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sarmata.Phrase.semantic_interpretation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->semantic_interpretation(), output);
  }

  // @@protoc_insertion_point(serialize_end:sarmata.Phrase)
}

::google::protobuf::uint8* Phrase::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sarmata.Phrase)
  // repeated .sarmata.Phrase.Word words = 1;
  for (unsigned int i = 0, n = this->words_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->words(i), false, target);
  }

  // optional double confidence = 2;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->confidence(), target);
  }

  // optional bool correct = 3;
  if (this->correct() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->correct(), target);
  }

  // optional string semantic_interpretation = 4;
  if (this->semantic_interpretation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->semantic_interpretation().data(), this->semantic_interpretation().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sarmata.Phrase.semantic_interpretation");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->semantic_interpretation(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sarmata.Phrase)
  return target;
}

int Phrase::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:sarmata.Phrase)
  int total_size = 0;

  // optional double confidence = 2;
  if (this->confidence() != 0) {
    total_size += 1 + 8;
  }

  // optional bool correct = 3;
  if (this->correct() != 0) {
    total_size += 1 + 1;
  }

  // optional string semantic_interpretation = 4;
  if (this->semantic_interpretation().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->semantic_interpretation());
  }

  // repeated .sarmata.Phrase.Word words = 1;
  total_size += 1 * this->words_size();
  for (int i = 0; i < this->words_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->words(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Phrase::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sarmata.Phrase)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Phrase* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Phrase>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sarmata.Phrase)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sarmata.Phrase)
    MergeFrom(*source);
  }
}

void Phrase::MergeFrom(const Phrase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sarmata.Phrase)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  words_.MergeFrom(from.words_);
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
  if (from.correct() != 0) {
    set_correct(from.correct());
  }
  if (from.semantic_interpretation().size() > 0) {

    semantic_interpretation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.semantic_interpretation_);
  }
}

void Phrase::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sarmata.Phrase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Phrase::CopyFrom(const Phrase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sarmata.Phrase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Phrase::IsInitialized() const {

  return true;
}

void Phrase::Swap(Phrase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Phrase::InternalSwap(Phrase* other) {
  words_.UnsafeArenaSwap(&other->words_);
  std::swap(confidence_, other->confidence_);
  std::swap(correct_, other->correct_);
  semantic_interpretation_.Swap(&other->semantic_interpretation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Phrase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Phrase_descriptor_;
  metadata.reflection = Phrase_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Phrase_Word

// optional string transcript = 1;
void Phrase_Word::clear_transcript() {
  transcript_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Phrase_Word::transcript() const {
  // @@protoc_insertion_point(field_get:sarmata.Phrase.Word.transcript)
  return transcript_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Phrase_Word::set_transcript(const ::std::string& value) {
  
  transcript_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sarmata.Phrase.Word.transcript)
}
 void Phrase_Word::set_transcript(const char* value) {
  
  transcript_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sarmata.Phrase.Word.transcript)
}
 void Phrase_Word::set_transcript(const char* value, size_t size) {
  
  transcript_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sarmata.Phrase.Word.transcript)
}
 ::std::string* Phrase_Word::mutable_transcript() {
  
  // @@protoc_insertion_point(field_mutable:sarmata.Phrase.Word.transcript)
  return transcript_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Phrase_Word::release_transcript() {
  // @@protoc_insertion_point(field_release:sarmata.Phrase.Word.transcript)
  
  return transcript_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Phrase_Word::set_allocated_transcript(::std::string* transcript) {
  if (transcript != NULL) {
    
  } else {
    
  }
  transcript_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transcript);
  // @@protoc_insertion_point(field_set_allocated:sarmata.Phrase.Word.transcript)
}

// optional double confidence = 2;
void Phrase_Word::clear_confidence() {
  confidence_ = 0;
}
 double Phrase_Word::confidence() const {
  // @@protoc_insertion_point(field_get:sarmata.Phrase.Word.confidence)
  return confidence_;
}
 void Phrase_Word::set_confidence(double value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:sarmata.Phrase.Word.confidence)
}

// optional int32 start = 3;
void Phrase_Word::clear_start() {
  start_ = 0;
}
 ::google::protobuf::int32 Phrase_Word::start() const {
  // @@protoc_insertion_point(field_get:sarmata.Phrase.Word.start)
  return start_;
}
 void Phrase_Word::set_start(::google::protobuf::int32 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:sarmata.Phrase.Word.start)
}

// optional int32 end = 4;
void Phrase_Word::clear_end() {
  end_ = 0;
}
 ::google::protobuf::int32 Phrase_Word::end() const {
  // @@protoc_insertion_point(field_get:sarmata.Phrase.Word.end)
  return end_;
}
 void Phrase_Word::set_end(::google::protobuf::int32 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:sarmata.Phrase.Word.end)
}

// optional double logprob = 5;
void Phrase_Word::clear_logprob() {
  logprob_ = 0;
}
 double Phrase_Word::logprob() const {
  // @@protoc_insertion_point(field_get:sarmata.Phrase.Word.logprob)
  return logprob_;
}
 void Phrase_Word::set_logprob(double value) {
  
  logprob_ = value;
  // @@protoc_insertion_point(field_set:sarmata.Phrase.Word.logprob)
}

// -------------------------------------------------------------------

// Phrase

// repeated .sarmata.Phrase.Word words = 1;
int Phrase::words_size() const {
  return words_.size();
}
void Phrase::clear_words() {
  words_.Clear();
}
const ::sarmata::Phrase_Word& Phrase::words(int index) const {
  // @@protoc_insertion_point(field_get:sarmata.Phrase.words)
  return words_.Get(index);
}
::sarmata::Phrase_Word* Phrase::mutable_words(int index) {
  // @@protoc_insertion_point(field_mutable:sarmata.Phrase.words)
  return words_.Mutable(index);
}
::sarmata::Phrase_Word* Phrase::add_words() {
  // @@protoc_insertion_point(field_add:sarmata.Phrase.words)
  return words_.Add();
}
::google::protobuf::RepeatedPtrField< ::sarmata::Phrase_Word >*
Phrase::mutable_words() {
  // @@protoc_insertion_point(field_mutable_list:sarmata.Phrase.words)
  return &words_;
}
const ::google::protobuf::RepeatedPtrField< ::sarmata::Phrase_Word >&
Phrase::words() const {
  // @@protoc_insertion_point(field_list:sarmata.Phrase.words)
  return words_;
}

// optional double confidence = 2;
void Phrase::clear_confidence() {
  confidence_ = 0;
}
 double Phrase::confidence() const {
  // @@protoc_insertion_point(field_get:sarmata.Phrase.confidence)
  return confidence_;
}
 void Phrase::set_confidence(double value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:sarmata.Phrase.confidence)
}

// optional bool correct = 3;
void Phrase::clear_correct() {
  correct_ = false;
}
 bool Phrase::correct() const {
  // @@protoc_insertion_point(field_get:sarmata.Phrase.correct)
  return correct_;
}
 void Phrase::set_correct(bool value) {
  
  correct_ = value;
  // @@protoc_insertion_point(field_set:sarmata.Phrase.correct)
}

// optional string semantic_interpretation = 4;
void Phrase::clear_semantic_interpretation() {
  semantic_interpretation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Phrase::semantic_interpretation() const {
  // @@protoc_insertion_point(field_get:sarmata.Phrase.semantic_interpretation)
  return semantic_interpretation_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Phrase::set_semantic_interpretation(const ::std::string& value) {
  
  semantic_interpretation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sarmata.Phrase.semantic_interpretation)
}
 void Phrase::set_semantic_interpretation(const char* value) {
  
  semantic_interpretation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sarmata.Phrase.semantic_interpretation)
}
 void Phrase::set_semantic_interpretation(const char* value, size_t size) {
  
  semantic_interpretation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sarmata.Phrase.semantic_interpretation)
}
 ::std::string* Phrase::mutable_semantic_interpretation() {
  
  // @@protoc_insertion_point(field_mutable:sarmata.Phrase.semantic_interpretation)
  return semantic_interpretation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Phrase::release_semantic_interpretation() {
  // @@protoc_insertion_point(field_release:sarmata.Phrase.semantic_interpretation)
  
  return semantic_interpretation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Phrase::set_allocated_semantic_interpretation(::std::string* semantic_interpretation) {
  if (semantic_interpretation != NULL) {
    
  } else {
    
  }
  semantic_interpretation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), semantic_interpretation);
  // @@protoc_insertion_point(field_set_allocated:sarmata.Phrase.semantic_interpretation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace sarmata

// @@protoc_insertion_point(global_scope)
